import { io, Socket } from 'socket.io-client';
import { WSMessage, ProgressData, LogData, ErrorData, CompletedData } from '@/types';

const WS_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';

class WebSocketService {
  private socket: Socket | null = null;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;

  constructor() {
    this.connect();
  }

  private connect(): void {
    try {
      this.socket = io(WS_URL, {
        path: '/ws',
        transports: ['websocket', 'polling'],
        timeout: 10000,
        reconnection: true,
        reconnectionAttempts: this.maxReconnectAttempts,
        reconnectionDelay: this.reconnectDelay,
      });

      this.setupEventListeners();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket:', error);
    }
  }

  private setupEventListeners(): void {
    if (!this.socket) return;

    this.socket.on('connect', () => {
      console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
      this.reconnectAttempts = 0;
    });

    this.socket.on('disconnect', (reason: string) => {
      console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
    });

    this.socket.on('connect_error', (error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
      this.reconnectAttempts++;
      
      if (this.reconnectAttempts >= this.maxReconnectAttempts) {
        console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      }
    });

    this.socket.on('reconnect', (attemptNumber: number) => {
      console.log(`üîÑ WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attemptNumber})`);
    });

    this.socket.on('connected', (data: any) => {
      console.log('‚úÖ WebSocket –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ:', data);
    });
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
  public subscribeToGame(
    gameId: string,
    callbacks: {
      onProgress?: (data: ProgressData) => void;
      onLog?: (data: LogData) => void;
      onError?: (data: ErrorData) => void;
      onCompleted?: (data: CompletedData) => void;
      onPreview?: (data: any) => void;
    }
  ): void {
    if (!this.socket) {
      console.warn('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–≥—Ä—É
    this.socket.emit('subscribe:game', gameId);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (callbacks.onProgress) {
      this.socket.on('game:progress', (message: WSMessage) => {
        if (message.gameId === gameId) {
          callbacks.onProgress!(message.data);
        }
      });
    }

    if (callbacks.onLog) {
      this.socket.on('game:log', (message: WSMessage) => {
        if (message.gameId === gameId) {
          callbacks.onLog!(message.data);
        }
      });
    }

    if (callbacks.onError) {
      this.socket.on('game:error', (message: WSMessage) => {
        if (message.gameId === gameId) {
          callbacks.onError!(message.data);
        }
      });
    }

    if (callbacks.onCompleted) {
      this.socket.on('game:completed', (message: WSMessage) => {
        if (message.gameId === gameId) {
          callbacks.onCompleted!(message.data);
        }
      });
    }

    if (callbacks.onPreview) {
      this.socket.on('game:preview', (message: WSMessage) => {
        if (message.gameId === gameId) {
          callbacks.onPreview!(message.data);
        }
      });
    }

    console.log(`üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã ${gameId}`);
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä—ã
  public unsubscribeFromGame(gameId: string): void {
    if (!this.socket) return;

    this.socket.emit('unsubscribe:game', gameId);
    
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
    this.socket.off('game:progress');
    this.socket.off('game:log');
    this.socket.off('game:error');
    this.socket.off('game:completed');
    this.socket.off('game:preview');

    console.log(`üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä—ã ${gameId}`);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  public subscribeToSystemMessages(
    onMessage: (message: { type: string; message: string; timestamp: number }) => void
  ): void {
    if (!this.socket) return;

    this.socket.on('system:message', onMessage);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
  public subscribeToServerStatus(
    onStatusChange: (status: { status: string; details?: any; timestamp: number }) => void
  ): void {
    if (!this.socket) return;

    this.socket.on('server:status', onStatusChange);
  }

  // Ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  public ping(): Promise<number> {
    return new Promise((resolve, reject) => {
      if (!this.socket) {
        reject(new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'));
        return;
      }

      const startTime = Date.now();
      
      this.socket.emit('ping');
      
      this.socket.once('pong', (data: { timestamp: number }) => {
        const latency = Date.now() - startTime;
        resolve(latency);
      });

      // –¢–∞–π–º–∞—É—Ç –¥–ª—è ping
      setTimeout(() => {
        reject(new Error('Ping timeout'));
      }, 5000);
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  public isConnected(): boolean {
    return this.socket?.connected || false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  public getSocketId(): string | null {
    return this.socket?.id || null;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  public reconnect(): void {
    if (this.socket) {
      this.socket.disconnect();
      this.socket.connect();
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  public disconnect(): void {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  public onServerDisconnect(callback: (reason: string) => void): void {
    if (!this.socket) return;

    this.socket.on('server:disconnect', (data: { reason: string }) => {
      callback(data.reason);
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  public onServerShutdown(callback: (reason: string) => void): void {
    if (!this.socket) return;

    this.socket.on('server:shutdown', (data: { reason: string }) => {
      callback(data.reason);
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ª–∏–º–∏—Ç–∞—Ö
  public onRateLimit(callback: (data: { message: string; resetTime: number }) => void): void {
    if (!this.socket) return;

    this.socket.on('rate:limit', callback);
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const wsService = new WebSocketService();

export default wsService; 
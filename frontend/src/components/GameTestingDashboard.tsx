import React, { useState, useEffect } from 'react';
import axios from 'axios';

interface TestResult {
  testCaseId: string;
  status: 'passed' | 'failed' | 'skipped' | 'timeout' | 'error';
  duration: number;
  message?: string;
  errors: Array<{
    code: string;
    message: string;
    severity: 'critical' | 'major' | 'minor';
  }>;
  warnings: Array<{
    code: string;
    message: string;
    impact: 'performance' | 'compatibility' | 'usability';
  }>;
}

interface TestReport {
  id: string;
  gameId: string;
  status: 'passed' | 'failed' | 'partial';
  duration: number;
  summary: {
    totalTests: number;
    passed: number;
    failed: number;
    successRate: number;
    criticalIssues: number;
  };
  recommendations: string[];
}

interface TestScenario {
  id: string;
  name: string;
  description: string;
}

interface TestStats {
  totalTests: number;
  todayTests: number;
  successRate: number;
  averageExecutionTime: number;
  topIssues: Array<{
    issue: string;
    count: number;
  }>;
  testsByCategory: Record<string, {
    total: number;
    passed: number;
    failed: number;
  }>;
  recentTrends: {
    labels: string[];
    successRates: number[];
    testCounts: number[];
  };
}

const GameTestingDashboard: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'run' | 'results' | 'scenarios' | 'stats'>('run');
  const [testReport, setTestReport] = useState<TestReport | null>(null);
  const [scenarios, setScenarios] = useState<TestScenario[]>([]);
  const [stats, setStats] = useState<TestStats | null>(null);
  const [isRunning, setIsRunning] = useState(false);
  const [selectedGame, setSelectedGame] = useState<any>(null);
  const [testProgress, setTestProgress] = useState<{
    currentStep: string;
    progress: number;
    logs: string[];
  } | null>(null);

  useEffect(() => {
    loadScenarios();
    loadStats();
  }, []);

  const loadScenarios = async () => {
    try {
      const response = await axios.get('/api/testing/scenarios');
      if (response.data.success) {
        setScenarios(response.data.data.scenarios);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:', error);
    }
  };

  const loadStats = async () => {
    try {
      const response = await axios.get('/api/testing/stats');
      if (response.data.success) {
        setStats(response.data.data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  };

  const runFullTest = async (gameData: any) => {
    if (!gameData) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    setIsRunning(true);
    setTestProgress({ currentStep: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...', progress: 0, logs: [] });

    try {
      const response = await axios.post('/api/testing/run-full', {
        gameRequest: gameData
      });

      if (response.data.success) {
        setTestReport(response.data.data.testReport);
        setTestProgress(null);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    } finally {
      setIsRunning(false);
    }
  };

  const runQuickTest = async (gameData: any) => {
    if (!gameData) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    setIsRunning(true);
    setTestProgress({ currentStep: '–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...', progress: 0, logs: [] });

    try {
      const response = await axios.post('/api/testing/run-quick', {
        gameData
      });

      if (response.data.success) {
        const quickResult = response.data.data;
        // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        setTestReport({
          id: quickResult.testId,
          gameId: gameData.id,
          status: quickResult.status,
          duration: quickResult.duration,
          summary: {
            totalTests: quickResult.quickSummary.totalCriticalTests,
            passed: quickResult.quickSummary.passed,
            failed: quickResult.quickSummary.failed,
            successRate: quickResult.quickSummary.totalCriticalTests > 0 
              ? Math.round((quickResult.quickSummary.passed / quickResult.quickSummary.totalCriticalTests) * 100)
              : 0,
            criticalIssues: quickResult.criticalIssues
          },
          recommendations: quickResult.recommendations
        });
        setTestProgress(null);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    } finally {
      setIsRunning(false);
    }
  };

  const runScenario = async (scenario: TestScenario) => {
    setIsRunning(true);
    setTestProgress({ currentStep: `–ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name}`, progress: 0, logs: [] });

    try {
      const response = await axios.post('/api/testing/run-scenario', {
        scenario
      });

      if (response.data.success) {
        setTestReport(response.data.data.testReport);
        setTestProgress(null);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å—Ü–µ–Ω–∞—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è');
    } finally {
      setIsRunning(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'passed': return 'text-green-600';
      case 'failed': return 'text-red-600';
      case 'partial': return 'text-yellow-600';
      default: return 'text-gray-600';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'passed': return '‚úÖ';
      case 'failed': return '‚ùå';
      case 'partial': return '‚ö†Ô∏è';
      default: return '‚è≥';
    }
  };

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white rounded-lg shadow-sm p-6">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä
        </h1>
        <p className="text-gray-600">
          –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        </p>
      </div>

      {/* –¢–∞–±—ã */}
      <div className="bg-white rounded-lg shadow-sm">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8" aria-label="Tabs">
            {[
              { id: 'run', name: '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤', icon: 'üöÄ' },
              { id: 'results', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', icon: 'üìä' },
              { id: 'scenarios', name: '–°—Ü–µ–Ω–∞—Ä–∏–∏', icon: 'üìù' },
              { id: 'stats', name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', icon: 'üìà' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm flex items-center space-x-2`}
              >
                <span>{tab.icon}</span>
                <span>{tab.name}</span>
              </button>
            ))}
          </nav>
        </div>

        <div className="p-6">
          {/* –í–∫–ª–∞–¥–∫–∞ "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤" */}
          {activeTab === 'run' && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="text-lg font-semibold mb-3">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                  <div className="space-y-2">
                    <input
                      type="text"
                      placeholder="ID –∏–≥—Ä—ã –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                      value={selectedGame?.id || ''}
                      onChange={(e) => setSelectedGame({ id: e.target.value, prompt: {} })}
                    />
                    <p className="text-sm text-gray-500">
                      –í–≤–µ–¥–∏—Ç–µ ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    </p>
                  </div>
                </div>

                {/* –ü–∞–Ω–µ–ª—å —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="text-lg font-semibold mb-3">–¢–∏–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                  <div className="space-y-3">
                    <button
                      onClick={() => runQuickTest(selectedGame)}
                      disabled={isRunning || !selectedGame}
                      className="w-full py-2 px-4 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                    >
                      ‚ö° –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (2-3 –º–∏–Ω)
                    </button>
                    <button
                      onClick={() => runFullTest(selectedGame)}
                      disabled={isRunning || !selectedGame}
                      className="w-full py-2 px-4 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                    >
                      üîç –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (5-10 –º–∏–Ω)
                    </button>
                  </div>
                </div>
              </div>

              {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
              {testProgress && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <h4 className="font-semibold text-blue-900 mb-2">
                    {testProgress.currentStep}
                  </h4>
                  <div className="w-full bg-blue-200 rounded-full h-2">
                    <div
                      className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${testProgress.progress}%` }}
                    ></div>
                  </div>
                  {testProgress.logs.length > 0 && (
                    <div className="mt-2 text-sm text-blue-700">
                      {testProgress.logs.slice(-3).map((log, i) => (
                        <div key={i}>‚Ä¢ {log}</div>
                      ))}
                    </div>
                  )}
                </div>
              )}
            </div>
          )}

          {/* –í–∫–ª–∞–¥–∫–∞ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã" */}
          {activeTab === 'results' && (
            <div className="space-y-6">
              {testReport ? (
                <>
                  {/* –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div className="bg-gray-50 rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-gray-900">
                        {testReport.summary.totalTests}
                      </div>
                      <div className="text-sm text-gray-600">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</div>
                    </div>
                    <div className="bg-green-50 rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-green-600">
                        {testReport.summary.passed}
                      </div>
                      <div className="text-sm text-gray-600">–ü—Ä–æ–π–¥–µ–Ω–æ</div>
                    </div>
                    <div className="bg-red-50 rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-red-600">
                        {testReport.summary.failed}
                      </div>
                      <div className="text-sm text-gray-600">–ü—Ä–æ–≤–∞–ª–µ–Ω–æ</div>
                    </div>
                    <div className="bg-blue-50 rounded-lg p-4 text-center">
                      <div className="text-2xl font-bold text-blue-600">
                        {testReport.summary.successRate}%
                      </div>
                      <div className="text-sm text-gray-600">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
                    </div>
                  </div>

                  {/* –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è */}
                  <div className="bg-white border rounded-lg p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <span className="text-2xl">{getStatusIcon(testReport.status)}</span>
                        <div>
                          <h3 className={`text-lg font-semibold ${getStatusColor(testReport.status)}`}>
                            {testReport.status === 'passed' ? '–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã' :
                             testReport.status === 'failed' ? '–¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã' :
                             '–ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö'}
                          </h3>
                          <p className="text-gray-600">
                            –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {Math.round(testReport.duration / 1000)}—Å
                          </p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-sm text-gray-500">ID —Ç–µ—Å—Ç–∞</div>
                        <div className="font-mono text-sm">{testReport.id}</div>
                      </div>
                    </div>
                  </div>

                  {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
                  {testReport.recommendations.length > 0 && (
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                      <h4 className="font-semibold text-yellow-900 mb-2">
                        üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
                      </h4>
                      <ul className="space-y-1">
                        {testReport.recommendations.map((rec, i) => (
                          <li key={i} className="text-yellow-800 text-sm">
                            ‚Ä¢ {rec}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {/* –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã */}
                  {testReport.summary.criticalIssues > 0 && (
                    <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                      <h4 className="font-semibold text-red-900 mb-2">
                        üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ({testReport.summary.criticalIssues})
                      </h4>
                      <p className="text-red-800 text-sm">
                        –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–µ—à–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä—ã.
                        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.
                      </p>
                    </div>
                  )}
                </>
              ) : (
                <div className="text-center py-12">
                  <div className="text-6xl mb-4">üß™</div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">
                    –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                  </h3>
                  <p className="text-gray-600">
                    –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                  </p>
                </div>
              )}
            </div>
          )}

          {/* –í–∫–ª–∞–¥–∫–∞ "–°—Ü–µ–Ω–∞—Ä–∏–∏" */}
          {activeTab === 'scenarios' && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {scenarios.map((scenario) => (
                  <div key={scenario.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                    <h4 className="font-semibold text-gray-900 mb-2">{scenario.name}</h4>
                    <p className="text-gray-600 text-sm mb-4">{scenario.description}</p>
                    <button
                      onClick={() => runScenario(scenario)}
                      disabled={isRunning}
                      className="w-full py-2 px-4 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                    >
                      –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –í–∫–ª–∞–¥–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" */}
          {activeTab === 'stats' && stats && (
            <div className="space-y-6">
              {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="bg-blue-50 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-blue-600">{stats.totalTests}</div>
                  <div className="text-sm text-gray-600">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</div>
                </div>
                <div className="bg-green-50 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-green-600">{stats.todayTests}</div>
                  <div className="text-sm text-gray-600">–°–µ–≥–æ–¥–Ω—è</div>
                </div>
                <div className="bg-purple-50 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-purple-600">{stats.successRate}%</div>
                  <div className="text-sm text-gray-600">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
                </div>
                <div className="bg-yellow-50 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-yellow-600">
                    {Math.round(stats.averageExecutionTime / 1000)}—Å
                  </div>
                  <div className="text-sm text-gray-600">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</div>
                </div>
              </div>

              {/* –¢–æ–ø –ø—Ä–æ–±–ª–µ–º */}
              <div className="bg-white border rounded-lg p-4">
                <h4 className="font-semibold text-gray-900 mb-4">üî• –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã</h4>
                <div className="space-y-2">
                  {stats.topIssues.map((issue, i) => (
                    <div key={i} className="flex justify-between items-center py-2">
                      <span className="text-gray-800">{issue.issue}</span>
                      <span className="bg-red-100 text-red-800 text-xs px-2 py-1 rounded-full">
                        {issue.count}
                      </span>
                    </div>
                  ))}
                </div>
              </div>

              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
              <div className="bg-white border rounded-lg p-4">
                <h4 className="font-semibold text-gray-900 mb-4">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {Object.entries(stats.testsByCategory).map(([category, data]) => (
                    <div key={category} className="border rounded-lg p-3">
                      <h5 className="font-medium text-gray-900 capitalize mb-2">{category}</h5>
                      <div className="space-y-1 text-sm">
                        <div className="flex justify-between">
                          <span>–í—Å–µ–≥–æ:</span>
                          <span className="font-medium">{data.total}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>–ü—Ä–æ–π–¥–µ–Ω–æ:</span>
                          <span className="text-green-600 font-medium">{data.passed}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:</span>
                          <span className="text-red-600 font-medium">{data.failed}</span>
                        </div>
                        <div className="mt-2 w-full bg-gray-200 rounded-full h-2">
                          <div
                            className="bg-green-600 h-2 rounded-full"
                            style={{ width: `${(data.passed / data.total) * 100}%` }}
                          ></div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default GameTestingDashboard; 
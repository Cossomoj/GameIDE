import React, { useState, useEffect, useRef } from 'react';
import { io, Socket } from 'socket.io-client';
import './InteractiveGameCreator.css';

interface GenerationVariant {
  id: string;
  type: 'ai_generated';
  content: any;
  metadata: {
    prompt?: string;
    userPrompt?: string;
    isCustom?: boolean;
  };
  preview?: string;
}

interface GenerationStep {
  stepId: string;
  type: 'character' | 'mechanics' | 'levels' | 'graphics' | 'sounds' | 'ui';
  name: string;
  description: string;
  variants: GenerationVariant[];
  selectedVariant?: string;
  isCompleted: boolean;
}

interface GenerationProgress {
  currentStep: number;
  totalSteps: number;
  stepName: string;
  stepDescription: string;
  progress: number;
  variantsGenerated: number;
  isWaitingForSelection: boolean;
}

export const InteractiveGameCreator: React.FC = () => {
  const [gameId, setGameId] = useState<string>('');
  const [isConnected, setIsConnected] = useState(false);
  const [progress, setProgress] = useState<GenerationProgress | null>(null);
  const [currentStep, setCurrentStep] = useState<GenerationStep | null>(null);
  const [variants, setVariants] = useState<GenerationVariant[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [customPrompt, setCustomPrompt] = useState('');
  const [showCustomPrompt, setShowCustomPrompt] = useState(false);
  const [selectedVariant, setSelectedVariant] = useState<string>('');
  const [generationLogs, setGenerationLogs] = useState<string[]>([]);
  
  const socketRef = useRef<Socket | null>(null);

  useEffect(() => {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
            socketRef.current = io('http://localhost:3001');
    
    socketRef.current.on('connect', () => {
      setIsConnected(true);
      console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket');
    });

    socketRef.current.on('disconnect', () => {
      setIsConnected(false);
      console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    socketRef.current.on('interactive:step:started', (data) => {
      setCurrentStep(data.step);
      setVariants([]);
      setSelectedVariant('');
      setGenerationLogs(prev => [...prev, `üöÄ –ù–∞—á–∞—Ç —ç—Ç–∞–ø: ${data.step.name}`]);
    });

    socketRef.current.on('interactive:variants:generating', (data) => {
      setIsGenerating(true);
      setGenerationLogs(prev => [...prev, `üé≤ ${data.message}`]);
    });

    socketRef.current.on('interactive:variants:generated', (data) => {
      setIsGenerating(false);
      setVariants(prev => [...prev, ...data.variants]);
      setGenerationLogs(prev => [...prev, 
        `‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${data.variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤${data.isCustomGeneration ? ' (—Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π)' : ''}`
      ]);
    });

    socketRef.current.on('interactive:step:completed', (data) => {
      setGenerationLogs(prev => [...prev, `‚úÖ –≠—Ç–∞–ø "${currentStep?.name}" –∑–∞–≤–µ—Ä—à–µ–Ω`]);
    });

    socketRef.current.on('interactive:progress:update', (data) => {
      setProgress(data);
    });

    socketRef.current.on('interactive:preview:generated', (data) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
      setVariants(prev => prev.map(v => 
        v.id === data.variantId 
          ? { ...v, preview: data.preview.preview }
          : v
      ));
    });

    socketRef.current.on('interactive:error', (data) => {
      setGenerationLogs(prev => [...prev, `‚ùå –û—à–∏–±–∫–∞: ${data.message}`]);
      setIsGenerating(false);
    });

    return () => {
      socketRef.current?.disconnect();
    };
  }, []);

  const startInteractiveGeneration = async () => {
    try {
      const response = await fetch('/api/interactive/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
          description: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä –ø—Ä–æ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞ –Ω–∞ —á—É–∂–æ–π –ø–ª–∞–Ω–µ—Ç–µ',
          genre: 'platformer',
          userId: 'user123'
        })
      });

      const result = await response.json();
      if (result.success) {
        setGameId(result.data.gameId);
        setProgress({
          currentStep: result.data.currentStep + 1,
          totalSteps: result.data.totalSteps,
          stepName: result.data.step.name,
          stepDescription: result.data.step.description,
          progress: Math.round(((result.data.currentStep + 1) / result.data.totalSteps) * 100),
          variantsGenerated: 0,
          isWaitingForSelection: false
        });

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–π –∏–≥—Ä—ã
        socketRef.current?.emit('interactive:subscribe', result.data.gameId);
        
        setGenerationLogs(['üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!']);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    }
  };

  const generateMoreVariants = () => {
    if (!gameId || !currentStep) return;
    
    socketRef.current?.emit('interactive:generate:more', {
      gameId,
      stepId: currentStep.stepId,
      count: 5
    });
  };

  const generateCustomVariants = () => {
    if (!gameId || !currentStep || !customPrompt.trim()) return;

    socketRef.current?.emit('interactive:generate:custom', {
      gameId,
      stepId: currentStep.stepId,
      customPrompt: customPrompt.trim(),
      count: 3
    });

    setCustomPrompt('');
    setShowCustomPrompt(false);
  };

  const selectVariant = (variantId: string) => {
    if (!gameId || !currentStep) return;

    socketRef.current?.emit('interactive:select:variant', {
      gameId,
      stepId: currentStep.stepId,
      variantId
    });

    setSelectedVariant(variantId);
  };

  const generatePreview = (variantId: string) => {
    if (!gameId || !currentStep) return;

    socketRef.current?.emit('interactive:generate:preview', {
      gameId,
      stepId: currentStep.stepId,
      variantId
    });
  };

  return (
    <div className="interactive-game-creator">
      <div className="header">
        <h1>üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä</h1>
        <div className="connection-status">
          {isConnected ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}
        </div>
      </div>

      {!gameId ? (
        <div className="start-section">
          <button 
            className="start-btn"
            onClick={startInteractiveGeneration}
            disabled={!isConnected}
          >
            üöÄ –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
          </button>
        </div>
      ) : (
        <>
          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
          {progress && (
            <div className="progress-section">
              <div className="progress-header">
                <h2>{progress.stepName}</h2>
                <span className="step-counter">
                  –≠—Ç–∞–ø {progress.currentStep} –∏–∑ {progress.totalSteps}
                </span>
              </div>
              
              <div className="progress-bar">
                <div 
                  className="progress-fill" 
                  style={{ width: `${progress.progress}%` }}
                ></div>
              </div>
              
              <p className="progress-description">{progress.stepDescription}</p>
              
              {progress.isWaitingForSelection && (
                <div className="waiting-notice">
                  ‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∞—à –≤—ã–±–æ—Ä –∏–∑ {progress.variantsGenerated} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                </div>
              )}
            </div>
          )}

          {/* –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ */}
          {variants.length > 0 && (
            <div className="variants-section">
              <h3>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:</h3>
              
              <div className="variants-grid">
                {variants.map((variant) => (
                  <div 
                    key={variant.id}
                    className={`variant-card ${selectedVariant === variant.id ? 'selected' : ''}`}
                    onClick={() => setSelectedVariant(variant.id)}
                  >
                    {variant.preview && (
                      <div className="variant-preview">
                        {variant.preview.startsWith('data:image/') ? (
                          <img src={variant.preview} alt="–ü—Ä–µ–≤—å—é" />
                        ) : variant.preview.startsWith('data:audio/') ? (
                          <audio controls src={variant.preview} />
                        ) : (
                          <pre className="text-preview">{variant.preview}</pre>
                        )}
                      </div>
                    )}
                    
                    <div className="variant-content">
                      {currentStep?.type === 'character' && (
                        <>
                          <h4>{variant.content.name}</h4>
                          <p>{variant.content.description}</p>
                          <div className="abilities">
                            {variant.content.abilities?.map((ability: string, idx: number) => (
                              <span key={idx} className="ability-tag">{ability}</span>
                            ))}
                          </div>
                        </>
                      )}
                      
                      {currentStep?.type === 'mechanics' && (
                        <>
                          <h4>–ì–µ–π–º–ø–ª–µ–π</h4>
                          <p>{variant.content.coreLoop}</p>
                          <div className="controls">
                            {variant.content.controls?.map((control: string, idx: number) => (
                              <span key={idx} className="control-tag">{control}</span>
                            ))}
                          </div>
                        </>
                      )}
                      
                      {variant.metadata.isCustom && (
                        <div className="custom-badge">‚ú® –ü–æ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º</div>
                      )}
                    </div>
                    
                    <div className="variant-actions">
                      {!variant.preview && (
                        <button 
                          className="preview-btn"
                          onClick={(e) => {
                            e.stopPropagation();
                            generatePreview(variant.id);
                          }}
                        >
                          üëÅÔ∏è –ü—Ä–µ–≤—å—é
                        </button>
                      )}
                      
                      <button 
                        className="select-btn"
                        onClick={(e) => {
                          e.stopPropagation();
                          selectVariant(variant.id);
                        }}
                      >
                        ‚úÖ –í—ã–±—Ä–∞—Ç—å
                      </button>
                    </div>
                  </div>
                ))}
              </div>
              
              {/* –î–µ–π—Å—Ç–≤–∏—è —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ */}
              <div className="variant-actions-section">
                <button 
                  className="generate-more-btn"
                  onClick={generateMoreVariants}
                  disabled={isGenerating}
                >
                  {isGenerating ? '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : 'üé≤ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ 5'}
                </button>
                
                <button 
                  className="custom-prompt-btn"
                  onClick={() => setShowCustomPrompt(!showCustomPrompt)}
                  disabled={isGenerating}
                >
                  ‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                </button>
              </div>
              
              {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç */}
              {showCustomPrompt && (
                <div className="custom-prompt-section">
                  <textarea
                    placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è... (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–•–æ—á—É –∂–µ–Ω—â–∏–Ω—É-–∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞ —Å –∑–µ–ª–µ–Ω—ã–º –∫–æ—Å—Ç—é–º–æ–º')"
                    value={customPrompt}
                    onChange={(e) => setCustomPrompt(e.target.value)}
                    rows={3}
                  />
                  <div className="custom-prompt-actions">
                    <button 
                      className="generate-custom-btn"
                      onClick={generateCustomVariants}
                      disabled={!customPrompt.trim() || isGenerating}
                    >
                      üéØ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                    </button>
                    <button 
                      className="cancel-btn"
                      onClick={() => {
                        setShowCustomPrompt(false);
                        setCustomPrompt('');
                      }}
                    >
                      ‚ùå –û—Ç–º–µ–Ω–∞
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* –õ–æ–≥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
          <div className="logs-section">
            <h3>üìã –•–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</h3>
            <div className="logs-container">
              {generationLogs.map((log, idx) => (
                <div key={idx} className="log-entry">
                  {log}
                </div>
              ))}
            </div>
          </div>
        </>
      )}
    </div>
  );
}; 
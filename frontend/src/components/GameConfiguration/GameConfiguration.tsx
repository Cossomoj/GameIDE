import React, { useState, useEffect } from 'react';
import {
  Steps,
  Form,
  Card,
  Button,
  Typography,
  Row,
  Col,
  Select,
  Radio,
  Checkbox,
  InputNumber,
  Switch,
  Slider,
  Divider,
  Tag,
  Tooltip,
  Alert,
  Progress,
  Space,
  Badge
} from 'antd';
import {
  GameControllerOutlined,
  EyeOutlined,
  SettingOutlined,
  SoundOutlined,
  TrophyOutlined,
  TeamOutlined,
  DollarOutlined,
  InfoCircleOutlined,
  CheckCircleOutlined,
  RightOutlined
} from '@ant-design/icons';

const { Step } = Steps;
const { Title, Paragraph, Text } = Typography;
const { Option } = Select;

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ backend)
interface GameConfiguration {
  title: string;
  description: string;
  mainGenre: string;
  subGenre?: string;
  gameMode: string;
  progressionType: string;
  visualStyle: {
    graphicStyle: string;
    colorPalette: string;
    artDirection: string;
    quality: string;
  };
  camera: {
    view: string;
    scrollType: string;
    behavior: string;
  };
  controls: {
    devices: string[];
    scheme: string;
    complexity: string;
    customizable: boolean;
  };
  mechanics: {
    core: string[];
    combat?: string[];
    movement: string[];
    physics: string;
    time: string;
  };
  progression: {
    levelSystem: boolean;
    skillTree: string;
    equipment: {
      weapons: boolean;
      armor: boolean;
      accessories: boolean;
      cosmetic: boolean;
    };
    currency: {
      ingame: boolean;
      premium: boolean;
      multiple: boolean;
    };
  };
  content: {
    levels: number;
    duration: string;
    replayability: string;
    proceduralGeneration: {
      levels: boolean;
      enemies: boolean;
      loot: boolean;
    };
    story: {
      hasStory: boolean;
      type: string;
    };
  };
  difficulty: {
    difficultyLevels: string[];
    difficultyCurve: string;
    deathSystem: string;
    playerHelp: {
      hints: boolean;
      tutorial: boolean;
      autoAim: boolean;
      assists: boolean;
    };
  };
  social: {
    multiplayer: string;
    leaderboards: {
      global: boolean;
      friends: boolean;
      weekly: boolean;
    };
    achievements: boolean;
    sharing: {
      screenshots: boolean;
      videos: boolean;
      results: boolean;
    };
  };
  technical: {
    platform: string;
    gameSize: string;
    internetRequirement: string;
    orientation: string;
    frameRate: string;
  };
  monetization: {
    model: string;
    inAppPurchases: {
      cosmetic: boolean;
      boosters: boolean;
      content: boolean;
      payToWin: boolean;
    };
    advertising: {
      banners: boolean;
      video: boolean;
      rewarded: boolean;
      interstitial: boolean;
    };
    energy: boolean;
    battlePass: boolean;
  };
  audio: {
    music: {
      type: string;
      genre: string;
    };
    soundEffects: string;
    voiceOver: string;
    languages: string[];
  };
  additional: {
    ageRating: string;
    interfaceLanguages: string[];
    subtitles: boolean;
    accessibility: boolean;
    modSupport: boolean;
  };
}

interface GameConfigurationProps {
  onConfigurationComplete: (config: GameConfiguration) => void;
  onBack?: () => void;
}

const GameConfiguration: React.FC<GameConfigurationProps> = ({
  onConfigurationComplete,
  onBack
}) => {
  const [form] = Form.useForm();
  const [currentStep, setCurrentStep] = useState(0);
  const [configuration, setConfiguration] = useState<Partial<GameConfiguration>>({});
  const [completedSteps, setCompletedSteps] = useState<boolean[]>(new Array(8).fill(false));

  // –û–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const mainGenres = [
    { value: 'action', label: '–≠–∫—à–µ–Ω', description: '–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è', icon: '‚öîÔ∏è' },
    { value: 'strategy', label: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è', description: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', icon: 'üß©' },
    { value: 'rpg', label: 'RPG', description: '–†–∞–∑–≤–∏—Ç–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞', icon: 'üèπ' },
    { value: 'simulation', label: '–°–∏–º—É–ª—è—Ç–æ—Ä', description: '–ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤', icon: 'üöÅ' },
    { value: 'sports', label: '–°–ø–æ—Ä—Ç', description: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç—è–∑–∞–Ω–∏—è', icon: '‚öΩ' },
    { value: 'racing', label: '–ì–æ–Ω–∫–∏', description: '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å', icon: 'üèéÔ∏è' },
    { value: 'fighting', label: '–§–∞–π—Ç–∏–Ω–≥', description: '–ë–æ–∏ –æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω', icon: 'ü•ä' },
    { value: 'shooter', label: '–®—É—Ç–µ—Ä', description: '–°—Ç—Ä–µ–ª—å–±–∞ –∏ –º–µ—Ç–∫–æ—Å—Ç—å', icon: 'üî´' },
    { value: 'platformer', label: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä', description: '–ü—Ä—ã–∂–∫–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º', icon: 'üèÉ' },
    { value: 'puzzle', label: '–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞', description: '–†–µ—à–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á', icon: 'üß†' },
    { value: 'arcade', label: '–ê—Ä–∫–∞–¥–∞', description: '–ü—Ä–æ—Å—Ç—ã–µ –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –∏–≥—Ä—ã', icon: 'üïπÔ∏è' },
    { value: 'adventure', label: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', description: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è', icon: 'üó∫Ô∏è' },
    { value: 'horror', label: '–•–æ—Ä—Ä–æ—Ä', description: '–°—Ç—Ä–∞—Ö –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', icon: 'üëª' },
    { value: 'survival', label: '–í—ã–∂–∏–≤–∞–Ω–∏–µ', description: '–ë–æ—Ä—å–±–∞ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ', icon: 'üèïÔ∏è' }
  ];

  const subGenres = {
    action: ['runner', 'battle_royale'],
    strategy: ['tower_defense', 'turn_based'],
    rpg: ['roguelike'],
    puzzle: ['clicker'],
    arcade: ['idle'],
    // ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
  };

  const graphicStyles = [
    { value: 'pixel_art_8bit', label: '8-bit –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç', colors: ['#000000', '#FFFFFF', '#FF0000', '#00FF00'] },
    { value: 'pixel_art_16bit', label: '16-bit –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç', colors: ['#2C3E50', '#E74C3C', '#3498DB', '#F1C40F'] },
    { value: 'pixel_art_32bit', label: '32-bit –ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç', colors: ['#34495E', '#E67E22', '#9B59B6', '#1ABC9C'] },
    { value: 'vector', label: '–í–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞', colors: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'] },
    { value: '3d_realistic', label: '3D –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è', colors: ['#8B4513', '#228B22', '#4169E1', '#DC143C'] },
    { value: '3d_low_poly', label: '3D Low-poly', colors: ['#FF69B4', '#00CED1', '#FFD700', '#32CD32'] },
    { value: 'cartoon', label: '–ú—É–ª—å—Ç—è—à–Ω–∞—è', colors: ['#FFA500', '#FF1493', '#00BFFF', '#ADFF2F'] },
    { value: 'minimalist', label: '–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è', colors: ['#F5F5F5', '#2F2F2F', '#007ACC', '#FF6B35'] }
  ];

  const steps = [
    {
      title: '–ñ–∞–Ω—Ä –∏ —Ç–∏–ø',
      icon: <GameControllerOutlined />,
      description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∂–∞–Ω—Ä –∏ —Ç–∏–ø –∏–≥—Ä—ã'
    },
    {
      title: '–í–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å',
      icon: <EyeOutlined />,
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –∏ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É'
    },
    {
      title: '–ö–∞–º–µ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
      icon: <SettingOutlined />,
      description: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É –∏ —Å—Ö–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
    },
    {
      title: '–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏',
      icon: <GameControllerOutlined />,
      description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏–≥—Ä—ã'
    },
    {
      title: '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è',
      icon: <TrophyOutlined />,
      description: '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π'
    },
    {
      title: '–ö–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å',
      icon: <InfoCircleOutlined />,
      description: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏'
    },
    {
      title: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
      icon: <TeamOutlined />,
      description: '–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
    },
    {
      title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
      icon: <SettingOutlined />,
      description: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞, –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è –∏ –∞—É–¥–∏–æ'
    }
  ];

  const handleStepComplete = (stepIndex: number, values: any) => {
    const newConfiguration = { ...configuration, ...values };
    setConfiguration(newConfiguration);
    
    const newCompletedSteps = [...completedSteps];
    newCompletedSteps[stepIndex] = true;
    setCompletedSteps(newCompletedSteps);

    if (stepIndex < steps.length - 1) {
      setCurrentStep(stepIndex + 1);
    } else {
      // –í—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
      onConfigurationComplete(newConfiguration as GameConfiguration);
    }
  };

  const renderGenreStep = () => (
    <Card title="–ñ–∞–Ω—Ä –∏ —Ç–∏–ø –∏–≥—Ä—ã" className="mb-4">
      <Form.Item 
        name="mainGenre" 
        label="–û—Å–Ω–æ–≤–Ω–æ–π –∂–∞–Ω—Ä"
        rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∂–∞–Ω—Ä' }]}
      >
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
          {mainGenres.map(genre => (
            <Card
              key={genre.value}
              size="small"
              hoverable
              className="text-center cursor-pointer border-2 hover:border-blue-400"
              onClick={() => form.setFieldsValue({ mainGenre: genre.value })}
            >
              <div className="text-2xl mb-2">{genre.icon}</div>
              <div className="font-medium">{genre.label}</div>
              <div className="text-xs text-gray-500 mt-1">{genre.description}</div>
            </Card>
          ))}
        </div>
      </Form.Item>

      <Form.Item 
        name="gameMode" 
        label="–†–µ–∂–∏–º –∏–≥—Ä—ã"
        rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã' }]}
      >
        <Radio.Group className="w-full">
          <Radio.Button value="single_player" className="w-1/4 text-center">–û–¥–∏–Ω–æ—á–Ω–∞—è</Radio.Button>
          <Radio.Button value="cooperative" className="w-1/4 text-center">–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤</Radio.Button>
          <Radio.Button value="pvp" className="w-1/4 text-center">PvP</Radio.Button>
          <Radio.Button value="mmo" className="w-1/4 text-center">MMO</Radio.Button>
        </Radio.Group>
      </Form.Item>

      <Form.Item 
        name="progressionType" 
        label="–¢–∏–ø –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"
        rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è' }]}
      >
        <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è">
          <Option value="linear">–õ–∏–Ω–µ–π–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ</Option>
          <Option value="open_world">–û—Ç–∫—Ä—ã—Ç—ã–π –º–∏—Ä</Option>
          <Option value="levels">–£—Ä–æ–≤–Ω–∏</Option>
          <Option value="endless">–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ</Option>
        </Select>
      </Form.Item>
    </Card>
  );

  const renderVisualStep = () => (
    <Card title="–í–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å" className="mb-4">
      <Form.Item 
        name={['visualStyle', 'graphicStyle']} 
        label="–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å"
        rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å' }]}
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {graphicStyles.map(style => (
            <Card
              key={style.value}
              size="small"
              hoverable
              className="cursor-pointer border-2 hover:border-blue-400"
              onClick={() => form.setFieldsValue({ 
                visualStyle: { 
                  ...form.getFieldValue('visualStyle'),
                  graphicStyle: style.value 
                } 
              })}
            >
              <div className="flex items-center justify-between">
                <span className="font-medium">{style.label}</span>
                <div className="flex space-x-1">
                  {style.colors.map((color, index) => (
                    <div
                      key={index}
                      className="w-4 h-4 rounded border"
                      style={{ backgroundColor: color }}
                    />
                  ))}
                </div>
              </div>
            </Card>
          ))}
        </div>
      </Form.Item>

      <Row gutter={16}>
        <Col span={8}>
          <Form.Item 
            name={['visualStyle', 'colorPalette']} 
            label="–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ª–∏—Ç—Ä—É' }]}
          >
            <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ª–∏—Ç—Ä—É">
              <Option value="bright">–Ø—Ä–∫–∞—è</Option>
              <Option value="dark">–¢–µ–º–Ω–∞—è</Option>
              <Option value="monochrome">–ú–æ–Ω–æ—Ö—Ä–æ–º–Ω–∞—è</Option>
              <Option value="pastel">–ü–∞—Å—Ç–µ–ª—å–Ω–∞—è</Option>
              <Option value="contrast">–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è</Option>
              <Option value="neon">–ù–µ–æ–Ω–æ–≤–∞—è</Option>
            </Select>
          </Form.Item>
        </Col>
        <Col span={8}>
          <Form.Item 
            name={['visualStyle', 'artDirection']} 
            label="–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' }]}
          >
            <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ">
              <Option value="fantasy">–§—ç–Ω—Ç–µ–∑–∏</Option>
              <Option value="cyberpunk">–ö–∏–±–µ—Ä–ø–∞–Ω–∫</Option>
              <Option value="steampunk">–°—Ç–∏–º–ø–∞–Ω–∫</Option>
              <Option value="realism">–†–µ–∞–ª–∏–∑–º</Option>
              <Option value="anime">–ê–Ω–∏–º–µ/–ú–∞–Ω–≥–∞</Option>
              <Option value="abstract">–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è</Option>
            </Select>
          </Form.Item>
        </Col>
        <Col span={8}>
          <Form.Item 
            name={['visualStyle', 'quality']} 
            label="–ö–∞—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–∏"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ' }]}
          >
            <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ">
              <Option value="retro">–†–µ—Ç—Ä–æ</Option>
              <Option value="hd">HD</Option>
              <Option value="full_hd">Full HD</Option>
              <Option value="4k">4K</Option>
            </Select>
          </Form.Item>
        </Col>
      </Row>
    </Card>
  );

  const renderCameraControlsStep = () => (
    <Space direction="vertical" className="w-full">
      <Card title="–ö–∞–º–µ—Ä–∞ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞" size="small">
        <Row gutter={16}>
          <Col span={8}>
            <Form.Item 
              name={['camera', 'view']} 
              label="–í–∏–¥ –∫–∞–º–µ—Ä—ã"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∫–∞–º–µ—Ä—ã' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥">
                <Option value="side_view">–°–±–æ–∫—É (Side-view)</Option>
                <Option value="top_down">–°–≤–µ—Ä—Ö—É (Top-down)</Option>
                <Option value="isometric">–ò–∑–æ–º–µ—Ç—Ä–∏—è</Option>
                <Option value="first_person">–û—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞</Option>
                <Option value="third_person">–û—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞</Option>
                <Option value="2_5d">2.5D</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item 
              name={['camera', 'scrollType']} 
              label="–¢–∏–ø –ø—Ä–æ–∫—Ä—É—Ç–∫–∏"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Ä—É—Ç–∫–∏' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø">
                <Option value="horizontal">–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è</Option>
                <Option value="vertical">–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è</Option>
                <Option value="multidirectional">–ú–Ω–æ–≥–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è</Option>
                <Option value="static_screen">–°—Ç–∞—Ç–∏—á–Ω—ã–π —ç–∫—Ä–∞–Ω</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item 
              name={['camera', 'behavior']} 
              label="–ü–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ">
                <Option value="following">–°–ª–µ–¥—è—â–∞—è</Option>
                <Option value="dynamic">–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è</Option>
                <Option value="cinematic">–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–∞—è</Option>
                <Option value="manual_control">–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>
      </Card>

      <Card title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" size="small">
        <Row gutter={16}>
          <Col span={12}>
            <Form.Item 
              name={['controls', 'devices']} 
              label="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' }]}
            >
              <Checkbox.Group className="w-full">
                <Row>
                  <Col span={12}><Checkbox value="keyboard">–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞</Checkbox></Col>
                  <Col span={12}><Checkbox value="mouse">–ú—ã—à—å</Checkbox></Col>
                  <Col span={12}><Checkbox value="touchscreen">–¢–∞—á—Å–∫—Ä–∏–Ω</Checkbox></Col>
                  <Col span={12}><Checkbox value="gamepad">–ì–µ–π–º–ø–∞–¥</Checkbox></Col>
                </Row>
              </Checkbox.Group>
            </Form.Item>
          </Col>
          <Col span={6}>
            <Form.Item 
              name={['controls', 'complexity']} 
              label="–°–ª–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å' }]}
            >
              <Radio.Group>
                <Radio.Button value="simple">–ü—Ä–æ—Å—Ç–æ–µ</Radio.Button>
                <Radio.Button value="medium">–°—Ä–µ–¥–Ω–µ–µ</Radio.Button>
                <Radio.Button value="complex">–°–ª–æ–∂–Ω–æ–µ</Radio.Button>
              </Radio.Group>
            </Form.Item>
          </Col>
          <Col span={6}>
            <Form.Item 
              name={['controls', 'customizable']} 
              label="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
              valuePropName="checked"
            >
              <Switch checkedChildren="–ï—Å—Ç—å" unCheckedChildren="–ù–µ—Ç" />
            </Form.Item>
          </Col>
        </Row>
      </Card>
    </Space>
  );

  const renderMechanicsStep = () => (
    <Space direction="vertical" className="w-full">
      <Card title="–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏" size="small">
        <Form.Item 
          name={['mechanics', 'core']} 
          label="–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏"
          rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏' }]}
        >
          <Checkbox.Group className="w-full">
            <Row gutter={[16, 8]}>
              <Col span={8}><Checkbox value="jumping">–ü—Ä—ã–∂–∫–∏</Checkbox></Col>
              <Col span={8}><Checkbox value="shooting">–°—Ç—Ä–µ–ª—å–±–∞</Checkbox></Col>
              <Col span={8}><Checkbox value="building">–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ</Checkbox></Col>
              <Col span={8}><Checkbox value="resource_gathering">–°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤</Checkbox></Col>
              <Col span={8}><Checkbox value="crafting">–ö—Ä–∞—Ñ—Ç–∏–Ω–≥</Checkbox></Col>
              <Col span={8}><Checkbox value="exploration">–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</Checkbox></Col>
              <Col span={8}><Checkbox value="puzzle_solving">–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏</Checkbox></Col>
              <Col span={8}><Checkbox value="stealth">–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å</Checkbox></Col>
            </Row>
          </Checkbox.Group>
        </Form.Item>

        <Row gutter={16}>
          <Col span={8}>
            <Form.Item 
              name={['mechanics', 'physics']} 
              label="–§–∏–∑–∏–∫–∞"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–∑–∏–∫–∏' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–∑–∏–∫—É">
                <Option value="realistic">–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è</Option>
                <Option value="arcade">–ê—Ä–∫–∞–¥–Ω–∞—è</Option>
                <Option value="ragdoll">–†—ç–≥–¥–æ–ª–ª</Option>
                <Option value="destructible">–†–∞–∑—Ä—É—à–∞–µ–º–æ—Å—Ç—å</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item 
              name={['mechanics', 'time']} 
              label="–í—Ä–µ–º—è"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Ä–µ–º–µ–Ω–∏' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è">
                <Option value="real_time">–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è</Option>
                <Option value="turn_based">–ü–æ—à–∞–≥–æ–≤–æ–µ</Option>
                <Option value="pause">–° –ø–∞—É–∑–æ–π</Option>
                <Option value="bullet_time">Bullet-time</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item 
              name={['mechanics', 'movement']} 
              label="–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∏–∂–µ–Ω–∏–µ' }]}
            >
              <Select mode="multiple" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è">
                <Option value="running">–ë–µ–≥</Option>
                <Option value="jumping">–ü—Ä—ã–∂–∫–∏</Option>
                <Option value="double_jump">–î–≤–æ–π–Ω–æ–π –ø—Ä—ã–∂–æ–∫</Option>
                <Option value="dash">–î—ç—à</Option>
                <Option value="flying">–ü–æ–ª–µ—Ç</Option>
                <Option value="climbing">–õ–∞–∑–∞–Ω–∏–µ</Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>
      </Card>
    </Space>
  );

  const renderProgressionStep = () => (
    <Space direction="vertical" className="w-full">
      <Card title="–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏" size="small">
        <Row gutter={16}>
          <Col span={12}>
            <Form.Item 
              name={['progression', 'levelSystem']} 
              label="–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
              valuePropName="checked"
            >
              <Switch checkedChildren="–ï—Å—Ç—å" unCheckedChildren="–ù–µ—Ç" />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item 
              name={['progression', 'skillTree']} 
              label="–ü—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫–∞—á–∫–∏' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø">
                <Option value="none">–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</Option>
                <Option value="linear">–õ–∏–Ω–µ–π–Ω–∞—è</Option>
                <Option value="branching">–í–µ—Ç–≤–∏—Å—Ç–∞—è</Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>
        
        <Row gutter={16}>
          <Col span={12}>
            <Form.Item label="–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞">
              <Form.Item name={['progression', 'equipment', 'weapons']} valuePropName="checked" noStyle>
                <Checkbox>–û—Ä—É–∂–∏–µ</Checkbox>
              </Form.Item>
              <Form.Item name={['progression', 'equipment', 'armor']} valuePropName="checked" noStyle>
                <Checkbox>–ë—Ä–æ–Ω—è</Checkbox>
              </Form.Item>
              <Form.Item name={['progression', 'equipment', 'accessories']} valuePropName="checked" noStyle>
                <Checkbox>–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</Checkbox>
              </Form.Item>
              <Form.Item name={['progression', 'equipment', 'cosmetic']} valuePropName="checked" noStyle>
                <Checkbox>–ö–æ—Å–º–µ—Ç–∏–∫–∞</Checkbox>
              </Form.Item>
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item label="–í–∞–ª—é—Ç–∞">
              <Form.Item name={['progression', 'currency', 'ingame']} valuePropName="checked" noStyle>
                <Checkbox>–í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–∞—è</Checkbox>
              </Form.Item>
              <Form.Item name={['progression', 'currency', 'premium']} valuePropName="checked" noStyle>
                <Checkbox>–ü—Ä–µ–º–∏—É–º</Checkbox>
              </Form.Item>
              <Form.Item name={['progression', 'currency', 'multiple']} valuePropName="checked" noStyle>
                <Checkbox>–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤</Checkbox>
              </Form.Item>
            </Form.Item>
          </Col>
        </Row>
      </Card>
    </Space>
  );

  const renderContentStep = () => (
    <Space direction="vertical" className="w-full">
      <Card title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞" size="small">
        <Row gutter={16}>
          <Col span={8}>
            <Form.Item 
              name={['content', 'levels']} 
              label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π"
              rules={[{ required: true, message: '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' }]}
            >
              <InputNumber min={1} max={100} placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π" />
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item 
              name={['content', 'duration']} 
              label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å">
                <Option value="short">–ö–æ—Ä–æ—Ç–∫–∞—è (&lt;1—á)</Option>
                <Option value="medium">–°—Ä–µ–¥–Ω—è—è (1-5—á)</Option>
                <Option value="long">–î–ª–∏–Ω–Ω–∞—è (&gt;5—á)</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item 
              name={['content', 'replayability']} 
              label="–†–µ–∏–≥—Ä–∞–±–µ–ª—å–Ω–æ—Å—Ç—å"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å">
                <Option value="low">–ù–∏–∑–∫–∞—è</Option>
                <Option value="medium">–°—Ä–µ–¥–Ω—è—è</Option>
                <Option value="high">–í—ã—Å–æ–∫–∞—è</Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col span={12}>
            <Form.Item label="–ü—Ä–æ—Ü–µ–¥—É—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è">
              <Form.Item name={['content', 'proceduralGeneration', 'levels']} valuePropName="checked" noStyle>
                <Checkbox>–£—Ä–æ–≤–Ω–∏</Checkbox>
              </Form.Item>
              <Form.Item name={['content', 'proceduralGeneration', 'enemies']} valuePropName="checked" noStyle>
                <Checkbox>–í—Ä–∞–≥–∏</Checkbox>
              </Form.Item>
              <Form.Item name={['content', 'proceduralGeneration', 'loot']} valuePropName="checked" noStyle>
                <Checkbox>–õ—É—Ç</Checkbox>
              </Form.Item>
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item 
              name={['content', 'story', 'hasStory']} 
              label="–°—é–∂–µ—Ç"
              valuePropName="checked"
            >
              <Switch checkedChildren="–ï—Å—Ç—å" unCheckedChildren="–ù–µ—Ç" />
            </Form.Item>
            <Form.Item 
              name={['content', 'story', 'type']} 
              label="–¢–∏–ø —Å—é–∂–µ—Ç–∞"
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø">
                <Option value="linear">–õ–∏–Ω–µ–π–Ω—ã–π</Option>
                <Option value="branching">–í–µ—Ç–≤—è—â–∏–π—Å—è</Option>
                <Option value="multiple_endings">–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ü–æ–≤–∫–∏</Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>
      </Card>

      <Card title="–°–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –±–∞–ª–∞–Ω—Å" size="small">
        <Row gutter={16}>
          <Col span={12}>
            <Form.Item 
              name={['difficulty', 'difficultyLevels']} 
              label="–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–Ω–∏' }]}
            >
              <Checkbox.Group>
                <Row>
                  <Col span={12}><Checkbox value="easy">–õ–µ–≥–∫–∏–π</Checkbox></Col>
                  <Col span={12}><Checkbox value="normal">–ù–æ—Ä–º–∞–ª—å–Ω—ã–π</Checkbox></Col>
                  <Col span={12}><Checkbox value="hard">–°–ª–æ–∂–Ω—ã–π</Checkbox></Col>
                  <Col span={12}><Checkbox value="nightmare">–ö–æ—à–º–∞—Ä</Checkbox></Col>
                </Row>
              </Checkbox.Group>
            </Form.Item>
          </Col>
          <Col span={6}>
            <Form.Item 
              name={['difficulty', 'difficultyCurve']} 
              label="–ö—Ä–∏–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–≤—É—é' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–≤—É—é">
                <Option value="smooth">–ü–ª–∞–≤–Ω–∞—è</Option>
                <Option value="steep">–†–µ–∑–∫–∞—è</Option>
                <Option value="adaptive">–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={6}>
            <Form.Item 
              name={['difficulty', 'deathSystem']} 
              label="–°–∏—Å—Ç–µ–º–∞ —Å–º–µ—Ä—Ç–∏"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É">
                <Option value="permanent">–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∞—è</Option>
                <Option value="checkpoints">–ß–µ–∫–ø–æ–∏–Ω—Ç—ã</Option>
                <Option value="respawn">–†–µ—Å–ø–∞–≤–Ω</Option>
                <Option value="lives">–ñ–∏–∑–Ω–∏</Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>

        <Form.Item label="–ü–æ–º–æ—â—å –∏–≥—Ä–æ–∫—É">
          <Form.Item name={['difficulty', 'playerHelp', 'hints']} valuePropName="checked" noStyle>
            <Checkbox>–ü–æ–¥—Å–∫–∞–∑–∫–∏</Checkbox>
          </Form.Item>
          <Form.Item name={['difficulty', 'playerHelp', 'tutorial']} valuePropName="checked" noStyle>
            <Checkbox>–¢—É—Ç–æ—Ä–∏–∞–ª</Checkbox>
          </Form.Item>
          <Form.Item name={['difficulty', 'playerHelp', 'autoAim']} valuePropName="checked" noStyle>
            <Checkbox>–ê–≤—Ç–æ-–ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ</Checkbox>
          </Form.Item>
          <Form.Item name={['difficulty', 'playerHelp', 'assists']} valuePropName="checked" noStyle>
            <Checkbox>–ê—Å—Å–∏—Å—Ç—ã</Checkbox>
          </Form.Item>
        </Form.Item>
      </Card>
    </Space>
  );

  const renderSocialStep = () => (
    <Space direction="vertical" className="w-full">
      <Card title="–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏" size="small">
        <Row gutter={16}>
          <Col span={8}>
            <Form.Item 
              name={['social', 'multiplayer']} 
              label="–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø">
                <Option value="none">–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</Option>
                <Option value="local">–õ–æ–∫–∞–ª—å–Ω—ã–π</Option>
                <Option value="online">–û–Ω–ª–∞–π–Ω</Option>
                <Option value="async">–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item 
              name={['social', 'achievements']} 
              label="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
              valuePropName="checked"
            >
              <Switch checkedChildren="–ï—Å—Ç—å" unCheckedChildren="–ù–µ—Ç" />
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item label="–¢–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤">
              <Form.Item name={['social', 'leaderboards', 'global']} valuePropName="checked" noStyle>
                <Checkbox>–ì–ª–æ–±–∞–ª—å–Ω–∞—è</Checkbox>
              </Form.Item>
              <Form.Item name={['social', 'leaderboards', 'friends']} valuePropName="checked" noStyle>
                <Checkbox>–°—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π</Checkbox>
              </Form.Item>
              <Form.Item name={['social', 'leaderboards', 'weekly']} valuePropName="checked" noStyle>
                <Checkbox>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è</Checkbox>
              </Form.Item>
            </Form.Item>
          </Col>
        </Row>

        <Form.Item label="–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —à–∞—Ä–∏–Ω–≥–∞">
          <Form.Item name={['social', 'sharing', 'screenshots']} valuePropName="checked" noStyle>
            <Checkbox>–°–∫—Ä–∏–Ω—à–æ—Ç—ã</Checkbox>
          </Form.Item>
          <Form.Item name={['social', 'sharing', 'videos']} valuePropName="checked" noStyle>
            <Checkbox>–í–∏–¥–µ–æ</Checkbox>
          </Form.Item>
          <Form.Item name={['social', 'sharing', 'results']} valuePropName="checked" noStyle>
            <Checkbox>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</Checkbox>
          </Form.Item>
        </Form.Item>
      </Card>
    </Space>
  );

  const renderTechnicalStep = () => (
    <Space direction="vertical" className="w-full">
      <Card title="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" size="small">
        <Row gutter={16}>
          <Col span={6}>
            <Form.Item 
              name={['technical', 'platform']} 
              label="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É">
                <Option value="browser">–ë—Ä–∞—É–∑–µ—Ä</Option>
                <Option value="ios">iOS</Option>
                <Option value="android">Android</Option>
                <Option value="crossplatform">–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={6}>
            <Form.Item 
              name={['technical', 'gameSize']} 
              label="–†–∞–∑–º–µ—Ä –∏–≥—Ä—ã (–ú–ë)"
              rules={[{ required: true, message: '–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä' }]}
            >
              <InputNumber min={1} max={1000} placeholder="–†–∞–∑–º–µ—Ä –≤ –ú–ë" />
            </Form.Item>
          </Col>
          <Col span={6}>
            <Form.Item 
              name={['technical', 'orientation']} 
              label="–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é">
                <Option value="portrait">–ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è</Option>
                <Option value="landscape">–ê–ª—å–±–æ–º–Ω–∞—è</Option>
                <Option value="both">–û–±–µ</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={6}>
            <Form.Item 
              name={['technical', 'frameRate']} 
              label="FPS"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ FPS' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ FPS">
                <Option value="30fps">30 FPS</Option>
                <Option value="60fps">60 FPS</Option>
                <Option value="120fps">120 FPS</Option>
                <Option value="variable">–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–π</Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>
      </Card>

      <Card title="–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è" size="small">
        <Row gutter={16}>
          <Col span={8}>
            <Form.Item 
              name={['monetization', 'model']} 
              label="–ú–æ–¥–µ–ª—å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å">
                <Option value="free">–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è</Option>
                <Option value="paid">–ü–ª–∞—Ç–Ω–∞—è</Option>
                <Option value="freemium">Freemium</Option>
                <Option value="subscription">–ü–æ–¥–ø–∏—Å–∫–∞</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item label="–í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏">
              <Form.Item name={['monetization', 'inAppPurchases', 'cosmetic']} valuePropName="checked" noStyle>
                <Checkbox>–ö–æ—Å–º–µ—Ç–∏–∫–∞</Checkbox>
              </Form.Item>
              <Form.Item name={['monetization', 'inAppPurchases', 'boosters']} valuePropName="checked" noStyle>
                <Checkbox>–£—Å–∫–æ—Ä–∏—Ç–µ–ª–∏</Checkbox>
              </Form.Item>
              <Form.Item name={['monetization', 'inAppPurchases', 'content']} valuePropName="checked" noStyle>
                <Checkbox>–ö–æ–Ω—Ç–µ–Ω—Ç</Checkbox>
              </Form.Item>
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item label="–†–µ–∫–ª–∞–º–∞">
              <Form.Item name={['monetization', 'advertising', 'banners']} valuePropName="checked" noStyle>
                <Checkbox>–ë–∞–Ω–Ω–µ—Ä—ã</Checkbox>
              </Form.Item>
              <Form.Item name={['monetization', 'advertising', 'video']} valuePropName="checked" noStyle>
                <Checkbox>–í–∏–¥–µ–æ</Checkbox>
              </Form.Item>
              <Form.Item name={['monetization', 'advertising', 'rewarded']} valuePropName="checked" noStyle>
                <Checkbox>–ù–∞–≥—Ä–∞–∂–¥–∞–µ–º–∞—è</Checkbox>
              </Form.Item>
            </Form.Item>
          </Col>
        </Row>
      </Card>

      <Card title="–ê—É–¥–∏–æ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" size="small">
        <Row gutter={16}>
          <Col span={8}>
            <Form.Item 
              name={['audio', 'music', 'type']} 
              label="–¢–∏–ø –º—É–∑—ã–∫–∏"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø">
                <Option value="original">–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è</Option>
                <Option value="licensed">–õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item 
              name={['audio', 'soundEffects']} 
              label="–ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø">
                <Option value="realistic">–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ</Option>
                <Option value="arcade">–ê—Ä–∫–∞–¥–Ω—ã–µ</Option>
                <Option value="minimalist">–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ</Option>
              </Select>
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item 
              name={['additional', 'ageRating']} 
              label="–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥' }]}
            >
              <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥">
                <Option value="0+">0+</Option>
                <Option value="6+">6+</Option>
                <Option value="12+">12+</Option>
                <Option value="16+">16+</Option>
                <Option value="18+">18+</Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>
      </Card>
    </Space>
  );

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 0: return renderGenreStep();
      case 1: return renderVisualStep();
      case 2: return renderCameraControlsStep();
      case 3: return renderMechanicsStep();
      case 4: return renderProgressionStep();
      case 5: return renderContentStep();
      case 6: return renderSocialStep();
      case 7: return renderTechnicalStep();
      default: return null;
    }
  };

  const handleNext = async () => {
    try {
      const values = await form.validateFields();
      handleStepComplete(currentStep, values);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    } else if (onBack) {
      onBack();
    }
  };

  const progressPercent = Math.round(((completedSteps.filter(Boolean).length) / steps.length) * 100);

  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å */}
      <div className="text-center mb-8">
        <Title level={2}>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã</Title>
        <Paragraph className="text-lg text-gray-600">
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–π –±—É–¥—É—â–µ–π –∏–≥—Ä—ã
        </Paragraph>
        
        <div className="flex items-center justify-center space-x-4 mt-4">
          <Progress
            percent={progressPercent}
            showInfo={false}
            strokeColor="#1890ff"
            className="w-64"
          />
          <span className="text-sm text-gray-600">
            {completedSteps.filter(Boolean).length} –∏–∑ {steps.length} —Å–µ–∫—Ü–∏–π
          </span>
        </div>
      </div>

      {/* –®–∞–≥–∏ */}
      <div className="mb-8">
        <Steps 
          current={currentStep} 
          size="small"
          className="mb-6"
        >
          {steps.map((step, index) => (
            <Step
              key={index}
              title={step.title}
              description={step.description}
              icon={completedSteps[index] ? <CheckCircleOutlined /> : step.icon}
              status={
                completedSteps[index] ? 'finish' :
                index === currentStep ? 'process' : 'wait'
              }
            />
          ))}
        </Steps>
      </div>

      {/* –§–æ—Ä–º–∞ */}
      <Form
        form={form}
        layout="vertical"
        initialValues={configuration}
        className="mb-8"
      >
        {renderCurrentStep()}
      </Form>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="flex justify-between items-center">
        <Button onClick={handlePrevious}>
          {currentStep === 0 ? '–ù–∞–∑–∞–¥' : '–ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥'}
        </Button>
        
        <div className="text-center">
          <Text type="secondary">
            –®–∞–≥ {currentStep + 1} –∏–∑ {steps.length}
          </Text>
        </div>
        
        <Button 
          type="primary" 
          onClick={handleNext}
          icon={currentStep === steps.length - 1 ? <CheckCircleOutlined /> : <RightOutlined />}
        >
          {currentStep === steps.length - 1 ? '–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é' : '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥'}
        </Button>
      </div>
    </div>
  );
};

export default GameConfiguration; 
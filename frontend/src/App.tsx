// import { Routes, Route } from 'react-router-dom'
// import Layout from '@/components/Layout'
// import HomePage from '@/pages/HomePage'
// import GamesPage from '@/pages/GamesPage'
// import GameDetailsPage from '@/pages/GameDetailsPage'
// import StatsPage from '@/pages/StatsPage'
// import NotFoundPage from '@/pages/NotFoundPage'
// import InteractiveGeneration from './pages/InteractiveGeneration'
// import GameConfigurationPage from './pages/GameConfigurationPage'

import { useState, useEffect } from 'react'

function App() {
  console.log('üéÆ App component rendering!')
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
  const [apiStatus, setApiStatus] = useState({
    backend: 'checking', // 'online', 'offline', 'checking'
    frontend: 'online',
    database: 'checking'
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
  const [aiStatus, setAiStatus] = useState({
    deepseek: {
      status: 'checking',
      configured: false,
      model: '',
      available: false
    },
    openai: {
      status: 'checking', 
      configured: false,
      model: '',
      available: false
    },
    claude: {
      status: 'checking',
      configured: false,
      model: '',
      available: false
    }
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á AI (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
  const [aiTaskTypes, setAiTaskTypes] = useState(() => {
    try {
      const saved = localStorage.getItem('gameide-ai-task-types')
      const parsed = saved ? JSON.parse(saved) : null
      
      // –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å—Ç—Ä–æ–∫–∏), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤—ã
      if (parsed && typeof parsed.deepseek === 'string') {
        return {
          deepseek: [parsed.deepseek],
          openai: [parsed.openai],
          claude: ['code'] // –¥–æ–±–∞–≤–ª—è–µ–º Claude —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
      }
      
      return parsed || {
        deepseek: ['code'], // –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
        openai: ['images'],  // –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
        claude: ['code'] // –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è Claude
      }
    } catch {
      return {
        deepseek: ['code'],
        openai: ['images'],
        claude: ['code']
      }
    }
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const [settingsModal, setSettingsModal] = useState({
    isOpen: false,
    provider: '', // 'deepseek' –∏–ª–∏ 'openai'
    apiKey: '',
    model: ''
  })

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ backend API
  const checkBackendStatus = async () => {
    try {
      const response = await fetch('http://localhost:3000/api/health', {
        method: 'GET',
        signal: AbortSignal.timeout(5000) // —Ç–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
      })
      
      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ Backend API –¥–æ—Å—Ç—É–ø–µ–Ω:', data)
        return 'online'
      } else {
        console.warn('‚ö†Ô∏è Backend API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response.status)
        return 'offline'
      }
    } catch (error) {
      console.warn('‚ùå Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error)
      return 'offline'
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤
  const checkAiStatus = async () => {
    try {
      const response = await fetch('http://localhost:3000/api/ai/status', {
        method: 'GET',
        signal: AbortSignal.timeout(5000)
      })
      
      if (response.ok) {
        const data = await response.json()
        console.log('ü§ñ AI —Å–µ—Ä–≤–∏—Å—ã:', data.services)
        
        setAiStatus({
          deepseek: {
            status: data.services.deepseek.status,
            configured: data.services.deepseek.configured,
            model: data.services.deepseek.model,
            available: data.services.deepseek.available
          },
          openai: {
            status: data.services.openai.status,
            configured: data.services.openai.configured,
            model: data.services.openai.model,
            available: data.services.openai.available
          },
          claude: {
            status: data.services.claude.status,
            configured: data.services.claude.configured,
            model: data.services.claude.model,
            available: data.services.claude.available
          }
        })
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI —Å–µ—Ä–≤–∏—Å–æ–≤')
        setAiStatus(prev => ({
          deepseek: { ...prev.deepseek, status: 'offline' },
          openai: { ...prev.openai, status: 'offline' },
          claude: { ...prev.claude, status: 'offline' }
        }))
      }
    } catch (error) {
      console.warn('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤:', error)
      setAiStatus(prev => ({
        deepseek: { ...prev.deepseek, status: 'offline' },
        openai: { ...prev.openai, status: 'offline' },
        claude: { ...prev.claude, status: 'offline' }
      }))
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  const checkAllServices = async () => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...')
    
    const backendStatus = await checkBackendStatus()
    
    setApiStatus(prev => ({
      ...prev,
      backend: backendStatus,
      database: backendStatus === 'online' ? 'online' : 'checking'
    }))

    // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º AI —Å–µ—Ä–≤–∏—Å—ã
    await checkAiStatus()
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    checkAllServices()
    
    const interval = setInterval(checkAllServices, 10000) // –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    
    return () => clearInterval(interval)
  }, [])

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –≤ localStorage
  useEffect(() => {
    try {
      localStorage.setItem('gameide-ai-task-types', JSON.stringify(aiTaskTypes))
      console.log('üíæ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á AI —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', aiTaskTypes)
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á:', error)
    }
  }, [aiTaskTypes])

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const openSettingsModal = async (provider) => {
    try {
      console.log('üîß –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è:', provider)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å backend
      const response = await fetch('http://localhost:3000/api/ai/settings', {
        method: 'GET',
        signal: AbortSignal.timeout(5000)
      })
      
      if (response.ok) {
        const data = await response.json()
        const settings = data.settings[provider]
        
        setSettingsModal({
          isOpen: true,
          provider: provider,
          apiKey: settings.apiKey || '',
          model: settings.model || (
            provider === 'deepseek' ? 'deepseek-coder' : 
            provider === 'openai' ? 'dall-e-3' : 
            'claude-sonnet-4-20250514'
          )
        })
        
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', { provider, hasKey: !!settings.apiKey, model: settings.model })
      } else {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
        const currentSettings = aiStatus[provider]
        setSettingsModal({
          isOpen: true,
          provider: provider,
          apiKey: '',
          model: currentSettings.model || (
            provider === 'deepseek' ? 'deepseek-coder' : 
            provider === 'openai' ? 'dall-e-3' : 
            'claude-sonnet-4-20250514'
          )
        })
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error)
      const currentSettings = aiStatus[provider]
      setSettingsModal({
        isOpen: true,
        provider: provider,
        apiKey: '',
        model: currentSettings.model || (
          provider === 'deepseek' ? 'deepseek-coder' : 
          provider === 'openai' ? 'dall-e-3' : 
          'claude-sonnet-4-20250514'
        )
      })
    }
  }

  const closeSettingsModal = () => {
    setSettingsModal({
      isOpen: false,
      provider: '',
      apiKey: '',
      model: ''
    })
  }

  const saveAiSettings = async () => {
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI:', settingsModal.provider)
      
      const response = await fetch('http://localhost:3000/api/ai/settings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          provider: settingsModal.provider,
          apiKey: settingsModal.apiKey,
          model: settingsModal.model
        })
      })

      if (response.ok) {
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
        closeSettingsModal()
        // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å AI –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        setTimeout(checkAiStatus, 1000)
      } else {
        const errorData = await response.json()
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI:', errorData)
        
        if (errorData.validModels) {
          alert(`‚ùå ${errorData.error}\n\nüí° ${errorData.suggestion}`)
        } else {
          alert(`‚ùå –û—à–∏–±–∫–∞: ${errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI:', error)
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∏ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusDisplay = (status) => {
    switch (status) {
      case 'online':
        return { icon: '‚úÖ', text: '–†–∞–±–æ—Ç–∞–µ—Ç', color: '#10b981' }
      case 'offline':
        return { icon: '‚ùå', text: '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω', color: '#ef4444' }
      case 'checking':
        return { icon: 'üîÑ', text: '–ü—Ä–æ–≤–µ—Ä–∫–∞...', color: '#f59e0b' }
      default:
        return { icon: '‚ùì', text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', color: '#6b7280' }
    }
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á AI
  const getTaskTypeIcon = (taskType) => {
    switch (taskType) {
      case 'code': return 'üíª'
      case 'text': return 'üìù'
      case 'logic': return 'üß†'
      case 'images': return 'üé®'
      case 'sprites': return 'üñºÔ∏è'
      case 'audio': return 'üîä'
      case 'architecture': return 'üèóÔ∏è'
      case 'analysis': return 'üîç'
      case 'optimization': return '‚ö°'
      default: return '‚ùì'
    }
  }

  const getTaskTypeName = (taskType) => {
    switch (taskType) {
      case 'code': return '–ö–æ–¥'
      case 'text': return '–¢–µ–∫—Å—Ç'
      case 'logic': return '–õ–æ–≥–∏–∫–∞'
      case 'images': return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      case 'sprites': return '–°–ø—Ä–∞–π—Ç—ã'
      case 'audio': return '–ó–≤—É–∫–∏'
      case 'architecture': return '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'
      case 'analysis': return '–ê–Ω–∞–ª–∏–∑'
      case 'optimization': return '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
  const handleTaskTypeChange = (provider, taskType, checked) => {
    setAiTaskTypes(prev => {
      const currentTypes = prev[provider] || []
      if (checked) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        return {
          ...prev,
          [provider]: currentTypes.includes(taskType) 
            ? currentTypes 
            : [...currentTypes, taskType]
        }
      } else {
        // –£–±–∏—Ä–∞–µ–º —Ç–∏–ø
        return {
          ...prev,
          [provider]: currentTypes.filter(type => type !== taskType)
        }
      }
    })
  }

  const backendDisplay = getStatusDisplay(apiStatus.backend)
  const frontendDisplay = getStatusDisplay(apiStatus.frontend)
  const databaseDisplay = getStatusDisplay(apiStatus.database)
  
  return (
    <div style={{
      minHeight: '100vh',
      backgroundColor: '#f8fafc',
      fontFamily: 'system-ui, -apple-system, sans-serif'
    }}>
      {/* Header */}
      <header style={{
        backgroundColor: 'white',
        borderBottom: '1px solid #e2e8f0',
        padding: '1rem 0'
      }}>
        <div style={{
          maxWidth: '1200px',
          margin: '0 auto',
          padding: '0 1rem',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between'
        }}>
          <h1 style={{
            fontSize: '1.5rem',
            fontWeight: 'bold',
            color: '#1e293b',
            margin: 0
          }}>
            üéÆ AI Game Generator
          </h1>
          <div style={{
            display: 'flex',
            gap: '1rem',
            alignItems: 'center'
          }}>
            <span style={{ 
              color: backendDisplay.color,
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem'
            }}>
              {backendDisplay.icon} API {backendDisplay.text}
            </span>
            <button 
              onClick={checkAllServices}
              style={{
                backgroundColor: '#f1f5f9',
                border: '1px solid #e2e8f0',
                borderRadius: '0.375rem',
                padding: '0.25rem 0.5rem',
                fontSize: '0.875rem',
                cursor: 'pointer'
              }}
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main style={{
        maxWidth: '1200px',
        margin: '0 auto',
        padding: '2rem 1rem'
      }}>
        <div style={{
          textAlign: 'center',
          marginBottom: '3rem'
        }}>
          <h2 style={{
            fontSize: '2.5rem',
            fontWeight: 'bold',
            color: '#1e293b',
            marginBottom: '1rem'
          }}>
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–≥—Ä—ã —Å –ø–æ–º–æ—â—å—é –ò–ò
          </h2>
          <p style={{
            fontSize: '1.25rem',
            color: '#64748b',
            marginBottom: '2rem'
          }}>
            –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ HTML5 –∏–≥—Ä—ã –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ò–≥—Ä —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
          </p>
          
          <div style={{
            display: 'flex',
            gap: '1rem',
            justifyContent: 'center',
            flexWrap: 'wrap'
          }}>
            <button 
              style={{
                backgroundColor: (apiStatus.backend === 'online' && (aiStatus.deepseek.available || aiStatus.openai.available || aiStatus.claude.available)) 
                  ? '#3b82f6' : '#94a3b8',
                color: 'white',
                padding: '0.75rem 1.5rem',
                borderRadius: '0.5rem',
                border: 'none',
                fontSize: '1rem',
                fontWeight: '500',
                cursor: (apiStatus.backend === 'online' && (aiStatus.deepseek.available || aiStatus.openai.available || aiStatus.claude.available)) 
                  ? 'pointer' : 'not-allowed',
                transition: 'background-color 0.2s'
              }}
              disabled={!(apiStatus.backend === 'online' && (aiStatus.deepseek.available || aiStatus.openai.available || aiStatus.claude.available))}
                              title={
                  apiStatus.backend !== 'online' 
                    ? 'Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' 
                    : !(aiStatus.deepseek.available || aiStatus.openai.available || aiStatus.claude.available)
                      ? 'AI —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã' 
                      : `–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É: ${[
                          aiStatus.deepseek.available && (aiTaskTypes.deepseek || []).length > 0 && 
                            (aiTaskTypes.deepseek || []).map(taskType => 
                              `${getTaskTypeIcon(taskType)} ${getTaskTypeName(taskType)}`
                            ).join(', '),
                          aiStatus.openai.available && (aiTaskTypes.openai || []).length > 0 && 
                            (aiTaskTypes.openai || []).map(taskType => 
                              `${getTaskTypeIcon(taskType)} ${getTaskTypeName(taskType)}`
                            ).join(', '),
                          aiStatus.claude.available && (aiTaskTypes.claude || []).length > 0 && 
                            (aiTaskTypes.claude || []).map(taskType => 
                              `${getTaskTypeIcon(taskType)} ${getTaskTypeName(taskType)}`
                            ).join(', ')
                        ].filter(Boolean).join(' + ')}`
                }
            >
              üöÄ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
            </button>
            <button style={{
              backgroundColor: '#f1f5f9',
              color: '#475569',
              padding: '0.75rem 1.5rem',
              borderRadius: '0.5rem',
              border: '1px solid #e2e8f0',
              fontSize: '1rem',
              fontWeight: '500',
              cursor: 'pointer'
            }}>
              üìã –ú–æ–∏ –∏–≥—Ä—ã
            </button>
          </div>
        </div>

        {/* Status Cards */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',
          gap: '1.5rem'
        }}>
          <div style={{
            backgroundColor: 'white',
            padding: '1.5rem',
            borderRadius: '0.75rem',
            border: '1px solid #e2e8f0'
          }}>
            <h3 style={{
              fontSize: '1.25rem',
              fontWeight: '600',
              color: '#1e293b',
              marginBottom: '0.5rem'
            }}>
              üéØ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            </h3>
            <div style={{ color: '#64748b', margin: 0 }}>
              <div style={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center',
                marginBottom: '0.5rem'
              }}>
                <span>Frontend:</span>
                <span style={{ color: frontendDisplay.color }}>
                  {frontendDisplay.icon} {frontendDisplay.text}
                </span>
              </div>
              <div style={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center',
                marginBottom: '0.5rem'
              }}>
                <span>Backend:</span>
                <span style={{ color: backendDisplay.color }}>
                  {backendDisplay.icon} {backendDisplay.text}
                </span>
              </div>
              <div style={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center'
              }}>
                <span>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</span>
                <span style={{ color: databaseDisplay.color }}>
                  {databaseDisplay.icon} {databaseDisplay.text}
                </span>
              </div>
            </div>
          </div>

          <div style={{
            backgroundColor: 'white',
            padding: '1.5rem',
            borderRadius: '0.75rem',
            border: '1px solid #e2e8f0'
          }}>
            <h3 style={{
              fontSize: '1.25rem',
              fontWeight: '600',
              color: '#1e293b',
              marginBottom: '0.5rem',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem'
            }}>
              ü§ñ AI –°–µ—Ä–≤–∏—Å—ã
              <div style={{
                fontSize: '0.75rem',
                color: '#6b7280',
                fontWeight: 'normal',
                backgroundColor: '#f3f4f6',
                padding: '0.25rem 0.5rem',
                borderRadius: '0.375rem'
              }}>
                {Object.entries(aiTaskTypes).map(([provider, taskTypes]) => {
                  if (!Array.isArray(taskTypes) || taskTypes.length === 0) return null;
                  return taskTypes.map(taskType => 
                    `${getTaskTypeIcon(taskType)} ${getTaskTypeName(taskType)}`
                  ).join(', ');
                }).filter(Boolean).join(' + ')}
              </div>
            </h3>
            <div style={{ color: '#64748b', margin: 0 }}>
              <div style={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center',
                marginBottom: '0.5rem'
              }}>
                <span>DeepSeek AI:</span>
                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', flex: 1 }}>
                  {(() => {
                    const ds = aiStatus.deepseek;
                    if (ds.status === 'checking') return <span style={{ color: '#f59e0b' }}>üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞...</span>;
                    if (!ds.configured) return <span style={{ color: '#94a3b8' }}>‚öôÔ∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>;
                    if (ds.status === 'online') return <span style={{ color: '#10b981' }}>‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç</span>;
                    if (ds.status === 'error') return <span style={{ color: '#ef4444' }}>‚ö†Ô∏è –û—à–∏–±–∫–∞</span>;
                    return <span style={{ color: '#ef4444' }}>‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω</span>;
                  })()}
                  
                  <div style={{
                    display: 'flex',
                    flexDirection: 'column',
                    gap: '0.25rem',
                    padding: '0.5rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.5rem',
                    backgroundColor: '#fafafa',
                    fontSize: '0.75rem',
                    minWidth: '140px',
                    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
                  }}>
                    <div style={{
                      fontSize: '0.7rem',
                      color: '#6b7280',
                      fontWeight: '500',
                      marginBottom: '0.25rem',
                      borderBottom: '1px solid #e5e7eb',
                      paddingBottom: '0.25rem'
                    }}>
                      DeepSeek –∑–∞–¥–∞—á–∏:
                    </div>
                    {[
                      { value: 'code', label: 'üíª –ö–æ–¥ –∏–≥—Ä' },
                      { value: 'text', label: 'üìù –¢–µ–∫—Å—Ç' },
                      { value: 'logic', label: 'üß† –õ–æ–≥–∏–∫–∞' }
                    ].map(({ value, label }) => (
                      <label key={value} style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.375rem',
                        cursor: 'pointer',
                        color: '#374151',
                        padding: '0.125rem',
                        borderRadius: '0.25rem',
                        backgroundColor: (aiTaskTypes.deepseek || []).includes(value) ? '#dbeafe' : 'transparent',
                        border: (aiTaskTypes.deepseek || []).includes(value) ? '1px solid #3b82f6' : '1px solid transparent',
                        transition: 'all 0.2s'
                      }}>
                        <input
                          type="checkbox"
                          checked={(aiTaskTypes.deepseek || []).includes(value)}
                          onChange={(e) => handleTaskTypeChange('deepseek', value, e.target.checked)}
                          style={{ 
                            margin: 0,
                            accentColor: '#3b82f6',
                            width: '14px',
                            height: '14px'
                          }}
                        />
                        <span style={{ fontSize: '0.75rem', fontWeight: '500' }}>{label}</span>
                      </label>
                    ))}
                  </div>
                  
                  <button 
                    onClick={() => openSettingsModal('deepseek')}
                    style={{
                      backgroundColor: 'transparent',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.25rem',
                      padding: '0.125rem 0.25rem',
                      fontSize: '0.75rem',
                      color: '#6b7280',
                      cursor: 'pointer'
                    }}
                  >
                    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞
                  </button>
                </div>
              </div>
              <div style={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center',
                marginBottom: '0.5rem'
              }}>
                <span>OpenAI:</span>
                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', flex: 1 }}>
                  {(() => {
                    const oa = aiStatus.openai;
                    if (oa.status === 'checking') return <span style={{ color: '#f59e0b' }}>üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞...</span>;
                    if (!oa.configured) return <span style={{ color: '#94a3b8' }}>‚öôÔ∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>;
                    if (oa.status === 'online') return <span style={{ color: '#10b981' }}>‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç</span>;
                    if (oa.status === 'error') return <span style={{ color: '#ef4444' }}>‚ö†Ô∏è –û—à–∏–±–∫–∞</span>;
                    return <span style={{ color: '#ef4444' }}>‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω</span>;
                  })()}
                  
                  <div style={{
                    display: 'flex',
                    flexDirection: 'column',
                    gap: '0.25rem',
                    padding: '0.5rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.5rem',
                    backgroundColor: '#fafafa',
                    fontSize: '0.75rem',
                    minWidth: '140px',
                    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
                  }}>
                    <div style={{
                      fontSize: '0.7rem',
                      color: '#6b7280',
                      fontWeight: '500',
                      marginBottom: '0.25rem',
                      borderBottom: '1px solid #e5e7eb',
                      paddingBottom: '0.25rem'
                    }}>
                      OpenAI –∑–∞–¥–∞—á–∏:
                    </div>
                    {[
                      { value: 'images', label: 'üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' },
                      { value: 'sprites', label: 'üñºÔ∏è –°–ø—Ä–∞–π—Ç—ã' },
                      { value: 'text', label: 'üìù –¢–µ–∫—Å—Ç' },
                      { value: 'audio', label: 'üîä –ó–≤—É–∫–∏' }
                    ].map(({ value, label }) => (
                      <label key={value} style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '0.375rem',
                        cursor: 'pointer',
                        color: '#374151',
                        padding: '0.125rem',
                        borderRadius: '0.25rem',
                        backgroundColor: (aiTaskTypes.openai || []).includes(value) ? '#dcfce7' : 'transparent',
                        border: (aiTaskTypes.openai || []).includes(value) ? '1px solid #10b981' : '1px solid transparent',
                        transition: 'all 0.2s'
                      }}>
                        <input
                          type="checkbox"
                          checked={(aiTaskTypes.openai || []).includes(value)}
                          onChange={(e) => handleTaskTypeChange('openai', value, e.target.checked)}
                          style={{ 
                            margin: 0,
                            accentColor: '#10b981',
                            width: '14px',
                            height: '14px'
                          }}
                        />
                        <span style={{ fontSize: '0.75rem', fontWeight: '500' }}>{label}</span>
                      </label>
                    ))}
                  </div>
                  
                  <button 
                    onClick={() => openSettingsModal('openai')}
                    style={{
                      backgroundColor: 'transparent',
                      border: '1px solid #d1d5db',
                      borderRadius: '0.25rem',
                      padding: '0.125rem 0.25rem',
                      fontSize: '0.75rem',
                      color: '#6b7280',
                      cursor: 'pointer'
                    }}
                  >
                    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞
                  </button>
                              </div>
            </div>
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              alignItems: 'center',
              marginBottom: '0.5rem'
            }}>
              <span>Claude AI:</span>
              <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', flex: 1 }}>
                {(() => {
                  const cl = aiStatus.claude;
                  if (cl.status === 'checking') return <span style={{ color: '#f59e0b' }}>üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞...</span>;
                  if (!cl.configured) return <span style={{ color: '#94a3b8' }}>‚öôÔ∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>;
                  if (cl.status === 'online') return <span style={{ color: '#10b981' }}>‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç</span>;
                  if (cl.status === 'error') return <span style={{ color: '#ef4444' }}>‚ö†Ô∏è –û—à–∏–±–∫–∞</span>;
                  return <span style={{ color: '#ef4444' }}>‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω</span>;
                })()}
                
                <div style={{
                  display: 'flex',
                  flexDirection: 'column',
                  gap: '0.25rem',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.5rem',
                  backgroundColor: '#fafafa',
                  fontSize: '0.75rem',
                  minWidth: '140px',
                  boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
                }}>
                  <div style={{
                    fontSize: '0.7rem',
                    color: '#6b7280',
                    fontWeight: '500',
                    marginBottom: '0.25rem',
                    borderBottom: '1px solid #e5e7eb',
                    paddingBottom: '0.25rem'
                  }}>
                    Claude –∑–∞–¥–∞—á–∏:
                  </div>
                  {[
                    { value: 'code', label: 'üíª –ö–æ–¥' },
                    { value: 'architecture', label: 'üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞' },
                    { value: 'analysis', label: 'üîç –ê–Ω–∞–ª–∏–∑' },
                    { value: 'optimization', label: '‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è' }
                  ].map(({ value, label }) => (
                    <label key={value} style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '0.375rem',
                      cursor: 'pointer',
                      color: '#374151',
                      padding: '0.125rem',
                      borderRadius: '0.25rem',
                      backgroundColor: (aiTaskTypes.claude || []).includes(value) ? '#fde8e8' : 'transparent',
                      border: (aiTaskTypes.claude || []).includes(value) ? '1px solid #f59e0b' : '1px solid transparent',
                      transition: 'all 0.2s'
                    }}>
                      <input
                        type="checkbox"
                        checked={(aiTaskTypes.claude || []).includes(value)}
                        onChange={(e) => handleTaskTypeChange('claude', value, e.target.checked)}
                        style={{ 
                          margin: 0,
                          accentColor: '#f59e0b',
                          width: '14px',
                          height: '14px'
                        }}
                      />
                      <span style={{ fontSize: '0.75rem', fontWeight: '500' }}>{label}</span>
                    </label>
                  ))}
                </div>
                
                <button 
                  onClick={() => openSettingsModal('claude')}
                  style={{
                    backgroundColor: 'transparent',
                    border: '1px solid #d1d5db',
                    borderRadius: '0.25rem',
                    padding: '0.125rem 0.25rem',
                    fontSize: '0.75rem',
                    color: '#6b7280',
                    cursor: 'pointer'
                  }}
                >
                  ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞
                </button>
              </div>
            </div>
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              alignItems: 'center'
            }}>
              <span>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è:</span>
                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end' }}>
                                  <span style={{ 
                  color: (aiStatus.deepseek.available || aiStatus.openai.available || aiStatus.claude.available) ? '#10b981' : '#ef4444' 
                }}>
                  {(aiStatus.deepseek.available || aiStatus.openai.available || aiStatus.claude.available) 
                    ? '‚úÖ –ì–æ—Ç–æ–≤' 
                    : '‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                </span>
                {(aiStatus.deepseek.available || aiStatus.openai.available || aiStatus.claude.available) && (
                    <div style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '0.25rem' }}>
                      {[
                        aiStatus.deepseek.available && (aiTaskTypes.deepseek || []).length > 0 && 
                          (aiTaskTypes.deepseek || []).map(taskType => 
                            `${getTaskTypeIcon(taskType)} ${getTaskTypeName(taskType)}`
                          ).join(', '),
                        aiStatus.openai.available && (aiTaskTypes.openai || []).length > 0 && 
                          (aiTaskTypes.openai || []).map(taskType => 
                            `${getTaskTypeIcon(taskType)} ${getTaskTypeName(taskType)}`
                          ).join(', '),
                        aiStatus.claude.available && (aiTaskTypes.claude || []).length > 0 && 
                          (aiTaskTypes.claude || []).map(taskType => 
                            `${getTaskTypeIcon(taskType)} ${getTaskTypeName(taskType)}`
                          ).join(', ')
                      ].filter(Boolean).join(' + ')}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ */}
        <div style={{
          marginTop: '2rem',
          textAlign: 'center',
          color: '#64748b',
          fontSize: '0.875rem'
        }}>
          <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥</p>
        </div>
      </main>

      {/* Footer */}
      <footer style={{
        borderTop: '1px solid #e2e8f0',
        backgroundColor: 'white',
        padding: '2rem 0',
        marginTop: '4rem'
      }}>
        <div style={{
          maxWidth: '1200px',
          margin: '0 auto',
          padding: '0 1rem',
          textAlign: 'center',
          color: '#64748b'
        }}>
          <p style={{ margin: 0 }}>
            AI Game Generator –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ò–≥—Ä ¬© 2024
          </p>
        </div>
      </footer>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI */}
      {settingsModal.isOpen && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            borderRadius: '0.5rem',
            padding: '2rem',
            maxWidth: '500px',
            width: '90%',
            maxHeight: '90vh',
            overflow: 'auto',
            boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)'
          }}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '1.5rem'
            }}>
              <h3 style={{
                fontSize: '1.5rem',
                fontWeight: '600',
                color: '#1e293b',
                margin: 0
              }}>
                ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {
                  settingsModal.provider === 'deepseek' ? 'DeepSeek AI' : 
                  settingsModal.provider === 'openai' ? 'OpenAI' : 
                  'Claude AI'
                }
              </h3>
              <button 
                onClick={closeSettingsModal}
                style={{
                  background: 'none',
                  border: 'none',
                  fontSize: '1.5rem',
                  cursor: 'pointer',
                  color: '#64748b'
                }}
              >
                ‚úï
              </button>
            </div>

            {/* –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
            <div style={{ marginBottom: '1.5rem' }}>
              <label style={{
                display: 'block',
                fontSize: '0.875rem',
                fontWeight: '500',
                color: '#374151',
                marginBottom: '0.5rem'
              }}>
                API –ö–ª—é—á:
              </label>
              <input
                type="text"
                placeholder={`–í–≤–µ–¥–∏—Ç–µ ${
                  settingsModal.provider === 'deepseek' ? 'DeepSeek' : 
                  settingsModal.provider === 'openai' ? 'OpenAI' : 
                  'Claude'
                } API –∫–ª—é—á`}
                value={settingsModal.apiKey}
                onChange={(e) => setSettingsModal(prev => ({ ...prev, apiKey: e.target.value }))}
                style={{
                  width: '100%',
                  padding: '0.75rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.375rem',
                  fontSize: '1rem',
                  outline: 'none',
                  boxSizing: 'border-box',
                  fontFamily: 'monospace'
                }}
              />
              <p style={{
                fontSize: '0.75rem',
                color: '#6b7280',
                margin: '0.5rem 0 0 0'
              }}>
                {settingsModal.provider === 'deepseek' 
                  ? '–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://platform.deepseek.com'
                  : settingsModal.provider === 'openai' 
                    ? '–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://platform.openai.com'
                    : '–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://console.anthropic.com'
                }
              </p>
            </div>

            <div style={{ marginBottom: '1.5rem' }}>
              <label style={{
                display: 'block',
                fontSize: '0.875rem',
                fontWeight: '500',
                color: '#374151',
                marginBottom: '0.5rem'
              }}>
                –ú–æ–¥–µ–ª—å:
              </label>
              <input
                type="text"
                placeholder={`–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å ${
                  settingsModal.provider === 'deepseek' ? '(–Ω–∞–ø—Ä–∏–º–µ—Ä: deepseek-coder)' : 
                  settingsModal.provider === 'openai' ? '(–Ω–∞–ø—Ä–∏–º–µ—Ä: dall-e-3)' : 
                  '(–Ω–∞–ø—Ä–∏–º–µ—Ä: claude-sonnet-4-20250514)'
                }`}
                value={settingsModal.model}
                onChange={(e) => setSettingsModal(prev => ({ ...prev, model: e.target.value }))}
                style={{
                  width: '100%',
                  padding: '0.75rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.375rem',
                  fontSize: '1rem',
                  outline: 'none',
                  boxSizing: 'border-box',
                  fontFamily: 'monospace'
                }}
              />
              <p style={{
                fontSize: '0.75rem',
                color: '#6b7280',
                margin: '0.5rem 0 0 0'
              }}>
                {settingsModal.provider === 'deepseek' 
                  ? '–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: deepseek-coder, deepseek-chat, deepseek-reasoner'
                  : settingsModal.provider === 'openai' 
                    ? '–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: dall-e-3, dall-e-2, gpt-4, gpt-4-turbo, gpt-4o, gpt-3.5-turbo'
                    : '–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: claude-opus-4-20250514, claude-sonnet-4-20250514, claude-haiku-4-20250514, claude-3-5-sonnet-20241022'
                }
              </p>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div style={{
              display: 'flex',
              gap: '1rem',
              justifyContent: 'flex-end'
            }}>
              <button
                onClick={closeSettingsModal}
                style={{
                  padding: '0.75rem 1.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '0.375rem',
                  backgroundColor: 'white',
                  color: '#374151',
                  fontSize: '1rem',
                  cursor: 'pointer'
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={saveAiSettings}
                disabled={!settingsModal.apiKey.trim() || !settingsModal.model.trim()}
                style={{
                  padding: '0.75rem 1.5rem',
                  border: 'none',
                  borderRadius: '0.375rem',
                  backgroundColor: (settingsModal.apiKey.trim() && settingsModal.model.trim()) ? '#3b82f6' : '#94a3b8',
                  color: 'white',
                  fontSize: '1rem',
                  cursor: (settingsModal.apiKey.trim() && settingsModal.model.trim()) ? 'pointer' : 'not-allowed'
                }}
              >
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// function App() {
//   return (
//     <Layout>
//       <Routes>
//         <Route path="/" element={<HomePage />} />
//         <Route path="/games" element={<GamesPage />} />
//         <Route path="/games/:id" element={<GameDetailsPage />} />
//         <Route path="/configure-game" element={<GameConfigurationPage />} />
//         <Route path="/interactive-generation" element={<InteractiveGeneration />} />
//         <Route path="/interactive/:gameId" element={<InteractiveGeneration />} />
//         <Route path="/stats" element={<StatsPage />} />
//         <Route path="*" element={<NotFoundPage />} />
//       </Routes>
//     </Layout>
//   )
// }

export default App 
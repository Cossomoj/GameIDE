#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const BACKUP_DIR = path.join(__dirname, '..', 'backups');
const TIMESTAMP = new Date().toISOString().replace(/[:.]/g, '-');
const BACKUP_NAME = `gameide-backup-${TIMESTAMP}`;
const BACKUP_PATH = path.join(BACKUP_DIR, BACKUP_NAME);

console.log('üéÆ GameIDE Backup Utility');
console.log('==========================');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤
if (!fs.existsSync(BACKUP_DIR)) {
  fs.mkdirSync(BACKUP_DIR, { recursive: true });
}

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±—ç–∫–∞–ø–∞
fs.mkdirSync(BACKUP_PATH, { recursive: true });

console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: ${BACKUP_NAME}`);

try {
  // 1. –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  console.log('üìä –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  const dbBackupPath = path.join(BACKUP_PATH, 'database.sql');
  execSync(`docker-compose exec -T postgres pg_dump -U gameide gameide_db > "${dbBackupPath}"`, {
    stdio: 'inherit'
  });

  // 2. –ë—ç–∫–∞–ø Redis –¥–∞–Ω–Ω—ã—Ö
  console.log('üóÉÔ∏è  –ë—ç–∫–∞–ø Redis...');
  execSync('docker-compose exec redis redis-cli BGSAVE', { stdio: 'inherit' });
  // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª dump.rdb
  execSync(`docker cp gameide_redis_1:/data/dump.rdb "${path.join(BACKUP_PATH, 'redis-dump.rdb')}"`, {
    stdio: 'inherit'
  });

  // 3. –ë—ç–∫–∞–ø —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä
  console.log('üéÆ –ë—ç–∫–∞–ø –∏–≥—Ä...');
  const gamesBackupPath = path.join(BACKUP_PATH, 'games');
  if (fs.existsSync('./games-output/generated')) {
    execSync(`cp -r ./games-output/generated "${gamesBackupPath}"`, { stdio: 'inherit' });
  }

  // 4. –ë—ç–∫–∞–ø –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  console.log('üìÅ –ë—ç–∫–∞–ø –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  const uploadsBackupPath = path.join(BACKUP_PATH, 'uploads');
  if (fs.existsSync('./games-output/uploads')) {
    execSync(`cp -r ./games-output/uploads "${uploadsBackupPath}"`, { stdio: 'inherit' });
  }

  // 5. –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  console.log('‚öôÔ∏è  –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
  const configFiles = ['.env', 'docker-compose.yml', 'package.json'];
  const configBackupPath = path.join(BACKUP_PATH, 'config');
  fs.mkdirSync(configBackupPath, { recursive: true });
  
  configFiles.forEach(file => {
    if (fs.existsSync(file)) {
      execSync(`cp "${file}" "${path.join(configBackupPath, file)}"`, { stdio: 'inherit' });
    }
  });

  // 6. –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –±—ç–∫–∞–ø–∞
  const manifest = {
    name: BACKUP_NAME,
    created: new Date().toISOString(),
    version: require('../package.json').version,
    components: {
      database: fs.existsSync(dbBackupPath),
      redis: fs.existsSync(path.join(BACKUP_PATH, 'redis-dump.rdb')),
      games: fs.existsSync(gamesBackupPath),
      uploads: fs.existsSync(uploadsBackupPath),
      config: fs.existsSync(configBackupPath)
    },
    size: getFolderSize(BACKUP_PATH)
  };

  fs.writeFileSync(
    path.join(BACKUP_PATH, 'manifest.json'),
    JSON.stringify(manifest, null, 2)
  );

  // 7. –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞...');
  const archivePath = `${BACKUP_PATH}.tar.gz`;
  execSync(`tar -czf "${archivePath}" -C "${BACKUP_DIR}" "${BACKUP_NAME}"`, {
    stdio: 'inherit'
  });

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
  execSync(`rm -rf "${BACKUP_PATH}"`, { stdio: 'inherit' });

  console.log('‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
  console.log(`üìÅ –§–∞–π–ª: ${archivePath}`);
  console.log(`üìä –†–∞–∑–º–µ—Ä: ${(fs.statSync(archivePath).size / 1024 / 1024).toFixed(2)} MB`);

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
  cleanOldBackups();

} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', error.message);
  process.exit(1);
}

function getFolderSize(folderPath) {
  let totalSize = 0;
  
  function calculateSize(dirPath) {
    const files = fs.readdirSync(dirPath);
    
    files.forEach(file => {
      const filePath = path.join(dirPath, file);
      const stats = fs.statSync(filePath);
      
      if (stats.isDirectory()) {
        calculateSize(filePath);
      } else {
        totalSize += stats.size;
      }
    });
  }
  
  if (fs.existsSync(folderPath)) {
    calculateSize(folderPath);
  }
  
  return totalSize;
}

function cleanOldBackups() {
  try {
    const backupFiles = fs.readdirSync(BACKUP_DIR)
      .filter(file => file.startsWith('gameide-backup-') && file.endsWith('.tar.gz'))
      .map(file => ({
        name: file,
        path: path.join(BACKUP_DIR, file),
        created: fs.statSync(path.join(BACKUP_DIR, file)).birthtime
      }))
      .sort((a, b) => b.created - a.created);

    if (backupFiles.length > 5) {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...');
      
      backupFiles.slice(5).forEach(backup => {
        fs.unlinkSync(backup.path);
        console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: ${backup.name}`);
      });
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã:', error.message);
  }
} 
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const readline = require('readline');

const BACKUP_DIR = path.join(__dirname, '..', 'backups');

console.log('üéÆ GameIDE Restore Utility');
console.log('===========================');

// –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã
const backupFiles = getAvailableBackups();

if (backupFiles.length === 0) {
  console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –≤ –ø–∞–ø–∫–µ:', BACKUP_DIR);
  process.exit(1);
}

console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:');
backupFiles.forEach((backup, index) => {
  console.log(`  ${index + 1}. ${backup.name} (${backup.sizeFormatted}, ${backup.dateFormatted})`);
});

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –±—ç–∫–∞–ø–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('\nüî¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ', (answer) => {
  const selectedIndex = parseInt(answer) - 1;
  
  if (selectedIndex < 0 || selectedIndex >= backupFiles.length) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞');
    rl.close();
    process.exit(1);
  }

  const selectedBackup = backupFiles[selectedIndex];
  
  console.log(`\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!`);
  console.log(`–í—ã–±—Ä–∞–Ω–Ω—ã–π –±—ç–∫–∞–ø: ${selectedBackup.name}`);
  
  rl.question('\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ? (yes/no): ', (confirm) => {
    if (confirm.toLowerCase() !== 'yes') {
      console.log('‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      rl.close();
      process.exit(0);
    }
    
    rl.close();
    performRestore(selectedBackup);
  });
});

function getAvailableBackups() {
  try {
    return fs.readdirSync(BACKUP_DIR)
      .filter(file => file.startsWith('gameide-backup-') && file.endsWith('.tar.gz'))
      .map(file => {
        const filePath = path.join(BACKUP_DIR, file);
        const stats = fs.statSync(filePath);
        
        return {
          name: file,
          path: filePath,
          size: stats.size,
          sizeFormatted: formatFileSize(stats.size),
          date: stats.birthtime,
          dateFormatted: stats.birthtime.toLocaleString('ru-RU')
        };
      })
      .sort((a, b) => b.date - a.date);
  } catch (error) {
    return [];
  }
}

function formatFileSize(bytes) {
  if (bytes === 0) return '0 B';
  
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

async function performRestore(backup) {
  const tempDir = path.join(BACKUP_DIR, 'temp-restore');
  
  try {
    console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...');
    
    // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...');
    execSync('docker-compose down', { stdio: 'inherit' });
    
    // 2. –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –±—ç–∫–∞–ø
    console.log('üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –±—ç–∫–∞–ø–∞...');
    if (fs.existsSync(tempDir)) {
      execSync(`rm -rf "${tempDir}"`, { stdio: 'inherit' });
    }
    fs.mkdirSync(tempDir, { recursive: true });
    
    execSync(`tar -xzf "${backup.path}" -C "${tempDir}"`, { stdio: 'inherit' });
    
    const extractedDir = path.join(tempDir, backup.name.replace('.tar.gz', ''));
    
    // 3. –ß–∏—Ç–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
    const manifestPath = path.join(extractedDir, 'manifest.json');
    let manifest = {};
    
    if (fs.existsSync(manifestPath)) {
      manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
      console.log(`üìã –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫–∞–ø –≤–µ—Ä—Å–∏–∏ ${manifest.version} –æ—Ç ${manifest.created}`);
    }
    
    // 4. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—ã
    if (manifest.components?.games && fs.existsSync(path.join(extractedDir, 'games'))) {
      console.log('üéÆ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä...');
      if (!fs.existsSync('./games-output')) {
        fs.mkdirSync('./games-output', { recursive: true });
      }
      if (fs.existsSync('./games-output/generated')) {
        execSync('rm -rf ./games-output/generated', { stdio: 'inherit' });
      }
      execSync(`cp -r "${path.join(extractedDir, 'games')}" "./games-output/generated"`, { stdio: 'inherit' });
    }
    
    // 5. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (manifest.components?.uploads && fs.existsSync(path.join(extractedDir, 'uploads'))) {
      console.log('üìÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
      if (!fs.existsSync('./games-output')) {
        fs.mkdirSync('./games-output', { recursive: true });
      }
      if (fs.existsSync('./games-output/uploads')) {
        execSync('rm -rf ./games-output/uploads', { stdio: 'inherit' });
      }
      execSync(`cp -r "${path.join(extractedDir, 'uploads')}" "./games-output/uploads"`, { stdio: 'inherit' });
    }
    
    // 6. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î...');
    execSync('docker-compose up -d postgres redis', { stdio: 'inherit' });
    
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    // 7. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if (manifest.components?.database && fs.existsSync(path.join(extractedDir, 'database.sql'))) {
      console.log('üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      
      // –û—á–∏—â–∞–µ–º –ë–î
      execSync('docker-compose exec -T postgres psql -U gameide -d gameide_db -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"', {
        stdio: 'inherit'
      });
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –¥–∞–º–ø–∞
      execSync(`docker-compose exec -T postgres psql -U gameide -d gameide_db < "${path.join(extractedDir, 'database.sql')}"`, {
        stdio: 'inherit'
      });
    }
    
    // 8. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis
    if (manifest.components?.redis && fs.existsSync(path.join(extractedDir, 'redis-dump.rdb'))) {
      console.log('üóÉÔ∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Redis...');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis
      execSync('docker-compose stop redis', { stdio: 'inherit' });
      
      // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–º–ø
      execSync(`docker cp "${path.join(extractedDir, 'redis-dump.rdb')}" gameide_redis_1:/data/dump.rdb`, {
        stdio: 'inherit'
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º Redis
      execSync('docker-compose start redis', { stdio: 'inherit' });
    }
    
    // 9. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (manifest.components?.config && fs.existsSync(path.join(extractedDir, 'config'))) {
      console.log('‚öôÔ∏è  –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –±—ç–∫–∞–ø–µ');
      console.log('   (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)');
    }
    
    // 10. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
    execSync('docker-compose up -d', { stdio: 'inherit' });
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    execSync(`rm -rf "${tempDir}"`, { stdio: 'inherit' });
    
    console.log('\n‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5173');
    console.log('üîó API: http://localhost:3000');
    console.log('\n‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    try {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...');
      execSync('docker-compose up -d', { stdio: 'inherit' });
    } catch (startError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã:', startError.message);
    }
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if (fs.existsSync(tempDir)) {
      execSync(`rm -rf "${tempDir}"`, { stdio: 'inherit' });
    }
    
    process.exit(1);
  }
} 
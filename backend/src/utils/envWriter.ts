import fs from 'fs'
import path from 'path'

interface EnvVars {
  [key: string]: string | undefined
}

class EnvWriter {
  private envFilePath: string

  constructor() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π .env —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞, —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    this.envFilePath = '/app/.env'
    console.log('üìÅ EnvWriter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—É—Ç–µ–º –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É .env:', this.envFilePath)
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏ –∫ .env —Ñ–∞–π–ª—É
  set envPath(newPath: string) {
    this.envFilePath = newPath
    console.log('üìÅ EnvWriter –ø—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω:', this.envFilePath)
  }

  // –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
  readEnvFile(): EnvVars {
    try {
      if (!fs.existsSync(this.envFilePath)) {
        console.log('‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–æ–π .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', this.envFilePath)
        return {}
      }

      const envContent = fs.readFileSync(this.envFilePath, 'utf-8')
      const envVars: EnvVars = {}

      envContent.split('\n').forEach(line => {
        const trimmed = line.trim()
        if (trimmed && !trimmed.startsWith('#')) {
          const [key, ...valueParts] = trimmed.split('=')
          if (key && valueParts.length > 0) {
            envVars[key.trim()] = valueParts.join('=').trim()
          }
        }
      })

      console.log('‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env:', Object.keys(envVars).length)
      return envVars
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞:', error)
      return {}
    }
  }

  // –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env —Ñ–∞–π–ª (–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
  writeEnvFile(newVars: EnvVars): boolean {
    try {
      console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:', Object.keys(newVars))
      
      if (!fs.existsSync(this.envFilePath)) {
        console.log('‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–æ–π .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π')
        this.createDefaultEnvFile()
      }

      const existingContent = fs.readFileSync(this.envFilePath, 'utf-8')
      let lines = existingContent.split('\n')

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
      Object.entries(newVars).forEach(([key, value]) => {
        let found = false
        
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É —Å —ç—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i].trim()
          if (line.startsWith(`${key}=`)) {
            lines[i] = `${key}=${value}`
            found = true
            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${key}`)
            break
          }
        }
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–µ–∫—Ü–∏—é
        if (!found) {
          this.addVariableToSection(lines, key, value as string)
          console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: ${key}`)
        }
      })

      fs.writeFileSync(this.envFilePath, lines.join('\n'), 'utf-8')
      console.log('‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π .env —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
      return true
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞:', error)
      return false
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–µ–∫—Ü–∏—é
  private addVariableToSection(lines: string[], key: string, value: string): void {
    const upperKey = key.toUpperCase()
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é –ø–æ –∫–ª—é—á—É
    let sectionComment = ''
    if (upperKey.includes('OPENAI')) {
      sectionComment = '# OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∑–≤—É–∫–æ–≤'
    } else if (upperKey.includes('CLAUDE')) {
      sectionComment = '# Claude API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
    } else if (upperKey.includes('DEEPSEEK')) {
      sectionComment = '# DeepSeek API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏–≥—Ä'
    } else if (upperKey.includes('POSTGRES') || upperKey.includes('DATABASE')) {
      sectionComment = '# PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
    } else {
      sectionComment = '# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
    }

    // –ò—â–µ–º —Å–µ–∫—Ü–∏—é –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
    let sectionIndex = -1
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].includes(sectionComment)) {
        sectionIndex = i
        break
      }
    }

    if (sectionIndex !== -1) {
      // –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–µ—ë
      let insertIndex = sectionIndex + 1
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏
      while (insertIndex < lines.length && 
             (lines[insertIndex].trim().startsWith('#') || 
              lines[insertIndex].trim() === '')) {
        insertIndex++
      }
      // –ù–∞–π–¥–µ–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–∞—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–µ–∫—Ü–∏–∏)
      while (insertIndex < lines.length && 
             lines[insertIndex].trim() !== '' && 
             !lines[insertIndex].trim().startsWith('# ===') &&
             !lines[insertIndex].trim().startsWith('# ---')) {
        insertIndex++
      }
      lines.splice(insertIndex, 0, `${key}=${value}`)
    } else {
      // –°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
      if (lines[lines.length - 1].trim() !== '') {
        lines.push('')
      }
      lines.push(`# ${sectionComment.replace('# ', '')}`)
      lines.push(`${key}=${value}`)
      lines.push('')
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–∞
  updateAIServiceVars(provider: string, apiKey: string, model: string): boolean {
    const upperProvider = provider.toUpperCase()
    const vars: EnvVars = {}
    
    if (apiKey) {
      vars[`${upperProvider}_API_KEY`] = apiKey
    }
    if (model) {
      vars[`${upperProvider}_MODEL`] = model
    }

    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ${provider} –≤ –∫–æ—Ä–Ω–µ–≤–æ–π .env —Ñ–∞–π–ª`)
    return this.writeEnvFile(vars)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ AI —Å–µ—Ä–≤–∏—Å–∞
  getAIServiceVars(provider: string): { apiKey: string; model: string } {
    const envVars = this.readEnvFile()
    const upperProvider = provider.toUpperCase()
    
    const result = {
      apiKey: envVars[`${upperProvider}_API_KEY`] || '',
      model: envVars[`${upperProvider}_MODEL`] || this.getDefaultModel(provider)
    }
    
    console.log(`üìñ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${provider}:`, {
      hasApiKey: !!result.apiKey,
      apiKeyLength: result.apiKey.length,
      model: result.model
    })
    
    return result
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
  private createDefaultEnvFile(): void {
    const defaultContent = `# GameIDE Environment Configuration
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

# =====================================
# AI API Keys (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
# =====================================

# DeepSeek API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏–≥—Ä
# –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞: https://platform.deepseek.com/
DEEPSEEK_API_KEY=

# OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∑–≤—É–∫–æ–≤  
# –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞: https://platform.openai.com/
OPENAI_API_KEY=

# Claude API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
# –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞: https://console.anthropic.com/
CLAUDE_API_KEY=

# =====================================
# Database Configuration
# =====================================

# PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
POSTGRES_DB=gameide_db
POSTGRES_USER=gameide
POSTGRES_PASSWORD=gameide_password

# =====================================
# Other Settings
# =====================================
`
    fs.writeFileSync(this.envFilePath, defaultContent, 'utf-8')
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π –∫–æ—Ä–Ω–µ–≤–æ–π .env —Ñ–∞–π–ª')
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
  private getDefaultModel(provider: string): string {
    const defaults: { [key: string]: string } = {
      'openai': 'gpt-4',
      'claude': 'claude-3-sonnet-20240229',
      'deepseek': 'deepseek-coder'
    }
    return defaults[provider.toLowerCase()] || ''
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
  validateApiKeyFormat(provider: string, apiKey: string): boolean {
    if (!apiKey || apiKey.trim() === '') return false

    const patterns: { [key: string]: RegExp } = {
      'openai': /^sk-[a-zA-Z0-9\-_]{20,}$/,
      'claude': /^sk-ant-[a-zA-Z0-9\-_]{90,}$/,
      'deepseek': /^sk-[a-zA-Z0-9]{20,}$/
    }

    const pattern = patterns[provider.toLowerCase()]
    const isValid = pattern ? pattern.test(apiKey.trim()) : apiKey.length > 10
    
    console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞ ${provider}:`, {
      length: apiKey.length,
      format: isValid ? 'valid' : 'invalid',
      pattern: pattern?.toString()
    })
    
    return isValid
  }

  // –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  maskApiKey(apiKey: string): string {
    if (!apiKey || apiKey.length < 8) return apiKey
    
    const start = apiKey.substring(0, 8)
    const end = apiKey.substring(apiKey.length - 4)
    const middle = '*'.repeat(Math.max(0, apiKey.length - 12))
    
    return `${start}${middle}${end}`
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const envWriter = new EnvWriter()
export default envWriter 
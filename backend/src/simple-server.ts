import express from 'express'
import cors from 'cors'
import dotenv from 'dotenv'
import { envWriter } from './utils/envWriter'
import { InteractiveGameGenerationService } from './services/interactiveGameGeneration'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ –∫–æ—Ä–Ω–µ
dotenv.config({ path: '/app/.env' })

const app = express()
const PORT = 3001

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const interactiveGameService = new InteractiveGameGenerationService()

// –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –≤ envWriter
envWriter.envPath = '/app/.env'

// Middleware
app.use(cors({
  origin: [
    'http://localhost:3000',
    'http://localhost:5173',
    'http://frontend:3000'
  ],
  credentials: true
}))
app.use(express.json())

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`)
  next()
})

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
async function fetchWithTimeout(url: string, options: any = {}, timeoutMs: number = 10000) {
  const controller = new AbortController()
  const timeoutId = setTimeout(() => controller.abort(), timeoutMs)
  
  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal
    })
    clearTimeout(timeoutId)
    return response
  } catch (error) {
    clearTimeout(timeoutId)
    if (error instanceof Error && error.name === 'AbortError') {
      throw new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞')
    }
    throw error
  }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ AI —Å–µ—Ä–≤–∏—Å–∞
const AI_MODELS = {
  openai: [
    { id: 'gpt-4', name: 'GPT-4 (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)', description: '–°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á' },
    { id: 'gpt-4-turbo', name: 'GPT-4 Turbo', description: '–ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è GPT-4' },
    { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo', description: '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å' },
    { id: 'dall-e-3', name: 'DALL-E 3', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞' },
    { id: 'dall-e-2', name: 'DALL-E 2', description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' },
    { id: 'text-davinci-003', name: 'Davinci 003', description: '–ú–æ—â–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å' },
    { id: 'code-davinci-002', name: 'Codex Davinci', description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∫–æ–¥–∞' }
  ],
  claude: [
    { id: 'claude-3-opus-20240229', name: 'Claude 3 Opus', description: '–°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å Anthropic' },
    { id: 'claude-3-sonnet-20240229', name: 'Claude 3 Sonnet (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)', description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å' },
    { id: 'claude-3-haiku-20240307', name: 'Claude 3 Haiku', description: '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å' },
    { id: 'claude-2.1', name: 'Claude 2.1', description: '–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ' },
    { id: 'claude-2.0', name: 'Claude 2.0', description: '–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è' },
    { id: 'claude-instant-1.2', name: 'Claude Instant', description: '–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã' }
  ],
  deepseek: [
    { id: 'deepseek-coder', name: 'DeepSeek Coder (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)', description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è' },
    { id: 'deepseek-chat', name: 'DeepSeek Chat', description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤' },
    { id: 'deepseek-reasoner', name: 'DeepSeek Reasoner', description: '–ú–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏' },
    { id: 'deepseek-llm-7b-chat', name: 'DeepSeek LLM 7B', description: '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å' },
    { id: 'deepseek-llm-67b-chat', name: 'DeepSeek LLM 67B', description: '–ë–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á' },
    { id: 'deepseek-math', name: 'DeepSeek Math', description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏' }
  ]
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
let generationSettings = {
  stages: {
    gameDesign: { enabled: true, provider: 'claude' },
    codeGeneration: { enabled: true, provider: 'deepseek' },
    assetGeneration: { enabled: true, provider: 'openai' },
    testing: { enabled: false, provider: 'claude' },
    optimization: { enabled: true, provider: 'deepseek' }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π
async function validateApiKey(provider: string, apiKey: string): Promise<{
  valid: boolean
  status: 'valid' | 'invalid' | 'error' | 'not_configured'
  error?: string
}> {
  if (!apiKey || apiKey.trim() === '') {
    return { valid: false, status: 'not_configured' }
  }

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
  if (!envWriter.validateApiKeyFormat(provider, apiKey)) {
    return { valid: false, status: 'invalid', error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞' }
  }

  try {
    console.log(`üîç –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ ${provider}: ${envWriter.maskApiKey(apiKey)}`)
    
    // –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã
    switch (provider.toLowerCase()) {
      case 'openai':
        return await validateOpenAIKey(apiKey)
      case 'claude':
        return await validateClaudeKey(apiKey)
      case 'deepseek':
        return await validateDeepSeekKey(apiKey)
      default:
        return { valid: false, status: 'error', error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä' }
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ ${provider}:`, error)
    return { valid: false, status: 'error', error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º' }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ OpenAI
async function validateOpenAIKey(apiKey: string): Promise<{
  valid: boolean
  status: 'valid' | 'invalid' | 'error'
  error?: string
}> {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API...')
    const response = await fetchWithTimeout('https://api.openai.com/v1/models', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    }, 8000)

    if (response.status === 200) {
      console.log('‚úÖ OpenAI API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω')
      return { valid: true, status: 'valid' }
    } else if (response.status === 401) {
      console.log('‚ùå OpenAI API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (401 Unauthorized)')
      return { valid: false, status: 'invalid', error: 'API –∫–ª—é—á –æ—Ç–∫–ª–æ–Ω–µ–Ω OpenAI' }
    } else {
      console.log(`‚ö†Ô∏è OpenAI API –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º: ${response.status}`)
      return { valid: false, status: 'error', error: `HTTP ${response.status}` }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI API:', error)
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    return { valid: false, status: 'error', error: `OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${errorMessage}` }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ Claude (Anthropic)
async function validateClaudeKey(apiKey: string): Promise<{
  valid: boolean
  status: 'valid' | 'invalid' | 'error'
  error?: string
}> {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Claude API...')
    const response = await fetchWithTimeout('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'x-api-key': apiKey,
        'anthropic-version': '2023-06-01',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'claude-3-haiku-20240307',
        max_tokens: 1,
        messages: [{ role: 'user', content: 'test' }]
      })
    }, 8000)

    if (response.status === 200) {
      console.log('‚úÖ Claude API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω')
      return { valid: true, status: 'valid' }
    } else if (response.status === 401 || response.status === 403) {
      console.log(`‚ùå Claude API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (${response.status})`)
      return { valid: false, status: 'invalid', error: 'API –∫–ª—é—á –æ—Ç–∫–ª–æ–Ω–µ–Ω Anthropic' }
    } else {
      console.log(`‚ö†Ô∏è Claude API –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º: ${response.status}`)
      return { valid: false, status: 'error', error: `HTTP ${response.status}` }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Claude API:', error)
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    return { valid: false, status: 'error', error: `Anthropic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${errorMessage}` }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ DeepSeek
async function validateDeepSeekKey(apiKey: string): Promise<{
  valid: boolean
  status: 'valid' | 'invalid' | 'error'
  error?: string
}> {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DeepSeek API...')
    const response = await fetchWithTimeout('https://api.deepseek.com/v1/models', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    }, 8000)

    if (response.status === 200) {
      console.log('‚úÖ DeepSeek API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω')
      return { valid: true, status: 'valid' }
    } else if (response.status === 401) {
      console.log('‚ùå DeepSeek API –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (401 Unauthorized)')
      return { valid: false, status: 'invalid', error: 'API –∫–ª—é—á –æ—Ç–∫–ª–æ–Ω–µ–Ω DeepSeek' }
    } else {
      console.log(`‚ö†Ô∏è DeepSeek API –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º: ${response.status}`)
      return { valid: false, status: 'error', error: `HTTP ${response.status}` }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DeepSeek API:', error)
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    return { valid: false, status: 'error', error: `DeepSeek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${errorMessage}` }
  }
}

// Health check
app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: 'development',
    version: '1.0.0',
    services: {
      database: 'connected',
      redis: 'connected'
    }
  })
})

// AI Status endpoint - —Ç–µ–ø–µ—Ä—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ .env
app.get('/api/ai/status', async (req, res) => {
  try {
    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤ —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...')
    
    const services: any = {}
    
    for (const provider of ['openai', 'claude', 'deepseek']) {
      const { apiKey, model } = envWriter.getAIServiceVars(provider)
      
      if (!apiKey) {
        services[provider] = {
          configured: false,
          status: 'not_configured',
          available: false,
          model: model || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞',
          apiKeyStatus: 'not_configured'
        }
        console.log(`üìä ${provider}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`)
      } else {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${provider}...`)
        const validation = await validateApiKey(provider, apiKey)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        let serviceStatus = 'offline'
        if (validation.valid) {
          serviceStatus = 'online'
        } else if (validation.status === 'not_configured') {
          serviceStatus = 'not_configured'
        } else if (validation.status === 'error') {
          serviceStatus = 'error'
        }
        
        services[provider] = {
          configured: true,
          status: serviceStatus,
          available: validation.valid,
          model: model,
          apiKey: envWriter.maskApiKey(apiKey),
          apiKeyStatus: validation.status,
          error: validation.error
        }
        
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ${provider}:`, {
          status: serviceStatus,
          available: validation.valid,
          apiKeyStatus: validation.status,
          error: validation.error || '–Ω–µ—Ç'
        })
      }
    }
    
    res.json({
      timestamp: new Date().toISOString(),
      services,
      note: '–°—Ç–∞—Ç—É—Å—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö API —Å–µ—Ä–≤–∏—Å–æ–≤'
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ AI:', error)
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    })
  }
})

// AI Settings endpoints - —Ç–µ–ø–µ—Ä—å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π .env —Ñ–∞–π–ª–∞
app.post('/api/ai/settings', async (req, res) => {
  const { provider, apiKey, model } = req.body
  
  console.log(`üîê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ${provider}:`, { model, apiKeyMasked: envWriter.maskApiKey(apiKey) })
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!provider || !apiKey || !model) {
    return res.status(400).json({
      success: false,
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: provider, apiKey, model'
    })
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
    const validation = await validateApiKey(provider, apiKey)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env —Ñ–∞–π–ª –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á)
    const saved = envWriter.updateAIServiceVars(provider, apiKey, model)
    
    if (!saved) {
      return res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª'
      })
    }
    
    res.json({
      success: true,
      message: `–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ${provider} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã`,
      provider,
      model,
      apiKeyStatus: validation.status,
      validation: validation,
      envSaved: true,
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI:', error)
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    })
  }
})

app.get('/api/ai/settings', (req, res) => {
  try {
    const settings: any = {}
    
    for (const provider of ['openai', 'claude', 'deepseek']) {
      const vars = envWriter.getAIServiceVars(provider)
      settings[provider] = {
        apiKey: vars.apiKey,
        model: vars.model,
        configured: !!vars.apiKey
      }
    }
    
    res.json({
      success: true,
      settings,
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫'
    })
  }
})

// –ú–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
app.get('/api/ai/models/:provider', async (req, res) => {
  try {
    const { provider } = req.params
    console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ${provider}`)

    const allModels = {
      openai: [
        {
          id: 'gpt-4o',
          name: 'GPT-4o (–ù–æ–≤–µ–π—à–∞—è)',
          description: '–°–∞–º–∞—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å OpenAI —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏'
        },
        {
          id: 'gpt-4o-mini',
          name: 'GPT-4o Mini (–≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è)',
          description: '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-4o, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏'
        },
        {
          id: 'gpt-4-turbo',
          name: 'GPT-4 Turbo',
          description: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-4 —Å –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –æ–∫–Ω–æ–º'
        },
        {
          id: 'gpt-4',
          name: 'GPT-4',
          description: '–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å GPT-4 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á'
        },
        {
          id: 'gpt-3.5-turbo',
          name: 'GPT-3.5 Turbo',
          description: '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á'
        },
        {
          id: 'o1-preview',
          name: 'o1-preview (–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è)',
          description: '–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ–º (–±–µ—Ç–∞)'
        },
        {
          id: 'o1-mini',
          name: 'o1-mini',
          description: '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏ o1 –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–¥–∞—á'
        }
      ],
      claude: [
        {
          id: 'claude-3-5-sonnet-20241022',
          name: 'Claude 3.5 Sonnet (–ù–æ–≤–µ–π—à–∞—è)',
          description: '–°–∞–º–∞—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å Claude —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏'
        },
        {
          id: 'claude-3-5-haiku-20241022',
          name: 'Claude 3.5 Haiku (–ë—ã—Å—Ç—Ä–∞—è)',
          description: '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á'
        },
        {
          id: 'claude-3-opus-20240229',
          name: 'Claude 3 Opus (–ú–æ—â–Ω–∞—è)',
          description: '–°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å Claude 3 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á'
        },
        {
          id: 'claude-3-sonnet-20240229',
          name: 'Claude 3 Sonnet (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)',
          description: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å Claude 3 –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á'
        },
        {
          id: 'claude-3-haiku-20240307',
          name: 'Claude 3 Haiku',
          description: '–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å Claude 3 –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á'
        },
        {
          id: 'claude-2.1',
          name: 'Claude 2.1',
          description: '–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ Claude (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)'
        },
        {
          id: 'claude-2.0',
          name: 'Claude 2.0',
          description: '–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å Claude 2 (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)'
        },
        {
          id: 'claude-instant-1.2',
          name: 'Claude Instant',
          description: '–ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è Claude –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)'
        }
      ],
      deepseek: [
        {
          id: 'deepseek-chat',
          name: 'DeepSeek Chat (–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)',
          description: '–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å DeepSeek –¥–ª—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á –∏ –¥–∏–∞–ª–æ–≥–æ–≤'
        },
        {
          id: 'deepseek-coder',
          name: 'DeepSeek Coder (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)',
          description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
        },
        {
          id: 'deepseek-reasoner',
          name: 'DeepSeek Reasoner (–ù–æ–≤–∞—è)',
          description: '–ú–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞'
        },
        {
          id: 'deepseek-v2',
          name: 'DeepSeek V2',
          description: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ DeepSeek'
        }
      ]
    }

    const models = allModels[provider as keyof typeof allModels]
    
    if (!models) {
      return res.status(404).json({
        success: false,
        error: `–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`
      })
    }

    res.json({
      success: true,
      provider,
      models,
      count: models.length,
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è ${req.params.provider}:`, error)
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞' 
    })
  }
})

// Generation Settings endpoints
app.get('/api/generation/settings', (req, res) => {
  console.log('üìã –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç—Ç–∞–ø–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
  res.json({
    success: true,
    settings: generationSettings,
    timestamp: new Date().toISOString()
  })
})

app.post('/api/generation/settings', (req, res) => {
  const { stages } = req.body
  
  console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç—Ç–∞–ø–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', stages)
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!stages) {
    return res.status(400).json({
      success: false,
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–ø–æ–≤'
    })
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  generationSettings = { stages }
  
  res.json({
    success: true,
    message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–ø–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
    settings: generationSettings,
    timestamp: new Date().toISOString()
  })
})

// Game creation endpoint
app.post('/api/games', (req, res) => {
  const { title, description, genre, artStyle, options } = req.body
  
  console.log('üéÆ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã:', { title, description, genre })
  console.log('‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–ø–æ–≤:', generationSettings)
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!title || !description || !genre) {
    return res.status(400).json({
      success: false,
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: title, description, genre'
    })
  }
  
  // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç—Ç–∞–ø–æ–≤
  const gameId = `game-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —ç—Ç–∞–ø—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
  const enabledStages = Object.entries(generationSettings.stages)
    .filter(([key, stage]) => stage.enabled)
    .map(([key, stage]) => `${key} (${stage.provider})`)
  
  console.log('üîÑ –ë—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —ç—Ç–∞–ø—ã:', enabledStages)
  
  res.status(201).json({
    success: true,
    game: {
      id: gameId,
      title,
      description,
      status: 'queued',
      progress: 0,
      createdAt: new Date().toISOString(),
      generationPlan: {
        enabledStages: enabledStages,
        settings: generationSettings
      }
    },
    message: '–ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
  })
})

// Get games endpoint
app.get('/api/games', (req, res) => {
  res.json({
    success: true,
    games: [
      {
        id: 'demo-game-1',
        title: '–î–µ–º–æ –∏–≥—Ä–∞ 1',
        description: '–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–≥—Ä–∞',
        genre: 'arcade',
        status: 'completed',
        progress: 100,
        createdAt: new Date(Date.now() - 86400000).toISOString(),
        updatedAt: new Date().toISOString(),
        downloadUrl: '/api/games/demo-game-1/download',
        thumbnailUrl: '/api/games/demo-game-1/thumbnail'
      }
    ]
  })
})

// Interactive generation endpoints
app.post('/api/interactive/start', async (req, res) => {
  try {
    console.log('üéÆ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', req.body)
    
    const { title, description, genre, userId, quality } = req.body
    
    if (!title || !description) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã title –∏ description'
      })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º userId –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    const effectiveUserId = userId || `user-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`

    const session = await interactiveGameService.startInteractiveGeneration({
      title,
      description,
      genre: genre || 'adventure',
      userId: effectiveUserId,
      quality: quality || 'balanced'
    })

    const currentStep = session.steps[session.currentStep]

    res.json({
      success: true,
      data: {
        gameId: session.gameId,
        currentStep: session.currentStep,
        totalSteps: session.totalSteps,
        step: {
          stepId: currentStep.stepId,
          name: currentStep.name,
          description: currentStep.description,
          variants: currentStep.variants.map(v => ({
            id: v.id,
            title: v.title,
            description: v.description
          }))
        }
      },
      message: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.'
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error)
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
      details: error.message
    })
  }
})

app.get('/api/interactive/:gameId/state', async (req, res) => {
  try {
    const { gameId } = req.params
    console.log('üìä –ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', gameId)
    
    const session = await interactiveGameService.getGameState(gameId)
    
    if (!session) {
      return res.status(404).json({
        success: false,
        error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      })
    }

    const currentStep = session.steps[session.currentStep]
    
    res.json({
      success: true,
      data: {
        gameId: session.gameId,
        currentStep: session.currentStep,
        totalSteps: session.totalSteps,
        step: {
          stepId: currentStep.stepId,
          name: currentStep.name,
          description: currentStep.description,
          variants: currentStep.variants.map(v => ({
            id: v.id,
            title: v.title,
            description: v.description
          }))
        },
        isActive: session.isActive,
        isPaused: session.isPaused,
        completedSteps: session.completedSteps,
        startedAt: session.startedAt.toISOString(),
        lastActivityAt: session.lastActivityAt.toISOString()
      }
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error)
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏',
      details: error.message
    })
  }
})

app.post('/api/interactive/:gameId/step/:stepId/select', async (req, res) => {
  try {
    const { gameId, stepId } = req.params
    const { variantId } = req.body
    
    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç ${variantId} –¥–ª—è —ç—Ç–∞–ø–∞ ${stepId} –∏–≥—Ä—ã ${gameId}`)
    
    const result = await interactiveGameService.selectVariant(gameId, stepId, variantId)
    
    const responseData: any = {
      selectedVariant: variantId
    }

    if (result.nextStep) {
      responseData.nextStep = {
        stepId: result.nextStep.stepId,
        name: result.nextStep.name,
        description: result.nextStep.description,
        variants: result.nextStep.variants.map(v => ({
          id: v.id,
          title: v.title,
          description: v.description
        }))
      }
    }
    
    res.json({
      success: result.success,
      message: result.message,
      data: responseData
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:', error)
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç',
      details: error.message
    })
  }
})

app.post('/api/interactive/:gameId/complete', async (req, res) => {
  try {
    const { gameId } = req.params
    console.log('üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', gameId)
    
    const result = await interactiveGameService.completeGeneration(gameId)
    
    res.json({
      success: result.success,
      data: {
        gameId,
        finalGamePath: result.finalGameData.gamePath,
        downloadUrl: result.finalGameData.downloadUrl,
        assets: result.finalGameData.assets,
        choices: result.finalGameData.choices
      },
      message: result.message
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error)
    res.status(500).json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
      details: error.message
    })
  }
})

// Stats endpoint
app.get('/api/stats', (req, res) => {
  res.json({
    success: true,
    data: {
      totalGames: 1,
      completedGames: 1,
      totalDownloads: 42,
      totalPlayTime: 1337,
      averageRating: 4.5,
      genreStats: {
        arcade: 1,
        platformer: 0,
        puzzle: 0
      },
      monthlyStats: [
        {
          month: '2024-01',
          gamesCreated: 1,
          downloads: 42
        }
      ]
    }
  })
})

// –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
app.post('/api/ai/validate-model', async (req, res) => {
  try {
    const { provider, model, apiKey } = req.body
    
    if (!provider || !model) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã provider –∏ model'
      })
    }

    console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ${provider}/${model}`)

    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    if (model.length < 2) {
      return res.json({
        valid: false,
        error: '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏',
        provider,
        model
      })
    }

    let validation = { valid: false, error: '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const actualModels = await getActualModelsFromProvider(provider, apiKey)
      
      if (actualModels && actualModels.length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–æ–¥–µ–ª—å –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
        const modelExists = actualModels.some((m: any) => 
          m.id === model || 
          m.name === model ||
          m.id?.toLowerCase() === model.toLowerCase()
        )

        if (modelExists) {
          validation = { valid: true }
          console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${model} –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ ${provider}`)
        } else {
          validation = { 
            valid: false, 
            error: `–ú–æ–¥–µ–ª—å "${model}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ ${provider}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.`
          }
          console.log(`‚ùå –ú–æ–¥–µ–ª—å ${model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ ${provider}`)
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫, –ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        const testResult = await testModelAvailability(provider, model, apiKey)
        validation = testResult
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ ${provider}/${model}:`, error)
      validation = {
        valid: false,
        error: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      }
    }

    res.json({
      ...validation,
      provider,
      model,
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏'
    })
  }
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
async function getActualModelsFromProvider(provider: string, apiKey?: string): Promise<any[]> {
  if (!apiKey) return []

  try {
    let url = ''
    let headers: any = { 'Content-Type': 'application/json' }

    switch (provider.toLowerCase()) {
      case 'openai':
        url = 'https://api.openai.com/v1/models'
        headers['Authorization'] = `Bearer ${apiKey}`
        break
      case 'deepseek':
        url = 'https://api.deepseek.com/v1/models'
        headers['Authorization'] = `Bearer ${apiKey}`
        break
      case 'claude':
        // Anthropic –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        return [
          { id: 'claude-3-5-sonnet-20241022', name: 'Claude 3.5 Sonnet' },
          { id: 'claude-3-5-haiku-20241022', name: 'Claude 3.5 Haiku' },
          { id: 'claude-3-opus-20240229', name: 'Claude 3 Opus' },
          { id: 'claude-3-sonnet-20240229', name: 'Claude 3 Sonnet' },
          { id: 'claude-3-haiku-20240307', name: 'Claude 3 Haiku' },
          { id: 'claude-2.1', name: 'Claude 2.1' },
          { id: 'claude-2.0', name: 'Claude 2.0' },
          { id: 'claude-instant-1.2', name: 'Claude Instant' }
        ]
      default:
        return []
    }

    console.log(`üîç –ó–∞–ø—Ä–æ—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π ${provider} –∏–∑ API...`)
    const response = await fetchWithTimeout(url, { headers }, 10000)

    if (response.ok) {
      const data = await response.json()
      const models = data.data || data.models || []
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π –æ—Ç ${provider}`)
      return models
    } else {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ${provider}: HTTP ${response.status}`)
      return []
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π ${provider}:`, error)
    return []
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
async function testModelAvailability(provider: string, model: string, apiKey?: string): Promise<{ valid: boolean; error?: string }> {
  if (!apiKey) {
    return { valid: false, error: 'API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' }
  }

  try {
    switch (provider.toLowerCase()) {
      case 'openai':
        return await testOpenAIModel(model, apiKey)
      case 'claude':
        return await testClaudeModel(model, apiKey)
      case 'deepseek':
        return await testDeepSeekModel(model, apiKey)
      default:
        return { valid: false, error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä' }
    }
  } catch (error) {
    return { 
      valid: false, 
      error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
    }
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ OpenAI
async function testOpenAIModel(model: string, apiKey: string): Promise<{ valid: boolean; error?: string }> {
  try {
    const response = await fetchWithTimeout('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: model,
        messages: [{ role: 'user', content: 'test' }],
        max_tokens: 1
      })
    }, 8000)

    if (response.status === 200) {
      return { valid: true }
    } else if (response.status === 404) {
      return { valid: false, error: '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ OpenAI' }
    } else {
      return { valid: false, error: `HTTP ${response.status}` }
    }
  } catch (error) {
    return { valid: false, error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI –º–æ–¥–µ–ª–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` }
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Claude
async function testClaudeModel(model: string, apiKey: string): Promise<{ valid: boolean; error?: string }> {
  try {
    const response = await fetchWithTimeout('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'x-api-key': apiKey,
        'anthropic-version': '2023-06-01',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: model,
        max_tokens: 1,
        messages: [{ role: 'user', content: 'test' }]
      })
    }, 8000)

    if (response.status === 200) {
      return { valid: true }
    } else if (response.status === 400) {
      const errorData = await response.json()
      if (errorData.error?.type === 'invalid_request_error' && 
          errorData.error?.message?.includes('model')) {
        return { valid: false, error: '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Claude' }
      }
      return { valid: false, error: errorData.error?.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞' }
    } else {
      return { valid: false, error: `HTTP ${response.status}` }
    }
  } catch (error) {
    return { valid: false, error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Claude –º–æ–¥–µ–ª–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` }
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ DeepSeek
async function testDeepSeekModel(model: string, apiKey: string): Promise<{ valid: boolean; error?: string }> {
  try {
    const response = await fetchWithTimeout('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: model,
        messages: [{ role: 'user', content: 'test' }],
        max_tokens: 1
      })
    }, 8000)

    if (response.status === 200) {
      return { valid: true }
    } else if (response.status === 404 || response.status === 400) {
      const errorData = await response.json().catch(() => ({}))
      if (errorData.error?.message?.includes('model')) {
        return { valid: false, error: '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DeepSeek' }
      }
      return { valid: false, error: errorData.error?.message || '–ú–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' }
    } else {
      return { valid: false, error: `HTTP ${response.status}` }
    }
  } catch (error) {
    return { valid: false, error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DeepSeek –º–æ–¥–µ–ª–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` }
  }
}

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl,
    method: req.method
  })
})

// Error handler
app.use((error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error)
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: error.message
  })
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:${PORT}`)
  console.log(`üìä Health check: http://0.0.0.0:${PORT}/api/health`)
  console.log(`üéÆ API endpoints: http://0.0.0.0:${PORT}/api/`)
  console.log(`‚öôÔ∏è AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: http://0.0.0.0:${PORT}/api/ai/settings`)
  console.log(`ü§ñ AI –º–æ–¥–µ–ª–∏: http://0.0.0.0:${PORT}/api/ai/models`)
  console.log(`üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–ø–æ–≤: http://0.0.0.0:${PORT}/api/generation/settings`)
})

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...')
  process.exit(0)
})

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...')
  process.exit(0)
}) 
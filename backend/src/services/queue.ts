import Bull, { Queue, Job } from 'bull';
import { EventEmitter } from 'events';
import config from '@/config';
import { LoggerService } from './logger';
import { GenerationRequest, QueueJob } from '@/types';
import { GameGenerationPipeline } from './gameGeneration';

export class QueueService extends EventEmitter {
  private gameGenerationQueue: Queue;
  private logger: LoggerService;
  private pipeline: GameGenerationPipeline;

  constructor() {
    super();
    this.logger = new LoggerService();
    this.pipeline = new GameGenerationPipeline();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä
    this.gameGenerationQueue = new Bull('game-generation', {
      redis: config.redis.url,
      defaultJobOptions: {
        removeOnComplete: 10, // –•—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ 10 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        removeOnFail: 20,     // –•—Ä–∞–Ω–∏—Ç—å 20 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        attempts: config.generation.retries,
        backoff: {
          type: 'exponential',
          delay: 30000, // 30 —Å–µ–∫—É–Ω–¥
        },
      },
    });

    this.setupEventListeners();
    this.setupJobProcessors();
  }

  public async initialize(): Promise<void> {
    try {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      await this.gameGenerationQueue.clean(24 * 60 * 60 * 1000, 'completed');
      await this.gameGenerationQueue.clean(7 * 24 * 60 * 60 * 1000, 'failed');
      
      this.logger.systemEvent('Queue service initialized', {
        waiting: await this.gameGenerationQueue.getWaiting(),
        active: await this.gameGenerationQueue.getActive(),
        completed: await this.gameGenerationQueue.getCompleted(),
        failed: await this.gameGenerationQueue.getFailed(),
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π:', error);
      throw error;
    }
  }

  public async addGameGenerationJob(request: GenerationRequest): Promise<Job<GenerationRequest>> {
    try {
      const job = await this.gameGenerationQueue.add('generate-game', request, {
        priority: this.calculatePriority(request),
        delay: 0,
        jobId: request.id,
      });

      this.logger.info(`üìã –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã ${request.id}`, {
        gameId: request.id,
        priority: job.opts.priority,
        position: await job.getWaiting(),
      });

      return job;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è ${request.id}:`, error);
      throw error;
    }
  }

  public async getJobStatus(jobId: string): Promise<any> {
    try {
      const job = await this.gameGenerationQueue.getJob(jobId);
      
      if (!job) {
        return null;
      }

      const state = await job.getState();
      const progress = job.progress();
      const logs = job.logs;

      return {
        id: job.id,
        state,
        progress,
        logs: logs || [],
        createdAt: new Date(job.timestamp),
        processedAt: job.processedOn ? new Date(job.processedOn) : null,
        finishedAt: job.finishedOn ? new Date(job.finishedOn) : null,
        failedReason: job.failedReason,
        data: job.data,
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è ${jobId}:`, error);
      throw error;
    }
  }

  public async cancelJob(jobId: string): Promise<boolean> {
    try {
      const job = await this.gameGenerationQueue.getJob(jobId);
      
      if (!job) {
        return false;
      }

      await job.remove();
      
      this.logger.info(`‚ùå –ó–∞–¥–∞–Ω–∏–µ ${jobId} –æ—Ç–º–µ–Ω–µ–Ω–æ`);
      return true;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è ${jobId}:`, error);
      return false;
    }
  }

  public async getQueueStats(): Promise<any> {
    try {
      const [waiting, active, completed, failed, delayed] = await Promise.all([
        this.gameGenerationQueue.getWaiting(),
        this.gameGenerationQueue.getActive(),
        this.gameGenerationQueue.getCompleted(),
        this.gameGenerationQueue.getFailed(),
        this.gameGenerationQueue.getDelayed(),
      ]);

      return {
        waiting: waiting.length,
        active: active.length,
        completed: completed.length,
        failed: failed.length,
        delayed: delayed.length,
        total: waiting.length + active.length + completed.length + failed.length + delayed.length,
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
      throw error;
    }
  }

  public async pauseQueue(): Promise<void> {
    await this.gameGenerationQueue.pause();
    this.logger.systemEvent('Queue paused');
  }

  public async resumeQueue(): Promise<void> {
    await this.gameGenerationQueue.resume();
    this.logger.systemEvent('Queue resumed');
  }

  public async close(): Promise<void> {
    try {
      await this.gameGenerationQueue.close();
      this.logger.systemEvent('Queue service closed');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π:', error);
      throw error;
    }
  }

  private setupEventListeners(): void {
    // –°–æ–±—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏–π
    this.gameGenerationQueue.on('global:completed', (jobId: string, result: any) => {
      this.logger.info(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ ${jobId} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
      this.emit('job:completed', { jobId, result });
    });

    this.gameGenerationQueue.on('global:failed', (jobId: string, error: any) => {
      this.logger.error(`‚ùå –ó–∞–¥–∞–Ω–∏–µ ${jobId} –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:`, error);
      this.emit('job:failed', { jobId, error });
    });

    this.gameGenerationQueue.on('global:progress', (jobId: string, progress: any) => {
      this.logger.debug(`üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è ${jobId}: ${progress}%`);
      this.emit('job:progress', { jobId, progress });
    });

    this.gameGenerationQueue.on('global:stalled', (jobId: string) => {
      this.logger.warn(`‚è∏Ô∏è –ó–∞–¥–∞–Ω–∏–µ ${jobId} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
      this.emit('job:stalled', { jobId });
    });

    // –°–æ–±—ã—Ç–∏—è –æ—á–µ—Ä–µ–¥–∏
    this.gameGenerationQueue.on('error', (error: Error) => {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—á–µ—Ä–µ–¥–∏:', error);
      this.emit('queue:error', error);
    });

    this.gameGenerationQueue.on('waiting', (jobId: string) => {
      this.logger.debug(`‚è≥ –ó–∞–¥–∞–Ω–∏–µ ${jobId} –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
      this.emit('job:waiting', { jobId });
    });

    this.gameGenerationQueue.on('active', (job: Job, jobPromise: Promise<any>) => {
      this.logger.info(`üöÄ –ó–∞–¥–∞–Ω–∏–µ ${job.id} –Ω–∞—á–∞—Ç–æ`);
      this.emit('job:active', { jobId: job.id, data: job.data });
    });
  }

  private setupJobProcessors(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä
    this.gameGenerationQueue.process('generate-game', config.generation.maxConcurrent, async (job: Job<GenerationRequest>) => {
      const { data } = job;
      
      this.logger.generationStart(data.id, data.prompt);

      try {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const updateProgress = (step: string, progress: number, logs?: string[]) => {
          job.progress(progress);
          job.log(`${step}: ${progress}%`);
          
          if (logs) {
            logs.forEach(log => job.log(log));
          }

          this.logger.generationStep(data.id, step, progress);
          this.emit('generation:progress', {
            gameId: data.id,
            step,
            progress,
            logs,
          });
        };

        // –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const result = await this.pipeline.execute(data, updateProgress);
        
        this.logger.generationComplete(data.id, Date.now() - job.timestamp, result.size || 0);
        
        return result;
      } catch (error) {
        this.logger.generationError(data.id, 'pipeline', error);
        throw error;
      }
    });
  }

  private calculatePriority(request: GenerationRequest): number {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç 1 (–≤—ã—Å—à–∏–π) –¥–æ 100 (–Ω–∏–∑—à–∏–π)
    let priority = 50; // –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    if (request.options?.quality === 'fast') {
      priority -= 20;
    } else if (request.options?.quality === 'high') {
      priority += 10;
    }

    // –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    if (request.prompt.description.length > 500) {
      priority += 5;
    }

    return Math.max(1, Math.min(100, priority));
  }
} 
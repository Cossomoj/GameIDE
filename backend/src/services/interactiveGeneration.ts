import { EventEmitter } from 'events';
import { v4 as uuidv4 } from 'uuid';
import path from 'path';
import fs from 'fs/promises';
import {
  InteractiveGameRequest,
  InteractiveGenerationState,
  InteractiveStep,
  GenerationVariant,
  StepGenerationRequest,
  VariantGenerationResponse,
  StepGuide,
  InteractiveStepConfig,
  StepType,
  CharacterVariant,
  MechanicsVariant,
  LevelVariant,
  GraphicsVariant,
  SoundVariant,
  UIVariant
} from '@/types/interactive';
import { GameConfiguration } from '@/types/gameConfig';
import { LoggerService } from './logger';
import { DeepSeekService } from './ai/deepseek';
import { OpenAIService } from './ai/openai';

export class InteractiveGenerationService extends EventEmitter {
  private logger: LoggerService;
  private deepseek: DeepSeekService;
  private openai: OpenAIService;
  private activeGenerations = new Map<string, InteractiveGenerationState>();
  private stepConfigs = new Map<string, InteractiveStepConfig>();

  constructor() {
    super();
    this.logger = new LoggerService();
    this.deepseek = new DeepSeekService();
    this.openai = new OpenAIService();
    this.initializeStepConfigs();
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–≥—Ä—ã —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  public async startInteractiveGeneration(
    request: InteractiveGameRequest & { configuration?: GameConfiguration }
  ): Promise<InteractiveGenerationState> {
    try {
      this.logger.info(`üéÆ –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã: ${request.id}`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
      const gameConfig = request.configuration;
      const genre = gameConfig?.mainGenre || request.genre;

      this.logger.info(`üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã: –∂–∞–Ω—Ä=${genre}, —Å—Ç–∏–ª—å=${gameConfig?.visualStyle?.graphicStyle}`);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç—Ç–∞–ø–æ–≤ –¥–ª—è –∂–∞–Ω—Ä–∞
      const stepConfig = this.stepConfigs.get(genre) || this.getDefaultStepConfig();
      
      // –°–æ–∑–¥–∞–µ–º —ç—Ç–∞–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
      const steps = await this.createStepsFromConfig(stepConfig, request, gameConfig);

      // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const state: InteractiveGenerationState = {
        gameId: request.id,
        userId: request.userId,
        currentStepIndex: 0,
        totalSteps: steps.length,
        steps,
        startedAt: new Date(),
        lastActivityAt: new Date(),
        isActive: true,
        finalChoices: {},
        gameConfiguration: gameConfig // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      };

      this.activeGenerations.set(request.id, state);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
      await this.startStep(request.id, 0);

      return state;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${request.id}:`, error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
   */
  public async generateStepVariants(
    gameId: string,
    stepId: string,
    count: number = 5
  ): Promise<VariantGenerationResponse> {
    try {
      const state = this.activeGenerations.get(gameId);
      if (!state) {
        throw new Error(`–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      const step = state.steps.find(s => s.stepId === stepId);
      if (!step) {
        throw new Error(`–≠—Ç–∞–ø ${stepId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      this.emit('variants:generating', {
        gameId,
        stepId,
        progress: 0,
        message: `–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ${count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ "${step.name}"`
      });

      const variants = await this.generateVariantsForStep(step, state, count);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫ —ç—Ç–∞–ø—É
      step.variants.push(...variants);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      state.lastActivityAt = new Date();
      
      const response: VariantGenerationResponse = {
        stepId,
        variants,
        generatedAt: new Date(),
        totalCount: variants.length,
        hasMore: true // –í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ
      };

      this.emit('variants:generated', {
        gameId,
        stepId,
        variants
      });

      return response;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è ${gameId}/${stepId}:`, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–∞–ø–∞
   */
  public async selectVariant(
    gameId: string,
    stepId: string,
    variantId: string,
    customPrompt?: string
  ): Promise<void> {
    try {
      const state = this.activeGenerations.get(gameId);
      if (!state) {
        throw new Error(`–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      const step = state.steps.find(s => s.stepId === stepId);
      if (!step) {
        throw new Error(`–≠—Ç–∞–ø ${stepId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      const variant = step.variants.find(v => v.id === variantId);
      if (!variant) {
        throw new Error(`–í–∞—Ä–∏–∞–Ω—Ç ${variantId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
      step.selectedVariant = variantId;
      step.customPrompt = customPrompt;
      step.isCompleted = true;
      state.finalChoices[stepId] = variantId;
      state.lastActivityAt = new Date();

      this.emit('step:completed', {
        gameId,
        stepId,
        selectedVariant: variant
      });

      this.logger.info(`‚úÖ –≠—Ç–∞–ø ${stepId} –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∏–≥—Ä—ã ${gameId}`);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      await this.proceedToNextStep(gameId);
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${gameId}/${stepId}/${variantId}:`, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  public async uploadCustomAsset(
    gameId: string,
    stepId: string,
    file: {
      buffer: Buffer;
      filename: string;
      mimetype: string;
      size: number;
    }
  ): Promise<GenerationVariant> {
    try {
      const state = this.activeGenerations.get(gameId);
      if (!state) {
        throw new Error(`–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
      const uploadsDir = path.join(process.cwd(), 'temp', 'uploads', gameId);
      await fs.mkdir(uploadsDir, { recursive: true });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const fileExtension = path.extname(file.filename);
      const savedFilename = `${stepId}_${uuidv4()}${fileExtension}`;
      const filePath = path.join(uploadsDir, savedFilename);
      
      await fs.writeFile(filePath, file.buffer);

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      let preview: string | undefined;
      if (file.mimetype.startsWith('image/')) {
        preview = `data:${file.mimetype};base64,${file.buffer.toString('base64')}`;
      }

      // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const variant: GenerationVariant = {
        id: uuidv4(),
        type: 'user_uploaded',
        content: {
          filePath,
          originalName: file.filename,
          savedName: savedFilename
        },
        preview,
        metadata: {
          filename: file.filename,
          size: file.size,
          mimetype: file.mimetype
        }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫ —ç—Ç–∞–ø—É
      const step = state.steps.find(s => s.stepId === stepId);
      if (step) {
        step.variants.push(variant);
      }

      this.logger.info(`üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è ${gameId}/${stepId}: ${file.filename}`);

      return variant;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è ${gameId}/${stepId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  public getGenerationState(gameId: string): InteractiveGenerationState | undefined {
    return this.activeGenerations.get(gameId);
  }

  /**
   * –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
   */
  public pauseGeneration(gameId: string, reason: string = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª'): void {
    const state = this.activeGenerations.get(gameId);
    if (state) {
      state.isActive = false;
      state.lastActivityAt = new Date();
      
      this.emit('generation:paused', { gameId, reason });
      this.logger.info(`‚è∏Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${gameId} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${reason}`);
    }
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
   */
  public resumeGeneration(gameId: string): void {
    const state = this.activeGenerations.get(gameId);
    if (state) {
      state.isActive = true;
      state.lastActivityAt = new Date();
      
      this.emit('generation:resumed', { 
        gameId, 
        fromStep: state.currentStepIndex 
      });
      this.logger.info(`‚ñ∂Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${gameId} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å —ç—Ç–∞–ø–∞ ${state.currentStepIndex}`);
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–≥—Ä—É
   */
  public async completeGeneration(gameId: string): Promise<string> {
    try {
      const state = this.activeGenerations.get(gameId);
      if (!state) {
        throw new Error(`–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      this.logger.info(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${gameId}`);

      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–≥—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤
      const finalGamePath = await this.buildFinalGame(state);
      
      state.generatedGame = finalGamePath;
      state.isActive = false;

      // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => {
        this.activeGenerations.delete(gameId);
      }, 3600000); // 1 —á–∞—Å

      this.emit('generation:completed', {
        gameId,
        finalGame: {
          path: finalGamePath,
          downloadUrl: `/api/games/${gameId}/download`,
          size: 0 // TODO: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä
        }
      });

      return finalGamePath;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${gameId}:`, error);
      throw error;
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private async startStep(gameId: string, stepIndex: number): Promise<void> {
    const state = this.activeGenerations.get(gameId);
    if (!state || stepIndex >= state.steps.length) {
      return;
    }

    const step = state.steps[stepIndex];
    state.currentStepIndex = stepIndex;

    this.emit('step:started', {
      gameId,
      stepIndex,
      step
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–∞–ø–∞
    await this.generateStepVariants(gameId, step.stepId, 5);
  }

  private async proceedToNextStep(gameId: string): Promise<void> {
    const state = this.activeGenerations.get(gameId);
    if (!state) return;

    const nextStepIndex = state.currentStepIndex + 1;
    
    if (nextStepIndex >= state.totalSteps) {
      // –í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–≥—Ä—É
      await this.completeGeneration(gameId);
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
      await this.startStep(gameId, nextStepIndex);
    }
  }

  private async generateVariantsForStep(
    step: InteractiveStep,
    state: InteractiveGenerationState,
    count: number
  ): Promise<GenerationVariant[]> {
    const variants: GenerationVariant[] = [];

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤
    const context = this.buildContextFromCompletedSteps(state);

    switch (step.type) {
      case 'character':
        for (let i = 0; i < count; i++) {
          variants.push(await this.generateCharacterVariant(context));
        }
        break;
      case 'mechanics':
        for (let i = 0; i < count; i++) {
          variants.push(await this.generateMechanicsVariant(context));
        }
        break;
      case 'levels':
        for (let i = 0; i < count; i++) {
          variants.push(await this.generateLevelVariant(context));
        }
        break;
      case 'graphics':
        for (let i = 0; i < count; i++) {
          variants.push(await this.generateGraphicsVariant(context));
        }
        break;
      case 'sounds':
        for (let i = 0; i < count; i++) {
          variants.push(await this.generateSoundVariant(context));
        }
        break;
      case 'ui':
        for (let i = 0; i < count; i++) {
          variants.push(await this.generateUIVariant(context));
        }
        break;
      default:
        this.logger.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç—Ç–∞–ø–∞: ${step.type}`);
    }

    return variants;
  }

  private async generateCharacterVariant(context: any): Promise<CharacterVariant> {
    const prompt = `–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${JSON.stringify(context, null, 2)}`;
    
    const response = await this.deepseek.generateCode(prompt, `
      –°–æ–∑–¥–∞–π JSON –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä—ã. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
      {
        "name": "–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
        "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        "appearance": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏",
        "abilities": ["—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å1", "—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å2"],
        "primaryColor": "#FF0000",
        "style": "pixel art / cartoon / realistic"
      }
    `);

    const characterData = this.parseJSONResponse(response.content);

    return {
      id: uuidv4(),
      type: 'ai_generated',
      content: characterData,
      metadata: {
        prompt,
        style: characterData.style
      }
    };
  }

  private async generateMechanicsVariant(context: any): Promise<MechanicsVariant> {
    const prompt = `–°–æ–∑–¥–∞–π –∏–≥—Ä–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${JSON.stringify(context, null, 2)}`;
    
    const response = await this.deepseek.generateCode(prompt, `
      –°–æ–∑–¥–∞–π JSON –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
      {
        "coreLoop": "–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª",
        "controls": ["—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ1", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ2"],
        "objectives": ["—Ü–µ–ª—å1", "—Ü–µ–ª—å2"],
        "progression": "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏",
        "difficulty": "–ö—Ä–∏–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
        "specialFeatures": ["–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å1", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å2"]
      }
    `);

    const mechanicsData = this.parseJSONResponse(response.content);

    return {
      id: uuidv4(),
      type: 'ai_generated',
      content: mechanicsData,
      metadata: {
        prompt
      }
    };
  }

  private async generateLevelVariant(context: any): Promise<LevelVariant> {
    const prompt = `–°–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω —É—Ä–æ–≤–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${JSON.stringify(context, null, 2)}`;
    
    const response = await this.deepseek.generateCode(prompt, `
      –°–æ–∑–¥–∞–π JSON –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ —É—Ä–æ–≤–Ω—è. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
      {
        "layout": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è",
        "theme": "–¢–µ–º–∞ —É—Ä–æ–≤–Ω—è",
        "obstacles": ["–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ1", "–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ2"],
        "collectibles": ["–ø—Ä–µ–¥–º–µ—Ç1", "–ø—Ä–µ–¥–º–µ—Ç2"],
        "enemies": ["–≤—Ä–∞–≥1", "–≤—Ä–∞–≥2"],
        "backgroundElements": ["—ç–ª–µ–º–µ–Ω—Ç1", "—ç–ª–µ–º–µ–Ω—Ç2"],
        "size": {"width": 800, "height": 600}
      }
    `);

    const levelData = this.parseJSONResponse(response.content);

    return {
      id: uuidv4(),
      type: 'ai_generated',
      content: levelData,
      metadata: {
        prompt
      }
    };
  }

  private async generateGraphicsVariant(context: any): Promise<GraphicsVariant> {
    const prompt = `–°–æ–∑–¥–∞–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${JSON.stringify(context, null, 2)}`;
    
    const response = await this.deepseek.generateCode(prompt, `
      –°–æ–∑–¥–∞–π JSON –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
      {
        "artStyle": "pixel art / cartoon / realistic / minimalist",
        "colorPalette": ["#FF0000", "#00FF00", "#0000FF"],
        "theme": "–¢–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è",
        "mood": "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
        "examples": []
      }
    `);

    const graphicsData = this.parseJSONResponse(response.content);

    return {
      id: uuidv4(),
      type: 'ai_generated',
      content: graphicsData,
      metadata: {
        prompt,
        style: graphicsData.artStyle
      }
    };
  }

  private async generateSoundVariant(context: any): Promise<SoundVariant> {
    const prompt = `–°–æ–∑–¥–∞–π –∑–≤—É–∫–æ–≤–æ–π –¥–∏–∑–∞–π–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${JSON.stringify(context, null, 2)}`;
    
    const response = await this.deepseek.generateCode(prompt, `
      –°–æ–∑–¥–∞–π JSON –æ–ø–∏—Å–∞–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
      {
        "style": "electronic / orchestral / chiptune / ambient",
        "mood": "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –º—É–∑—ã–∫–∏",
        "instruments": ["–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç1", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç2"],
        "tempo": "slow / medium / fast / variable"
      }
    `);

    const soundData = this.parseJSONResponse(response.content);

    return {
      id: uuidv4(),
      type: 'ai_generated',
      content: soundData,
      metadata: {
        prompt
      }
    };
  }

  private async generateUIVariant(context: any): Promise<UIVariant> {
    const prompt = `–°–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${JSON.stringify(context, null, 2)}`;
    
    const response = await this.deepseek.generateCode(prompt, `
      –°–æ–∑–¥–∞–π JSON –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
      {
        "style": "modern / retro / minimalist / gaming",
        "layout": "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
        "colorScheme": "–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞",
        "components": ["–∫–æ–º–ø–æ–Ω–µ–Ω—Ç1", "–∫–æ–º–ø–æ–Ω–µ–Ω—Ç2"]
      }
    `);

    const uiData = this.parseJSONResponse(response.content);

    return {
      id: uuidv4(),
      type: 'ai_generated',
      content: uiData,
      metadata: {
        prompt
      }
    };
  }

  private buildContextFromCompletedSteps(state: InteractiveGenerationState): any {
    const context: any = {
      gameId: state.gameId,
      genre: 'unknown', // TODO: –≤–∑—è—Ç—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
      completedSteps: {}
    };

    for (const step of state.steps) {
      if (step.isCompleted && step.selectedVariant) {
        const selectedVariant = step.variants.find(v => v.id === step.selectedVariant);
        if (selectedVariant) {
          context.completedSteps[step.type] = selectedVariant.content;
        }
      }
    }

    return context;
  }

  private async buildFinalGame(state: InteractiveGenerationState): Promise<string> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–æ–≤
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–≥—Ä—É

    const outputDir = path.join(process.cwd(), 'generated-games', state.gameId);
    await fs.mkdir(outputDir, { recursive: true });

    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    const indexHtml = `
<!DOCTYPE html>
<html>
<head>
    <title>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–≥—Ä–∞</title>
</head>
<body>
    <h1>–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ!</h1>
    <p>–í—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(state.finalChoices, null, 2)}</p>
</body>
</html>
    `;

    await fs.writeFile(path.join(outputDir, 'index.html'), indexHtml);

    return outputDir;
  }

  private parseJSONResponse(response: string): any {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
      
      // –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç
      return JSON.parse(response);
    } catch (error) {
      this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç:', response);
      return {};
    }
  }

  private async createStepsFromConfig(
    config: InteractiveStepConfig, 
    request: InteractiveGameRequest,
    gameConfig?: GameConfiguration
  ): Promise<InteractiveStep[]> {
    return config.steps.map((stepGuide, index) => ({
      stepId: uuidv4(),
      name: stepGuide.title,
      description: stepGuide.description,
      type: stepGuide.stepType as StepType,
      variants: [],
      isCompleted: false,
      isSkippable: stepGuide.stepType !== 'character' // –ü–µ—Ä—Å–æ–Ω–∞–∂ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    }));
  }

  private initializeStepConfigs(): void {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä–∞
    this.stepConfigs.set('platformer', {
      genre: 'platformer',
      steps: [
        {
          stepType: 'character',
          title: '–ü–µ—Ä—Å–æ–Ω–∞–∂',
          description: '–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –≤–∞—à–µ–π –∏–≥—Ä—ã',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä–∞'
        },
        {
          stepType: 'mechanics',
          title: '–ú–µ—Ö–∞–Ω–∏–∫–∏',
          description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –º–µ—Ö–∞–Ω–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä–∞'
        },
        {
          stepType: 'levels',
          title: '–£—Ä–æ–≤–Ω–∏',
          description: '–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π—Ç–µ —É—Ä–æ–≤–Ω–∏ –∏–≥—Ä—ã',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä–∞'
        },
        {
          stepType: 'graphics',
          title: '–ì—Ä–∞—Ñ–∏–∫–∞',
          description: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä–∞'
        },
        {
          stepType: 'sounds',
          title: '–ó–≤—É–∫–∏',
          description: '–ü–æ–¥–±–µ—Ä–∏—Ç–µ –º—É–∑—ã–∫—É –∏ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –∑–≤—É–∫–æ–≤–æ–π –¥–∏–∑–∞–π–Ω –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä–∞'
        }
      ]
    });

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞—Ä–∫–∞–¥—ã
    this.stepConfigs.set('arcade', {
      genre: 'arcade',
      steps: [
        {
          stepType: 'character',
          title: '–ò–≥—Ä–æ–≤–æ–π –æ–±—ä–µ–∫—Ç',
          description: '–ì–ª–∞–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∞—Ä–∫–∞–¥–Ω–æ–π –∏–≥—Ä—ã',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –∏–≥—Ä–æ–≤–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∞—Ä–∫–∞–¥—ã'
        },
        {
          stepType: 'mechanics',
          title: '–ú–µ—Ö–∞–Ω–∏–∫–∏',
          description: '–ü—Ä–æ—Å—Ç—ã–µ –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—ã–µ –∞—Ä–∫–∞–¥–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏'
        },
        {
          stepType: 'graphics',
          title: '–ì—Ä–∞—Ñ–∏–∫–∞',
          description: '–Ø—Ä–∫–∏–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π —è—Ä–∫—É—é –∞—Ä–∫–∞–¥–Ω—É—é –≥—Ä–∞—Ñ–∏–∫—É'
        },
        {
          stepType: 'sounds',
          title: '–ó–≤—É–∫–∏',
          description: '–î–∏–Ω–∞–º–∏—á–Ω—ã–µ –∑–≤—É–∫–∏ –∏ –º—É–∑—ã–∫–∞',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∑–≤—É–∫–æ–≤–æ–π –¥–∏–∑–∞–π–Ω'
        }
      ]
    });

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫
    this.stepConfigs.set('puzzle', {
      genre: 'puzzle',
      steps: [
        {
          stepType: 'mechanics',
          title: '–ü—Ä–∞–≤–∏–ª–∞ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏',
          description: '–õ–æ–≥–∏–∫–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞ —Ä–µ—à–µ–Ω–∏—è',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏'
        },
        {
          stepType: 'levels',
          title: '–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
          description: '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π —É—Ä–æ–≤–Ω–∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏'
        },
        {
          stepType: 'graphics',
          title: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
          description: '–ü–æ–Ω—è—Ç–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏'
        }
      ]
    });

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —ç–∫—à–µ–Ω–∞
    this.stepConfigs.set('action', {
      genre: 'action',
      steps: [
        {
          stepType: 'character',
          title: '–ì–µ—Ä–æ–π',
          description: '–ë–æ–µ–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –Ω–∞–≤—ã–∫–∞–º–∏',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –±–æ–µ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'
        },
        {
          stepType: 'mechanics',
          title: '–ë–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞',
          description: '–ê—Ç–∞–∫–∏, –∑–∞—â–∏—Ç–∞, –∫–æ–º–±–æ',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –±–æ–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É'
        },
        {
          stepType: 'levels',
          title: '–ê—Ä–µ–Ω—ã –∏ —É—Ä–æ–≤–Ω–∏',
          description: '–ú–µ—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏–π',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –±–æ–µ–≤—ã–µ –∞—Ä–µ–Ω—ã'
        },
        {
          stepType: 'graphics',
          title: '–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã',
          description: '–≠—Ñ—Ñ–µ–∫—Ç—ã –∞—Ç–∞–∫ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –±–æ–µ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã'
        },
        {
          stepType: 'sounds',
          title: '–ó–≤—É–∫–∏ —Å—Ä–∞–∂–µ–Ω–∏–π',
          description: '–ó–≤—É–∫–∏ —É–¥–∞—Ä–æ–≤ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –∑–≤—É–∫–∏ —Å—Ä–∞–∂–µ–Ω–∏–π'
        }
      ]
    });

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è RPG
    this.stepConfigs.set('rpg', {
      genre: 'rpg',
      steps: [
        {
          stepType: 'character',
          title: '–ü–µ—Ä—Å–æ–Ω–∞–∂ –∏ –∫–ª–∞—Å—Å—ã',
          description: '–ì–µ—Ä–æ–π —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π RPG –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'
        },
        {
          stepType: 'mechanics',
          title: '–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏',
          description: '–£—Ä–æ–≤–Ω–∏, –Ω–∞–≤—ã–∫–∏, —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π —Å–∏—Å—Ç–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—è'
        },
        {
          stepType: 'levels',
          title: '–ú–∏—Ä –∏ –∫–≤–µ—Å—Ç—ã',
          description: '–õ–æ–∫–∞—Ü–∏–∏ –∏ –∑–∞–¥–∞–Ω–∏—è',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –∏–≥—Ä–æ–≤–æ–π –º–∏—Ä'
        },
        {
          stepType: 'graphics',
          title: '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å',
          description: '–°—Ç–∏–ª—å —Ñ—ç–Ω—Ç–µ–∑–∏ –∏–ª–∏ sci-fi',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—É—é –≥—Ä–∞—Ñ–∏–∫—É'
        },
        {
          stepType: 'sounds',
          title: '–ú—É–∑—ã–∫–∞ –∏ –∑–≤—É–∫–∏',
          description: '–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∞—è –º—É–∑—ã–∫–∞',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π —ç–ø–∏—á–µ—Å–∫—É—é –º—É–∑—ã–∫—É'
        }
      ]
    });

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    this.stepConfigs.set('strategy', {
      genre: 'strategy',
      steps: [
        {
          stepType: 'mechanics',
          title: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞',
          description: '–†–µ—Å—É—Ä—Å—ã, —é–Ω–∏—Ç—ã, –∑–¥–∞–Ω–∏—è',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ö–∞–Ω–∏–∫–∏'
        },
        {
          stepType: 'levels',
          title: '–ö–∞—Ä—Ç—ã –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏',
          description: '–ü–æ–ª—è —Å—Ä–∞–∂–µ–Ω–∏–π',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã'
        },
        {
          stepType: 'graphics',
          title: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
          description: '–£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–π—Å–∫–∞–º–∏',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'
        }
      ]
    });
  }

  private getDefaultStepConfig(): InteractiveStepConfig {
    return {
      genre: 'default',
      steps: [
        {
          stepType: 'character',
          title: '–ü–µ—Ä—Å–æ–Ω–∞–∂',
          description: '–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –∏–≥—Ä–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'
        },
        {
          stepType: 'mechanics',
          title: '–ú–µ—Ö–∞–Ω–∏–∫–∏',
          description: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏'
        },
        {
          stepType: 'graphics',
          title: '–ì—Ä–∞—Ñ–∏–∫–∞',
          description: '–í–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å',
          aiGenerationPrompt: '–°–æ–∑–¥–∞–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å'
        }
      ]
    };
  }
} 
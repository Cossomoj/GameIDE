/**
 * –°–µ—Ä–≤–∏—Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è GameIDE
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —Ç—É—Ä–µ—Ü–∫–∏–π –∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
 */

export interface Translation {
  [key: string]: string | Translation;
}

export interface LanguageData {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
  rtl?: boolean;
  pluralRules?: (n: number) => string;
  translations: Translation;
}

export interface LocalizationConfig {
  defaultLanguage: string;
  supportedLanguages: string[];
  fallbackLanguage: string;
  namespaces: string[];
}

export class LocalizationService {
  private languages: Map<string, LanguageData> = new Map();
  private config: LocalizationConfig = {
    defaultLanguage: 'ru',
    supportedLanguages: ['ru', 'en', 'tr', 'uk', 'be', 'kz'],
    fallbackLanguage: 'en',
    namespaces: ['common', 'game', 'ui', 'errors', 'achievements']
  };

  constructor() {
    this.initializeLanguages();
  }

  private initializeLanguages() {
    // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
    this.languages.set('ru', {
      code: 'ru',
      name: 'Russian',
      nativeName: '–†—É—Å—Å–∫–∏–π',
      flag: 'üá∑üá∫',
      pluralRules: this.createRussianPluralRules(),
      translations: this.getRussianTranslations()
    });

    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
    this.languages.set('en', {
      code: 'en',
      name: 'English',
      nativeName: 'English',
      flag: 'üá∫üá∏',
      pluralRules: this.createEnglishPluralRules(),
      translations: this.getEnglishTranslations()
    });

    // –¢—É—Ä–µ—Ü–∫–∏–π —è–∑—ã–∫
    this.languages.set('tr', {
      code: 'tr',
      name: 'Turkish',
      nativeName: 'T√ºrk√ße',
      flag: 'üáπüá∑',
      pluralRules: this.createTurkishPluralRules(),
      translations: this.getTurkishTranslations()
    });

    // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫
    this.languages.set('uk', {
      code: 'uk',
      name: 'Ukrainian',
      nativeName: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
      flag: 'üá∫üá¶',
      pluralRules: this.createRussianPluralRules(), // –°—Ö–æ–∂–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å —Ä—É—Å—Å–∫–∏–º
      translations: this.getUkrainianTranslations()
    });

    // –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    this.languages.set('be', {
      code: 'be',
      name: 'Belarusian',
      nativeName: '–ë–µ–ª–∞—Ä—É—Å–∫–∞—è',
      flag: 'üáßüáæ',
      pluralRules: this.createRussianPluralRules(),
      translations: this.getBelarusianTranslations()
    });

    // –ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫
    this.languages.set('kz', {
      code: 'kz',
      name: 'Kazakh',
      nativeName: '“ö–∞–∑–∞“õ—à–∞',
      flag: 'üá∞üáø',
      pluralRules: this.createTurkishPluralRules(), // –°—Ö–æ–∂–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å —Ç—É—Ä–µ—Ü–∫–∏–º
      translations: this.getKazakhTranslations()
    });
  }

  private createRussianPluralRules() {
    return (n: number): string => {
      if (n % 10 === 1 && n % 100 !== 11) return 'one';
      if ([2, 3, 4].includes(n % 10) && ![12, 13, 14].includes(n % 100)) return 'few';
      return 'many';
    };
  }

  private createEnglishPluralRules() {
    return (n: number): string => n === 1 ? 'one' : 'other';
  }

  private createTurkishPluralRules() {
    return (n: number): string => 'other'; // –¢—É—Ä–µ—Ü–∫–∏–π –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ä–º—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
  }

  private getRussianTranslations(): Translation {
    return {
      common: {
        yes: '–î–∞',
        no: '–ù–µ—Ç',
        ok: '–û–ö',
        cancel: '–û—Ç–º–µ–Ω–∞',
        save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        load: '–ó–∞–≥—Ä—É–∑–∏—Ç—å',
        delete: '–£–¥–∞–ª–∏—Ç—å',
        edit: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
        close: '–ó–∞–∫—Ä—ã—Ç—å',
        back: '–ù–∞–∑–∞–¥',
        next: '–î–∞–ª–µ–µ',
        previous: '–ü—Ä–µ–¥—ã–¥—É—â–∏–π',
        continue: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
        settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        help: '–ü–æ–º–æ—â—å',
        about: '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ',
        loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
        error: '–û—à–∏–±–∫–∞',
        success: '–£—Å–ø–µ—à–Ω–æ',
        warning: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
        info: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
      },
      game: {
        title: 'GameIDE - –°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä',
        subtitle: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ HTML5 –∏–≥—Ä—ã —Å –ø–æ–º–æ—â—å—é –ò–ò',
        start: '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
        pause: '–ü–∞—É–∑–∞',
        resume: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
        restart: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
        over: '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞',
        score: '–û—á–∫–∏: {score}',
        level: '–£—Ä–æ–≤–µ–Ω—å {level}',
        lives: {
          one: '{count} –∂–∏–∑–Ω—å',
          few: '{count} –∂–∏–∑–Ω–∏',
          many: '{count} –∂–∏–∑–Ω–µ–π'
        },
        coins: {
          one: '{count} –º–æ–Ω–µ—Ç–∞',
          few: '{count} –º–æ–Ω–µ—Ç—ã',
          many: '{count} –º–æ–Ω–µ—Ç'
        },
        time: '–í—Ä–µ–º—è: {time}',
        best: '–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}',
        newRecord: '–ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!',
        tryAgain: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑',
        mainMenu: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
      },
      ui: {
        create: '–°–æ–∑–¥–∞—Ç—å',
        newGame: '–ù–æ–≤–∞—è –∏–≥—Ä–∞',
        generateGame: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É',
        gameTitle: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã',
        gameDescription: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã',
        gameType: '–¢–∏–ø –∏–≥—Ä—ã',
        platformer: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä',
        arcade: '–ê—Ä–∫–∞–¥–∞',
        puzzle: '–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞',
        rpg: '–†–ü–ì',
        strategy: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
        sports: '–°–ø–æ—Ä—Ç',
        racing: '–ì–æ–Ω–∫–∏',
        shooter: '–®—É—Ç–µ—Ä',
        adventure: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ',
        simulation: '–°–∏–º—É–ª—è—Ç–æ—Ä',
        generateWithAI: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ò–ò',
        chooseAI: '–í—ã–±–µ—Ä–∏—Ç–µ –ò–ò',
        deepseek: 'DeepSeek (–ö–æ–¥ –∏–≥—Ä)',
        openai: 'OpenAI (–ì—Ä–∞—Ñ–∏–∫–∞)',
        claude: 'Claude (–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)',
        preview: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
        download: '–°–∫–∞—á–∞—Ç—å',
        share: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
        publish: '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
        analytics: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
        leaderboard: '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤',
        achievements: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
        statistics: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
      },
      ad: {
        reward: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É –∑–∞ –Ω–∞–≥—Ä–∞–¥—É',
        continue: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è',
        extraLife: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å',
        doubleCoins: '–£–¥–≤–æ–∏—Ç—å –º–æ–Ω–µ—Ç—ã',
        powerUp: '–£—Å–∏–ª–µ–Ω–∏–µ',
        noThanks: '–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ',
        watchAd: '–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É',
        skipAd: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É',
        adLoading: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–ª–∞–º—ã...',
        adError: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–ª–∞–º—ã'
      },
      achievements: {
        title: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
        subtitle: '–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ GameIDE',
        loading: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...',
        secretAchievement: '–°–µ–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
        secretDescription: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
        progress: '–ü—Ä–æ–≥—Ä–µ—Å—Å',
        complete: '–∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        days: '–¥–Ω–µ–π',
        unlockedOn: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
        share: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
        viewDetails: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
        linkCopied: '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!',
        moreNotifications: '–±–æ–ª—å—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        resultsFound: '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ',
        noResults: '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        tryDifferentFilters: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞',
        unlocked: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
        locked: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
        points: '–û—á–∫–∏: {points}',
        
        // Categories
        category: {
          creation: '–°–æ–∑–¥–∞–Ω–∏–µ',
          mastery: '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
          social: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
          monetization: '–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è',
          exploration: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
          special: '–û—Å–æ–±—ã–µ'
        },

        // Difficulties
        difficulty: {
          bronze: '–ë—Ä–æ–Ω–∑–∞',
          silver: '–°–µ—Ä–µ–±—Ä–æ',
          gold: '–ó–æ–ª–æ—Ç–æ',
          platinum: '–ü–ª–∞—Ç–∏–Ω–∞',
          legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
        },

        // Rewards
        rewards: {
          title: '–ù–∞–≥—Ä–∞–¥—ã',
          points: '–æ—á–∫–æ–≤',
          currency: '–º–æ–Ω–µ—Ç',
          premiumDays: '–¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º',
          discount: '—Å–∫–∏–¥–∫–∞'
        },

        // Stats
        stats: {
          title: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
          points: '–û—á–∫–∏',
          unlocked: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
          completion: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ',
          streak: '–°–µ—Ä–∏—è',
          overallProgress: '–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å'
        },

        // Filters
        filters: {
          title: '–§–∏–ª—å—Ç—Ä—ã',
          search: '–ü–æ–∏—Å–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...',
          category: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
          allCategories: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
          difficulty: '–°–ª–æ–∂–Ω–æ—Å—Ç—å',
          allDifficulties: '–í—Å–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
          sortBy: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å',
          byProgress: '–ü–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É',
          byDifficulty: '–ü–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
          byCategory: '–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
          byDate: '–ü–æ –¥–∞—Ç–µ',
          showSecrets: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ'
        },

        // Sample achievements
        firstWin: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞',
        firstWinDesc: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
        collector: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
        collectorDesc: '–°–æ–±–µ—Ä–∏—Ç–µ 100 –º–æ–Ω–µ—Ç',
        speedRunner: '–°–ø–∏–¥—Ä–∞–Ω–Ω–µ—Ä',
        speedRunnerDesc: '–ü—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥',
        persistent: '–ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π',
        persistentDesc: '–°—ã–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä',
        master: '–ú–∞—Å—Ç–µ—Ä',
        masterDesc: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è'
      },

      // Leaderboards
      leaderboards: {
        title: '–õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã',
        subtitle: '–°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –ª—É—á—à–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏',
        loading: '–ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤...',
        updating: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...',
        export: '–≠–∫—Å–ø–æ—Ä—Ç',
        selectLeaderboard: '–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥',
        filters: '–§–∏–ª—å—Ç—Ä—ã',
        searchPlaceholder: '–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤...',
        region: '–†–µ–≥–∏–æ–Ω',
        allRegions: '–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã',
        levelRange: '–î–∏–∞–ø–∞–∑–æ–Ω —É—Ä–æ–≤–Ω–µ–π',
        friendsOnly: '–¢–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è',
        onlineOnly: '–¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω',
        yourStats: '–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        yourRank: '–í–∞—à —Ä–∞–Ω–≥',
        yourScore: '–í–∞—à —Å—á–µ—Ç',
        percentile: '–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å',
        progressToTop10: '–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Ç–æ–ø-10',
        totalPlayers: '–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤',
        topScore: '–õ—É—á—à–∏–π —Å—á–µ—Ç',
        averageScore: '–°—Ä–µ–¥–Ω–∏–π —Å—á–µ—Ç',
        participation: '–£—á–∞—Å—Ç–∏–µ',
        lastUpdate: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
        noPlayers: '–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤',
        noPlayersDescription: '–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º –≤ —ç—Ç–æ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ!',
        
        // Player card
        new: '–ù–æ–≤–∏—á–æ–∫',
        friend: '–î—Ä—É–≥',
        mutualFriends: '–æ–±—â–∏—Ö –¥—Ä—É–∑–µ–π',
        level: '–£—Ä–æ–≤–µ–Ω—å',
        gamesPlayed: '–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ',
        achievements: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
        playTime: '–í—Ä–µ–º—è –∏–≥—Ä—ã',
        joined: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è',
        today: '–°–µ–≥–æ–¥–Ω—è',
        yesterday: '–í—á–µ—Ä–∞',
        daysAgo: '–¥–Ω–µ–π –Ω–∞–∑–∞–¥',
        points: '–æ—á–∫–æ–≤',
        
        // Actions
        challenge: '–í—ã–∑–æ–≤',
        addFriend: '–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è',
        challengeSent: '–í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        challengeFailed: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤',
        friendRequestSent: '–ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        viewingProfile: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è',
        
        // Categories
        categories: {
          arcade: '–ê—Ä–∫–∞–¥–∞',
          puzzle: '–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏',
          strategy: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
          action: '–≠–∫—à–Ω',
          all: '–í—Å–µ'
        },
        
        // Periods
        periods: {
          daily: '–ó–∞ –¥–µ–Ω—å',
          weekly: '–ó–∞ –Ω–µ–¥–µ–ª—é',
          monthly: '–ó–∞ –º–µ—Å—è—Ü',
          all_time: '–í—Å—ë –≤—Ä–µ–º—è'
        },
        
        // Badges
        badges: {
          champion: '–ß–µ–º–ø–∏–æ–Ω',
          expert: '–≠–∫—Å–ø–µ—Ä—Ç',
          risingStar: '–í–æ—Å—Ö–æ–¥—è—â–∞—è –∑–≤–µ–∑–¥–∞',
          veteran: '–í–µ—Ç–µ—Ä–∞–Ω'
        }
      },
      errors: {
        networkError: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
        serverError: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        notFound: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
        unauthorized: '–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        forbidden: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
        validation: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        gameNotFound: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        aiServiceUnavailable: '–ò–ò —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        generationFailed: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        uploadFailed: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
        saveFailed: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
        loadFailed: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
        connectionLost: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ',
        tryAgain: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
      }
    };
  }

  private getEnglishTranslations(): Translation {
    return {
      common: {
        yes: 'Yes',
        no: 'No',
        ok: 'OK',
        cancel: 'Cancel',
        save: 'Save',
        load: 'Load',
        delete: 'Delete',
        edit: 'Edit',
        close: 'Close',
        back: 'Back',
        next: 'Next',
        previous: 'Previous',
        continue: 'Continue',
        settings: 'Settings',
        help: 'Help',
        about: 'About',
        loading: 'Loading...',
        error: 'Error',
        success: 'Success',
        warning: 'Warning',
        info: 'Information'
      },
      game: {
        title: 'GameIDE - Game Creator',
        subtitle: 'Create HTML5 games with AI',
        start: 'Start Game',
        pause: 'Pause',
        resume: 'Resume',
        restart: 'Restart',
        over: 'Game Over',
        score: 'Score: {score}',
        level: 'Level {level}',
        lives: {
          one: '{count} life',
          other: '{count} lives'
        },
        coins: {
          one: '{count} coin',
          other: '{count} coins'
        },
        time: 'Time: {time}',
        best: 'Best: {score}',
        newRecord: 'New Record!',
        tryAgain: 'Try Again',
        mainMenu: 'Main Menu'
      },
      ui: {
        create: 'Create',
        newGame: 'New Game',
        generateGame: 'Generate Game',
        gameTitle: 'Game Title',
        gameDescription: 'Game Description',
        gameType: 'Game Type',
        platformer: 'Platformer',
        arcade: 'Arcade',
        puzzle: 'Puzzle',
        rpg: 'RPG',
        strategy: 'Strategy',
        sports: 'Sports',
        racing: 'Racing',
        shooter: 'Shooter',
        adventure: 'Adventure',
        simulation: 'Simulation',
        generateWithAI: 'Generate with AI',
        chooseAI: 'Choose AI',
        deepseek: 'DeepSeek (Game Code)',
        openai: 'OpenAI (Graphics)',
        claude: 'Claude (Architecture)',
        preview: 'Preview',
        download: 'Download',
        share: 'Share',
        publish: 'Publish',
        analytics: 'Analytics',
        leaderboard: 'Leaderboard',
        achievements: 'Achievements',
        statistics: 'Statistics'
      },
      ad: {
        reward: 'Watch ad for reward',
        continue: 'Watch ad to continue',
        extraLife: 'Extra Life',
        doubleCoins: 'Double Coins',
        powerUp: 'Power Up',
        noThanks: 'No Thanks',
        watchAd: 'Watch Ad',
        skipAd: 'Skip Ad',
        adLoading: 'Loading ad...',
        adError: 'Ad loading error'
      },
      achievements: {
        title: 'Achievements',
        unlocked: 'Unlocked!',
        locked: 'Locked',
        progress: 'Progress: {current}/{total}',
        points: 'Points: {points}',
        firstWin: 'First Victory',
        firstWinDesc: 'Win your first game',
        collector: 'Collector',
        collectorDesc: 'Collect 100 coins',
        speedRunner: 'Speed Runner',
        speedRunnerDesc: 'Complete level in 30 seconds',
        persistent: 'Persistent',
        persistentDesc: 'Play 10 games',
        master: 'Master',
        masterDesc: 'Reach level 10'
      },
      errors: {
        networkError: 'Network Error',
        serverError: 'Server Error',
        notFound: 'Not Found',
        unauthorized: 'Unauthorized',
        forbidden: 'Forbidden',
        validation: 'Validation Error',
        gameNotFound: 'Game Not Found',
        aiServiceUnavailable: 'AI Service Unavailable',
        generationFailed: 'Generation Failed',
        uploadFailed: 'Upload Failed',
        saveFailed: 'Save Failed',
        loadFailed: 'Load Failed',
        connectionLost: 'Connection Lost',
        tryAgain: 'Try Again'
      }
    };
  }

  private getTurkishTranslations(): Translation {
    return {
      common: {
        yes: 'Evet',
        no: 'Hayƒ±r',
        ok: 'Tamam',
        cancel: 'ƒ∞ptal',
        save: 'Kaydet',
        load: 'Y√ºkle',
        delete: 'Sil',
        edit: 'D√ºzenle',
        close: 'Kapat',
        back: 'Geri',
        next: 'ƒ∞leri',
        previous: '√ñnceki',
        continue: 'Devam Et',
        settings: 'Ayarlar',
        help: 'Yardƒ±m',
        about: 'Hakkƒ±nda',
        loading: 'Y√ºkleniyor...',
        error: 'Hata',
        success: 'Ba≈üarƒ±lƒ±',
        warning: 'Uyarƒ±',
        info: 'Bilgi'
      },
      game: {
        title: 'GameIDE - Oyun Yaratƒ±cƒ±sƒ±',
        subtitle: 'AI ile HTML5 oyunlarƒ± olu≈üturun',
        start: 'Oyunu Ba≈ülat',
        pause: 'Duraklat',
        resume: 'Devam Et',
        restart: 'Yeniden Ba≈ülat',
        over: 'Oyun Bitti',
        score: 'Puan: {score}',
        level: 'Seviye {level}',
        lives: {
          other: '{count} can'
        },
        coins: {
          other: '{count} madeni para'
        },
        time: 'S√ºre: {time}',
        best: 'En ƒ∞yi: {score}',
        newRecord: 'Yeni Rekor!',
        tryAgain: 'Tekrar Dene',
        mainMenu: 'Ana Men√º'
      },
      ui: {
        create: 'Olu≈ütur',
        newGame: 'Yeni Oyun',
        generateGame: 'Oyun Olu≈ütur',
        gameTitle: 'Oyun Ba≈ülƒ±ƒüƒ±',
        gameDescription: 'Oyun A√ßƒ±klamasƒ±',
        gameType: 'Oyun T√ºr√º',
        platformer: 'Platform Oyunu',
        arcade: 'Arcade',
        puzzle: 'Bulmaca',
        rpg: 'RPG',
        strategy: 'Strateji',
        sports: 'Spor',
        racing: 'Yarƒ±≈ü',
        shooter: 'Ni≈üancƒ±',
        adventure: 'Macera',
        simulation: 'Sim√ºlasyon',
        generateWithAI: 'AI ile Olu≈ütur',
        chooseAI: 'AI Se√ß',
        deepseek: 'DeepSeek (Oyun Kodu)',
        openai: 'OpenAI (Grafikler)',
        claude: 'Claude (Mimari)',
        preview: '√ñnizleme',
        download: 'ƒ∞ndir',
        share: 'Payla≈ü',
        publish: 'Yayƒ±nla',
        analytics: 'Analitik',
        leaderboard: 'Lider Tablosu',
        achievements: 'Ba≈üarƒ±mlar',
        statistics: 'ƒ∞statistikler'
      },
      ad: {
        reward: '√ñd√ºl i√ßin reklam izle',
        continue: 'Devam etmek i√ßin reklam izle',
        extraLife: 'Ekstra Can',
        doubleCoins: '√áifte Para',
        powerUp: 'G√º√ßlendirici',
        noThanks: 'Hayƒ±r Te≈üekk√ºrler',
        watchAd: 'Reklam ƒ∞zle',
        skipAd: 'Reklamƒ± Ge√ß',
        adLoading: 'Reklam y√ºkleniyor...',
        adError: 'Reklam y√ºkleme hatasƒ±'
      },
      achievements: {
        title: 'Ba≈üarƒ±mlar',
        unlocked: 'Kilidi A√ßƒ±ldƒ±!',
        locked: 'Kilitli',
        progress: 'ƒ∞lerleme: {current}/{total}',
        points: 'Puan: {points}',
        firstWin: 'ƒ∞lk Zafer',
        firstWinDesc: 'ƒ∞lk oyununuzu kazanƒ±n',
        collector: 'Koleksiyoncu',
        collectorDesc: '100 madeni para toplayƒ±n',
        speedRunner: 'Hƒ±z Ko≈üucusu',
        speedRunnerDesc: 'Seviyeyi 30 saniyede tamamlayƒ±n',
        persistent: 'Azimli',
        persistentDesc: '10 oyun oynayƒ±n',
        master: 'Usta',
        masterDesc: '10. seviyeye ula≈üƒ±n'
      },
      errors: {
        networkError: 'Aƒü Hatasƒ±',
        serverError: 'Sunucu Hatasƒ±',
        notFound: 'Bulunamadƒ±',
        unauthorized: 'Yetkisiz',
        forbidden: 'Yasak',
        validation: 'Doƒürulama Hatasƒ±',
        gameNotFound: 'Oyun Bulunamadƒ±',
        aiServiceUnavailable: 'AI Hizmeti Kullanƒ±lamƒ±yor',
        generationFailed: 'Olu≈üturma Ba≈üarƒ±sƒ±z',
        uploadFailed: 'Y√ºkleme Ba≈üarƒ±sƒ±z',
        saveFailed: 'Kaydetme Ba≈üarƒ±sƒ±z',
        loadFailed: 'Y√ºkleme Ba≈üarƒ±sƒ±z',
        connectionLost: 'Baƒülantƒ± Kesildi',
        tryAgain: 'Tekrar Deneyin'
      }
    };
  }

  private getUkrainianTranslations(): Translation {
    return {
      common: {
        yes: '–¢–∞–∫',
        no: '–ù—ñ',
        ok: 'OK',
        cancel: '–°–∫–∞—Å—É–≤–∞—Ç–∏',
        save: '–ó–±–µ—Ä–µ–≥—Ç–∏',
        load: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏',
        delete: '–í–∏–¥–∞–ª–∏—Ç–∏',
        edit: '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏',
        close: '–ó–∞–∫—Ä–∏—Ç–∏',
        back: '–ù–∞–∑–∞–¥',
        next: '–î–∞–ª—ñ',
        previous: '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π',
        continue: '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏',
        settings: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
        help: '–î–æ–ø–æ–º–æ–≥–∞',
        about: '–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É',
        loading: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...',
        error: '–ü–æ–º–∏–ª–∫–∞',
        success: '–£—Å–ø—ñ—à–Ω–æ',
        warning: '–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è',
        info: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'
      },
      game: {
        title: 'GameIDE - –¢–≤–æ—Ä–µ—Ü—å —ñ–≥–æ—Ä',
        subtitle: '–°—Ç–≤–æ—Ä—é–π—Ç–µ HTML5 —ñ–≥—Ä–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü',
        start: '–ü–æ—á–∞—Ç–∏ –≥—Ä—É',
        pause: '–ü–∞—É–∑–∞',
        resume: '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏',
        restart: '–ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É',
        over: '–ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞',
        score: '–û—á–∫–∏: {score}',
        level: '–†—ñ–≤–µ–Ω—å {level}',
        lives: {
          one: '{count} –∂–∏—Ç—Ç—è',
          few: '{count} –∂–∏—Ç—Ç—è',
          many: '{count} –∂–∏—Ç—Ç—ñ–≤'
        },
        coins: {
          one: '{count} –º–æ–Ω–µ—Ç–∞',
          few: '{count} –º–æ–Ω–µ—Ç–∏',
          many: '{count} –º–æ–Ω–µ—Ç'
        },
        time: '–ß–∞—Å: {time}',
        best: '–ö—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}',
        newRecord: '–ù–æ–≤–∏–π —Ä–µ–∫–æ—Ä–¥!',
        tryAgain: '–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑',
        mainMenu: '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'
      }
      // ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ
    };
  }

  private getBelarusianTranslations(): Translation {
    return {
      common: {
        yes: '–¢–∞–∫',
        no: '–ù–µ',
        ok: 'OK',
        cancel: '–°–∫–∞—Å–∞–≤–∞—Ü—å',
        save: '–ó–∞—Ö–∞–≤–∞—Ü—å',
        load: '–ó–∞–≥—Ä—É–∑—ñ—Ü—å',
        delete: '–í—ã–¥–∞–ª—ñ—Ü—å',
        edit: '–†—ç–¥–∞–≥–∞–≤–∞—Ü—å',
        close: '–ó–∞—á—ã–Ω—ñ—Ü—å',
        back: '–ù–∞–∑–∞–¥',
        next: '–î–∞–ª–µ–π',
        previous: '–ü–∞–ø—è—Ä—ç–¥–Ω—ñ',
        continue: '–ü—Ä–∞—Ü—è–≥–Ω—É—Ü—å',
        settings: '–ù–∞–ª–∞–¥—ã',
        help: '–î–∞–ø–∞–º–æ–≥–∞',
        about: '–ü—Ä–∞ –ø—Ä–∞–≥—Ä–∞–º—É',
        loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
        error: '–ü–∞–º—ã–ª–∫–∞',
        success: '–ü–∞—Å–ø—è—Ö–æ–≤–∞',
        warning: '–ü–∞–ø—è—Ä—ç–¥–∂–∞–Ω–Ω–µ',
        info: '–Ü–Ω—Ñ–∞—Ä–º–∞—Ü—ã—è'
      }
      // ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ
    };
  }

  private getKazakhTranslations(): Translation {
    return {
      common: {
        yes: '–ò”ô',
        no: '–ñ–æ“õ',
        ok: '–ñ–∞—Ä–∞–π–¥—ã',
        cancel: '–ë–æ–ª–¥—ã—Ä–º–∞—É',
        save: '–°–∞“õ—Ç–∞—É',
        load: '–ñ“Ø–∫—Ç–µ—É',
        delete: '–ñ–æ—é',
        edit: '”®“£–¥–µ—É',
        close: '–ñ–∞–±—É',
        back: '–ê—Ä—Ç“õ–∞',
        next: '–ö–µ–ª–µ—Å—ñ',
        previous: '–ê–ª–¥—ã“£“ì—ã',
        continue: '–ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É',
        settings: '–ë–∞–ø—Ç–∞—É–ª–∞—Ä',
        help: '–ö”©–º–µ–∫',
        about: '–ë–∞“ì–¥–∞—Ä–ª–∞–º–∞ —Ç—É—Ä–∞–ª—ã',
        loading: '–ñ“Ø–∫—Ç–µ–ª—É–¥–µ...',
        error: '“ö–∞—Ç–µ',
        success: '–°”ô—Ç—Ç—ñ',
        warning: '–ï—Å–∫–µ—Ä—Ç—É',
        info: '–ê“õ–ø–∞—Ä–∞—Ç'
      }
      // ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
   */
  public getSupportedLanguages(): LanguageData[] {
    return Array.from(this.languages.values());
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∞ –ø–æ –∫–æ–¥—É
   */
  public getLanguage(code: string): LanguageData | null {
    return this.languages.get(code) || null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É
   */
  public getTranslation(
    languageCode: string, 
    key: string, 
    params: Record<string, any> = {}
  ): string {
    const language = this.languages.get(languageCode);
    if (!language) {
      // Fallback –∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É
      return this.getTranslation(this.config.fallbackLanguage, key, params);
    }

    const keys = key.split('.');
    let translation: any = language.translations;

    // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º
    for (const k of keys) {
      translation = translation?.[k];
      if (!translation) break;
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if (!translation && languageCode !== this.config.fallbackLanguage) {
      return this.getTranslation(this.config.fallbackLanguage, key, params);
    }

    if (typeof translation === 'string') {
      return this.interpolate(translation, params);
    }

    return key; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
   */
  public getPlural(
    languageCode: string,
    key: string,
    count: number,
    params: Record<string, any> = {}
  ): string {
    const language = this.languages.get(languageCode);
    if (!language || !language.pluralRules) {
      return this.getTranslation(languageCode, key, { count, ...params });
    }

    const form = language.pluralRules(count);
    const pluralKey = `${key}.${form}`;
    
    return this.getTranslation(languageCode, pluralKey, { count, ...params });
  }

  /**
   * –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
   */
  private interpolate(str: string, params: Record<string, any>): string {
    return str.replace(/\{(\w+)\}/g, (match, param) => {
      return params[param] !== undefined ? params[param].toString() : match;
    });
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public detectUserLanguage(acceptLanguage?: string): string {
    if (acceptLanguage) {
      // –ü–∞—Ä—Å–∏–º Accept-Language –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const languages = acceptLanguage
        .split(',')
        .map(lang => lang.split(';')[0].trim().toLowerCase())
        .map(lang => lang.split('-')[0]); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å (ru-RU -> ru)

      for (const lang of languages) {
        if (this.config.supportedLanguages.includes(lang)) {
          return lang;
        }
      }
    }

    return this.config.defaultLanguage;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
   */
  public getAllTranslations(languageCode: string): Translation | null {
    const language = this.languages.get(languageCode);
    return language ? language.translations : null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –Ω–µ–π–º—Å–ø–µ–π—Å—É
   */
  public getNamespaceTranslations(
    languageCode: string, 
    namespace: string
  ): Translation | null {
    const translations = this.getAllTranslations(languageCode);
    return translations && translations[namespace] ? translations[namespace] as Translation : null;
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã
   */
  public updateTranslations(
    languageCode: string, 
    namespace: string, 
    translations: Translation
  ): boolean {
    const language = this.languages.get(languageCode);
    if (!language) return false;

    if (!language.translations[namespace]) {
      language.translations[namespace] = {};
    }

    language.translations[namespace] = {
      ...language.translations[namespace] as Translation,
      ...translations
    };

    return true;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ JSON
   */
  public exportTranslations(languageCode?: string): string {
    if (languageCode) {
      const language = this.languages.get(languageCode);
      return JSON.stringify(language?.translations || {}, null, 2);
    }

    const allTranslations: Record<string, Translation> = {};
    for (const [code, language] of this.languages) {
      allTranslations[code] = language.translations;
    }

    return JSON.stringify(allTranslations, null, 2);
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ JSON
   */
  public importTranslations(data: string): boolean {
    try {
      const translations = JSON.parse(data);
      
      for (const [languageCode, languageTranslations] of Object.entries(translations)) {
        const language = this.languages.get(languageCode);
        if (language && typeof languageTranslations === 'object') {
          language.translations = languageTranslations as Translation;
        }
      }

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const localizationService = new LocalizationService(); 
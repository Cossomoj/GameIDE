import fs from 'fs/promises';
import path from 'path';
import config from '@/config';
import { LoggerService } from './logger';
import { ValidationResult, ValidationError, ValidationWarning } from '@/types';

export class YandexValidator {
  private logger: LoggerService;

  constructor() {
    this.logger = new LoggerService();
  }

  public async validateGame(gamePath: string): Promise<ValidationResult> {
    const errors: ValidationError[] = [];
    const warnings: ValidationWarning[] = [];

    try {
      this.logger.info(`üîç –ù–∞—á–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–≥—Ä—ã: ${gamePath}`);

      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
      await this.validateSize(gamePath, errors, warnings);

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      await this.validateRequiredFiles(gamePath, errors, warnings);

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —Ñ–∞–π–ª–∞
      await this.validateHTML(gamePath, errors, warnings);

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript –∫–æ–¥–∞
      await this.validateJavaScript(gamePath, errors, warnings);

      // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–µ—Ç–æ–≤
      await this.validateAssets(gamePath, errors, warnings);

      // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Yandex SDK
      await this.validateYandexSDK(gamePath, errors, warnings);

      // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      await this.validateSecurity(gamePath, errors, warnings);

      const isValid = errors.length === 0;

      this.logger.info(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${isValid ? '–£–°–ü–ï–®–ù–û' : '–° –û–®–ò–ë–ö–ê–ú–ò'}`, {
        errors: errors.length,
        warnings: warnings.length,
      });

      return {
        isValid,
        errors,
        warnings,
      };

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
      errors.push({
        code: 'VALIDATION_ERROR',
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        severity: 'error',
      });

      return {
        isValid: false,
        errors,
        warnings,
      };
    }
  }

  private async validateSize(
    gamePath: string,
    errors: ValidationError[],
    warnings: ValidationWarning[]
  ): Promise<void> {
    try {
      const totalSize = await this.calculateDirectorySize(gamePath);
      
      if (totalSize > config.yandexGames.maxSize) {
        errors.push({
          code: 'SIZE_EXCEEDED',
          message: `–†–∞–∑–º–µ—Ä –∏–≥—Ä—ã (${this.formatSize(totalSize)}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π (${this.formatSize(config.yandexGames.maxSize)})`,
          severity: 'error',
        });
      } else if (totalSize > config.yandexGames.targetSize) {
        warnings.push({
          code: 'SIZE_WARNING',
          message: `–†–∞–∑–º–µ—Ä –∏–≥—Ä—ã (${this.formatSize(totalSize)}) –±–æ–ª—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ (${this.formatSize(config.yandexGames.targetSize)})`,
          suggestion: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–µ—Ç–æ–≤',
        });
      }

      this.logger.info(`üìè –†–∞–∑–º–µ—Ä –∏–≥—Ä—ã: ${this.formatSize(totalSize)}`);
    } catch (error) {
      errors.push({
        code: 'SIZE_CHECK_FAILED',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–≥—Ä—ã',
        severity: 'error',
      });
    }
  }

  private async validateRequiredFiles(
    gamePath: string,
    errors: ValidationError[],
    warnings: ValidationWarning[]
  ): Promise<void> {
    for (const requiredFile of config.yandexGames.requiredFiles) {
      const filePath = path.join(gamePath, requiredFile);
      
      try {
        await fs.access(filePath);
        this.logger.debug(`‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${requiredFile}`);
      } catch {
        errors.push({
          code: 'MISSING_REQUIRED_FILE',
          message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${requiredFile}`,
          severity: 'error',
          file: requiredFile,
        });
      }
    }
  }

  private async validateHTML(
    gamePath: string,
    errors: ValidationError[],
    warnings: ValidationWarning[]
  ): Promise<void> {
    const htmlPath = path.join(gamePath, 'index.html');
    
    try {
      const htmlContent = await fs.readFile(htmlPath, 'utf-8');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8
      if (!htmlContent.includes('charset="UTF-8"') && !htmlContent.includes("charset='UTF-8'")) {
        warnings.push({
          code: 'MISSING_UTF8',
          message: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8',
          suggestion: '–î–æ–±–∞–≤—å—Ç–µ <meta charset="UTF-8"> –≤ <head>',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      if (!htmlContent.includes('viewport')) {
        warnings.push({
          code: 'MISSING_VIEWPORT',
          message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç meta viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
          suggestion: '–î–æ–±–∞–≤—å—Ç–µ <meta name="viewport" content="width=device-width, initial-scale=1.0">',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Yandex SDK
      if (!htmlContent.includes('yandex.ru/games/sdk')) {
        errors.push({
          code: 'MISSING_YANDEX_SDK',
          message: '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω Yandex Games SDK',
          severity: 'error',
          file: 'index.html',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –±–µ–∑ HTTPS
      const httpResources = htmlContent.match(/src=["']http:\/\/[^"']+["']/g);
      if (httpResources) {
        errors.push({
          code: 'HTTP_RESOURCES',
          message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–µ—Å—É—Ä—Å—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–µ –ø–æ HTTP (—Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS)',
          severity: 'error',
          file: 'index.html',
        });
      }

      this.logger.debug('‚úÖ HTML —Ñ–∞–π–ª –ø—Ä–æ—à–µ–ª –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é');
      
    } catch (error) {
      errors.push({
        code: 'HTML_READ_ERROR',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å HTML —Ñ–∞–π–ª',
        severity: 'error',
        file: 'index.html',
      });
    }
  }

  private async validateJavaScript(
    gamePath: string,
    errors: ValidationError[],
    warnings: ValidationWarning[]
  ): Promise<void> {
    try {
      const jsFiles = await this.findJavaScriptFiles(gamePath);
      
      for (const jsFile of jsFiles) {
        const content = await fs.readFile(jsFile, 'utf-8');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ eval() (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        if (content.includes('eval(')) {
          warnings.push({
            code: 'UNSAFE_EVAL',
            message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ eval() –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ',
            suggestion: '–ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è eval()',
          });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ console.log (–º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
        const consoleMatches = content.match(/console\.(log|warn|error)/g);
        if (consoleMatches && consoleMatches.length > 10) {
          warnings.push({
            code: 'EXCESSIVE_LOGGING',
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–Ω–æ–≥–æ –≤—ã–∑–æ–≤–æ–≤ console.*',
            suggestion: '–£–¥–∞–ª–∏—Ç–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ console.* –≤—ã–∑–æ–≤—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ',
          });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–∑–æ–≤—ã–µ –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        try {
          new Function(content);
        } catch (syntaxError) {
          errors.push({
            code: 'SYNTAX_ERROR',
            message: `–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ${path.relative(gamePath, jsFile)}`,
            severity: 'error',
            file: path.relative(gamePath, jsFile),
          });
        }
      }

      this.logger.debug(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${jsFiles.length} JavaScript —Ñ–∞–π–ª–æ–≤`);
      
    } catch (error) {
      warnings.push({
        code: 'JS_VALIDATION_ERROR',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å JavaScript —Ñ–∞–π–ª—ã',
      });
    }
  }

  private async validateAssets(
    gamePath: string,
    errors: ValidationError[],
    warnings: ValidationWarning[]
  ): Promise<void> {
    try {
      const assetsPath = path.join(gamePath, 'assets');
      
      try {
        await fs.access(assetsPath);
      } catch {
        warnings.push({
          code: 'NO_ASSETS_FOLDER',
          message: '–ü–∞–ø–∫–∞ assets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          suggestion: '–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É assets –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤',
        });
        return;
      }

      const assetFiles = await this.findAssetFiles(assetsPath);
      let totalAssetsSize = 0;

      for (const assetFile of assetFiles) {
        const stats = await fs.stat(assetFile);
        totalAssetsSize += stats.size;

        const ext = path.extname(assetFile).toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if (!config.yandexGames.supportedFormats.some(format => ext.includes(format))) {
          warnings.push({
            code: 'UNSUPPORTED_FORMAT',
            message: `–§–∞–π–ª ${path.relative(gamePath, assetFile)} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç`,
            suggestion: `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${config.yandexGames.supportedFormats.join(', ')}`,
          });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (stats.size > 5 * 1024 * 1024) { // 5MB
          warnings.push({
            code: 'LARGE_ASSET',
            message: `–§–∞–π–ª ${path.relative(gamePath, assetFile)} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${this.formatSize(stats.size)})`,
            suggestion: '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –∞—Å—Å–µ—Ç—ã',
          });
        }
      }

      this.logger.debug(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${assetFiles.length} —Ñ–∞–π–ª–æ–≤ –∞—Å—Å–µ—Ç–æ–≤, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${this.formatSize(totalAssetsSize)}`);
      
    } catch (error) {
      warnings.push({
        code: 'ASSETS_VALIDATION_ERROR',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Å—Å–µ—Ç—ã',
      });
    }
  }

  private async validateYandexSDK(
    gamePath: string,
    errors: ValidationError[],
    warnings: ValidationWarning[]
  ): Promise<void> {
    try {
      const jsFiles = await this.findJavaScriptFiles(gamePath);
      let sdkFound = false;
      
      for (const jsFile of jsFiles) {
        const content = await fs.readFile(jsFile, 'utf-8');
        
        if (content.includes('YaGames') || content.includes('ysdk')) {
          sdkFound = true;
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SDK
          if (!content.includes('YaGames.init()')) {
            warnings.push({
              code: 'SDK_NOT_INITIALIZED',
              message: 'Yandex Games SDK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
              suggestion: '–î–æ–±–∞–≤—å—Ç–µ await YaGames.init() –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã',
            });
          }

          break;
        }
      }

      if (!sdkFound) {
        errors.push({
          code: 'SDK_NOT_USED',
          message: 'Yandex Games SDK –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ',
          severity: 'error',
        });
      }

      this.logger.debug(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Yandex SDK: ${sdkFound ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
      
    } catch (error) {
      warnings.push({
        code: 'SDK_VALIDATION_ERROR',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Yandex SDK',
      });
    }
  }

  private async validateSecurity(
    gamePath: string,
    errors: ValidationError[],
    warnings: ValidationWarning[]
  ): Promise<void> {
    try {
      const jsFiles = await this.findJavaScriptFiles(gamePath);
      
      for (const jsFile of jsFiles) {
        const content = await fs.readFile(jsFile, 'utf-8');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const dangerousPatterns = [
          { pattern: /document\.write\s*\(/g, code: 'DOCUMENT_WRITE', message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ document.write –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ' },
          { pattern: /innerHTML\s*=\s*[^"'][^;]+/g, code: 'UNSAFE_INNERHTML', message: '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ innerHTML' },
          { pattern: /window\.open\s*\(/g, code: 'WINDOW_OPEN', message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ window.open –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ' },
        ];

        for (const { pattern, code, message } of dangerousPatterns) {
          if (pattern.test(content)) {
            warnings.push({
              code,
              message,
              suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã',
            });
          }
        }
      }

      this.logger.debug('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
    } catch (error) {
      warnings.push({
        code: 'SECURITY_VALIDATION_ERROR',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
      });
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private async calculateDirectorySize(dirPath: string): Promise<number> {
    let totalSize = 0;
    
    const items = await fs.readdir(dirPath, { withFileTypes: true });
    
    for (const item of items) {
      const itemPath = path.join(dirPath, item.name);
      
      if (item.isDirectory()) {
        totalSize += await this.calculateDirectorySize(itemPath);
      } else {
        const stats = await fs.stat(itemPath);
        totalSize += stats.size;
      }
    }
    
    return totalSize;
  }

  private async findJavaScriptFiles(dirPath: string): Promise<string[]> {
    const jsFiles: string[] = [];
    
    const items = await fs.readdir(dirPath, { withFileTypes: true });
    
    for (const item of items) {
      const itemPath = path.join(dirPath, item.name);
      
      if (item.isDirectory()) {
        jsFiles.push(...await this.findJavaScriptFiles(itemPath));
      } else if (path.extname(item.name).toLowerCase() === '.js') {
        jsFiles.push(itemPath);
      }
    }
    
    return jsFiles;
  }

  private async findAssetFiles(dirPath: string): Promise<string[]> {
    const assetFiles: string[] = [];
    const assetExtensions = ['.png', '.jpg', '.jpeg', '.webp', '.ogg', '.mp3', '.wav'];
    
    const items = await fs.readdir(dirPath, { withFileTypes: true });
    
    for (const item of items) {
      const itemPath = path.join(dirPath, item.name);
      
      if (item.isDirectory()) {
        assetFiles.push(...await this.findAssetFiles(itemPath));
      } else if (assetExtensions.includes(path.extname(item.name).toLowerCase())) {
        assetFiles.push(itemPath);
      }
    }
    
    return assetFiles;
  }

  private formatSize(bytes: number): string {
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 Bytes';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  }
} 
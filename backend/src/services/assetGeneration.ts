import { EventEmitter } from 'events';
import path from 'path';
import fs from 'fs/promises';
import sharp from 'sharp';
import { v4 as uuidv4 } from 'uuid';
import config from '@/config';
import { LoggerService } from './logger';
import { OpenAIService } from './ai/openai';
import { AssetGenerationResult, GameDesign, AssetRequirement } from '@/types';

export interface AssetOptimizationSettings {
  images: {
    format: 'auto' | 'png' | 'webp' | 'jpg';
    quality: number; // 0-100
    maxWidth: number;
    maxHeight: number;
    progressive: boolean;
    removeMetadata: boolean;
  };
  audio: {
    format: 'auto' | 'wav' | 'mp3' | 'ogg';
    bitrate: number; // kbps
    sampleRate: number;
    channels: 'mono' | 'stereo';
    normalize: boolean;
    removeMetadata: boolean;
  };
  general: {
    enableCompression: boolean;
    maxFileSize: number; // MB
    targetGameSize: number; // MB (–¥–ª—è Yandex Games)
  };
}

export interface AssetGenerationRequest {
  gameId: string;
  gameDesign: GameDesign;
  assets: AssetRequirement[];
  optimizationSettings?: AssetOptimizationSettings;
}

export interface AssetBundle {
  sprites: { [name: string]: Buffer };
  backgrounds: { [name: string]: Buffer };
  ui: { [name: string]: Buffer };
  sounds: { [name: string]: Buffer };
  music: { [name: string]: Buffer };
  metadata: {
    totalSize: number;
    assetCount: number;
    optimizationApplied: boolean;
    compressionRatio: number;
  };
}

export class AssetGenerationService extends EventEmitter {
  private logger: LoggerService;
  private openaiService: OpenAIService;
  private activeGenerations: Map<string, AssetGenerationRequest> = new Map();
  private generationProgress: Map<string, number> = new Map();

  constructor() {
    super();
    this.logger = new LoggerService();
    this.openaiService = new OpenAIService();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã
   */
  public async generateAssetBundle(
    request: AssetGenerationRequest,
    onProgress?: (progress: number, step: string, details?: any) => void
  ): Promise<AssetBundle> {
    const { gameId, gameDesign, assets, optimizationSettings } = request;
    
    this.activeGenerations.set(gameId, request);
    this.generationProgress.set(gameId, 0);

    this.logger.info(`üé® –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã ${gameId}`);
    this.emit('generation:started', { gameId, totalAssets: assets.length });

    try {
      const bundle: AssetBundle = {
        sprites: {},
        backgrounds: {},
        ui: {},
        sounds: {},
        music: {},
        metadata: {
          totalSize: 0,
          assetCount: 0,
          optimizationApplied: false,
          compressionRatio: 1
        }
      };

      let totalSteps = assets.length;
      let currentStep = 0;

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞—Å—Å–µ—Ç—ã –ø–æ —Ç–∏–ø–∞–º –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const assetGroups = this.groupAssetsByType(assets);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø—Ä–∞–π—Ç—ã
      if (assetGroups.sprites.length > 0) {
        onProgress?.(this.calculateProgress(currentStep, totalSteps), '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø—Ä–∞–π—Ç–æ–≤', { count: assetGroups.sprites.length });
        
        for (const spriteAsset of assetGroups.sprites) {
          const result = await this.generateSprite(spriteAsset, gameDesign);
          bundle.sprites[spriteAsset.name] = result.data;
          currentStep++;
          
          this.emit('asset:generated', { 
            gameId, 
            assetName: spriteAsset.name, 
            type: 'sprite',
            size: result.data.length 
          });
          
          onProgress?.(this.calculateProgress(currentStep, totalSteps), `–°–ø—Ä–∞–π—Ç: ${spriteAsset.name}`);
        }
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ–Ω—ã
      if (assetGroups.backgrounds.length > 0) {
        onProgress?.(this.calculateProgress(currentStep, totalSteps), '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤', { count: assetGroups.backgrounds.length });
        
        for (const bgAsset of assetGroups.backgrounds) {
          const result = await this.generateBackground(bgAsset, gameDesign);
          bundle.backgrounds[bgAsset.name] = result.data;
          currentStep++;
          
          this.emit('asset:generated', { 
            gameId, 
            assetName: bgAsset.name, 
            type: 'background',
            size: result.data.length 
          });
          
          onProgress?.(this.calculateProgress(currentStep, totalSteps), `–§–æ–Ω: ${bgAsset.name}`);
        }
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
      if (assetGroups.ui.length > 0) {
        onProgress?.(this.calculateProgress(currentStep, totalSteps), '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤', { count: assetGroups.ui.length });
        
        for (const uiAsset of assetGroups.ui) {
          const result = await this.generateUIElement(uiAsset, gameDesign);
          bundle.ui[uiAsset.name] = result.data;
          currentStep++;
          
          this.emit('asset:generated', { 
            gameId, 
            assetName: uiAsset.name, 
            type: 'ui',
            size: result.data.length 
          });
          
          onProgress?.(this.calculateProgress(currentStep, totalSteps), `UI: ${uiAsset.name}`);
        }
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–≤—É–∫–∏
      if (assetGroups.sounds.length > 0) {
        onProgress?.(this.calculateProgress(currentStep, totalSteps), '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤', { count: assetGroups.sounds.length });
        
        for (const soundAsset of assetGroups.sounds) {
          const result = await this.generateSoundEffect(soundAsset, gameDesign);
          bundle.sounds[soundAsset.name] = result.data;
          currentStep++;
          
          this.emit('asset:generated', { 
            gameId, 
            assetName: soundAsset.name, 
            type: 'sound',
            size: result.data.length 
          });
          
          onProgress?.(this.calculateProgress(currentStep, totalSteps), `–ó–≤—É–∫: ${soundAsset.name}`);
        }
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–∑—ã–∫—É
      if (assetGroups.music.length > 0) {
        onProgress?.(this.calculateProgress(currentStep, totalSteps), '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏', { count: assetGroups.music.length });
        
        for (const musicAsset of assetGroups.music) {
          const result = await this.generateMusic(musicAsset, gameDesign);
          bundle.music[musicAsset.name] = result.data;
          currentStep++;
          
          this.emit('asset:generated', { 
            gameId, 
            assetName: musicAsset.name, 
            type: 'music',
            size: result.data.length 
          });
          
          onProgress?.(this.calculateProgress(currentStep, totalSteps), `–ú—É–∑—ã–∫–∞: ${musicAsset.name}`);
        }
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      const originalSize = this.calculateBundleSize(bundle);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
      if (optimizationSettings?.general.enableCompression) {
        onProgress?.(90, '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞—Å—Å–µ—Ç–æ–≤');
        const optimizedBundle = await this.optimizeAssetBundle(bundle, optimizationSettings);
        const optimizedSize = this.calculateBundleSize(optimizedBundle);
        
        optimizedBundle.metadata = {
          totalSize: optimizedSize,
          assetCount: currentStep,
          optimizationApplied: true,
          compressionRatio: originalSize / optimizedSize
        };

        this.logger.info(`‚úÖ –ê—Å—Å–µ—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${this.formatSize(originalSize)} ‚Üí ${this.formatSize(optimizedSize)}`);
        
        onProgress?.(100, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        this.emit('generation:completed', { gameId, bundle: optimizedBundle });
        
        return optimizedBundle;
      } else {
        bundle.metadata = {
          totalSize: originalSize,
          assetCount: currentStep,
          optimizationApplied: false,
          compressionRatio: 1
        };

        onProgress?.(100, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        this.emit('generation:completed', { gameId, bundle });
        
        return bundle;
      }

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è ${gameId}:`, error);
      this.emit('generation:error', { gameId, error });
      throw error;
    } finally {
      this.activeGenerations.delete(gameId);
      this.generationProgress.delete(gameId);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–π—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
   */
  private async generateSprite(asset: AssetRequirement, gameDesign: GameDesign): Promise<AssetGenerationResult> {
    const prompt = this.createSpritePrompt(asset, gameDesign);
    
    return await this.openaiService.generateSprite(
      prompt,
      gameDesign.artStyle || 'pixel art',
      asset.dimensions || { width: 64, height: 64 }
    );
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
   */
  private async generateBackground(asset: AssetRequirement, gameDesign: GameDesign): Promise<AssetGenerationResult> {
    const prompt = this.createBackgroundPrompt(asset, gameDesign);
    
    return await this.openaiService.generateBackground(
      prompt,
      gameDesign.artStyle || 'cartoon'
    );
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç
   */
  private async generateUIElement(asset: AssetRequirement, gameDesign: GameDesign): Promise<AssetGenerationResult> {
    const prompt = this.createUIPrompt(asset, gameDesign);
    
    return await this.openaiService.generateUIElement(
      asset.name,
      gameDesign.artStyle || 'modern',
      prompt
    );
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
   */
  private async generateSoundEffect(asset: AssetRequirement, gameDesign: GameDesign): Promise<AssetGenerationResult> {
    const prompt = this.createSoundPrompt(asset, gameDesign);
    const duration = asset.duration || 1000;
    
    return await this.openaiService.generateSound(prompt, duration, 'sfx');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º—É–∑—ã–∫—É
   */
  private async generateMusic(asset: AssetRequirement, gameDesign: GameDesign): Promise<AssetGenerationResult> {
    const prompt = this.createMusicPrompt(asset, gameDesign);
    const duration = asset.duration || 30000; // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º—É–∑—ã–∫–∏
    
    return await this.openaiService.generateSound(prompt, duration, 'music');
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –∞—Å—Å–µ—Ç–æ–≤
   */
  private async optimizeAssetBundle(bundle: AssetBundle, settings: AssetOptimizationSettings): Promise<AssetBundle> {
    const optimizedBundle: AssetBundle = {
      sprites: {},
      backgrounds: {},
      ui: {},
      sounds: {},
      music: {},
      metadata: bundle.metadata
    };

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for (const [name, buffer] of Object.entries(bundle.sprites)) {
      optimizedBundle.sprites[name] = await this.optimizeImage(buffer, settings.images);
    }

    for (const [name, buffer] of Object.entries(bundle.backgrounds)) {
      optimizedBundle.backgrounds[name] = await this.optimizeImage(buffer, settings.images);
    }

    for (const [name, buffer] of Object.entries(bundle.ui)) {
      optimizedBundle.ui[name] = await this.optimizeImage(buffer, settings.images);
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    for (const [name, buffer] of Object.entries(bundle.sounds)) {
      optimizedBundle.sounds[name] = await this.optimizeAudio(buffer, settings.audio);
    }

    for (const [name, buffer] of Object.entries(bundle.music)) {
      optimizedBundle.music[name] = await this.optimizeAudio(buffer, settings.audio);
    }

    return optimizedBundle;
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  private async optimizeImage(buffer: Buffer, settings: AssetOptimizationSettings['images']): Promise<Buffer> {
    try {
      let processor = sharp(buffer);

      // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const { width, height } = await processor.metadata();
      if (width && height && (width > settings.maxWidth || height > settings.maxHeight)) {
        processor = processor.resize(settings.maxWidth, settings.maxHeight, {
          fit: 'inside',
          withoutEnlargement: true
        });
      }

      // –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (settings.removeMetadata) {
        processor = processor.withMetadata({});
      }

      // –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ –∫–∞—á–µ—Å—Ç–≤–æ
      switch (settings.format) {
        case 'webp':
          return await processor.webp({ quality: settings.quality }).toBuffer();
        case 'jpg':
          return await processor.jpeg({ 
            quality: settings.quality, 
            progressive: settings.progressive 
          }).toBuffer();
        case 'png':
          return await processor.png({ 
            quality: settings.quality,
            progressive: settings.progressive
          }).toBuffer();
        case 'auto':
        default:
          // –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          return await processor.webp({ quality: settings.quality }).toBuffer();
      }
    } catch (error) {
      this.logger.warn('–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return buffer;
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ (–∑–∞–≥–ª—É—à–∫–∞ - –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)
   */
  private async optimizeAudio(buffer: Buffer, settings: AssetOptimizationSettings['audio']): Promise<Buffer> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ffmpeg –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –±—É—Ñ–µ—Ä
    return buffer;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Yandex Games
   */
  public validateGameSize(bundle: AssetBundle): {
    valid: boolean;
    currentSize: number;
    maxSize: number;
    warnings: string[];
    suggestions: string[];
  } {
    const currentSize = bundle.metadata.totalSize;
    const maxSize = config.yandexGames.maxSize;
    const targetSize = config.yandexGames.targetSize;
    
    const warnings: string[] = [];
    const suggestions: string[] = [];

    if (currentSize > maxSize) {
      warnings.push(`–†–∞–∑–º–µ—Ä –∏–≥—Ä—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Yandex Games: ${this.formatSize(currentSize)} > ${this.formatSize(maxSize)}`);
      suggestions.push('–í–∫–ª—é—á–∏—Ç–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      suggestions.push('–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –∞—Å—Å–µ—Ç–æ–≤');
      suggestions.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç WebP –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    } else if (currentSize > targetSize) {
      warnings.push(`–†–∞–∑–º–µ—Ä –∏–≥—Ä—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π: ${this.formatSize(currentSize)} > ${this.formatSize(targetSize)}`);
      suggestions.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
    }

    return {
      valid: currentSize <= maxSize,
      currentSize,
      maxSize,
      warnings,
      suggestions
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–±–æ—Ä –∞—Å—Å–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
   */
  public async saveAssetBundle(gameId: string, bundle: AssetBundle, outputDir: string): Promise<string[]> {
    const savedFiles: string[] = [];
    
    try {
      await fs.mkdir(outputDir, { recursive: true });

      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
      const dirs = {
        sprites: path.join(outputDir, 'assets', 'sprites'),
        backgrounds: path.join(outputDir, 'assets', 'backgrounds'),
        ui: path.join(outputDir, 'assets', 'ui'),
        sounds: path.join(outputDir, 'assets', 'sounds'),
        music: path.join(outputDir, 'assets', 'music')
      };

      for (const dir of Object.values(dirs)) {
        await fs.mkdir(dir, { recursive: true });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–∞–π—Ç—ã
      for (const [name, buffer] of Object.entries(bundle.sprites)) {
        const filePath = path.join(dirs.sprites, `${name}.png`);
        await fs.writeFile(filePath, buffer);
        savedFiles.push(filePath);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ–Ω—ã
      for (const [name, buffer] of Object.entries(bundle.backgrounds)) {
        const filePath = path.join(dirs.backgrounds, `${name}.png`);
        await fs.writeFile(filePath, buffer);
        savedFiles.push(filePath);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
      for (const [name, buffer] of Object.entries(bundle.ui)) {
        const filePath = path.join(dirs.ui, `${name}.png`);
        await fs.writeFile(filePath, buffer);
        savedFiles.push(filePath);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–≤—É–∫–∏
      for (const [name, buffer] of Object.entries(bundle.sounds)) {
        const filePath = path.join(dirs.sounds, `${name}.wav`);
        await fs.writeFile(filePath, buffer);
        savedFiles.push(filePath);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º—É–∑—ã–∫—É
      for (const [name, buffer] of Object.entries(bundle.music)) {
        const filePath = path.join(dirs.music, `${name}.wav`);
        await fs.writeFile(filePath, buffer);
        savedFiles.push(filePath);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –∞—Å—Å–µ—Ç–æ–≤
      const manifest = {
        gameId,
        metadata: bundle.metadata,
        assets: {
          sprites: Object.keys(bundle.sprites),
          backgrounds: Object.keys(bundle.backgrounds),
          ui: Object.keys(bundle.ui),
          sounds: Object.keys(bundle.sounds),
          music: Object.keys(bundle.music)
        },
        generatedAt: new Date().toISOString()
      };

      const manifestPath = path.join(outputDir, 'asset-manifest.json');
      await fs.writeFile(manifestPath, JSON.stringify(manifest, null, 2));
      savedFiles.push(manifestPath);

      this.logger.info(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedFiles.length} —Ñ–∞–π–ª–æ–≤ –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã ${gameId}`);
      
      return savedFiles;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è ${gameId}:`, error);
      throw error;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private groupAssetsByType(assets: AssetRequirement[]): {
    sprites: AssetRequirement[];
    backgrounds: AssetRequirement[];
    ui: AssetRequirement[];
    sounds: AssetRequirement[];
    music: AssetRequirement[];
  } {
    return {
      sprites: assets.filter(a => a.type === 'sprite'),
      backgrounds: assets.filter(a => a.type === 'background'),
      ui: assets.filter(a => a.type === 'ui'),
      sounds: assets.filter(a => a.type === 'sound'),
      music: assets.filter(a => a.type === 'music')
    };
  }

  private calculateProgress(current: number, total: number): number {
    return Math.round((current / total) * 100);
  }

  private calculateBundleSize(bundle: AssetBundle): number {
    let size = 0;
    
    Object.values(bundle.sprites).forEach(buffer => size += buffer.length);
    Object.values(bundle.backgrounds).forEach(buffer => size += buffer.length);
    Object.values(bundle.ui).forEach(buffer => size += buffer.length);
    Object.values(bundle.sounds).forEach(buffer => size += buffer.length);
    Object.values(bundle.music).forEach(buffer => size += buffer.length);
    
    return size;
  }

  private formatSize(bytes: number): string {
    const units = ['B', 'KB', 'MB', 'GB'];
    let size = bytes;
    let unitIndex = 0;
    
    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex++;
    }
    
    return `${size.toFixed(2)} ${units[unitIndex]}`;
  }

  private createSpritePrompt(asset: AssetRequirement, gameDesign: GameDesign): string {
    return `
    ${asset.description}
    
    –ò–≥—Ä–∞: ${gameDesign.title}
    –ñ–∞–Ω—Ä: ${gameDesign.genre}
    –¢–µ–º–∞: ${gameDesign.theme}
    –°—Ç–∏–ª—å: ${gameDesign.artStyle}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–ø—Ä–∞–π—Ç—É:
    - –†–∞–∑–º–µ—Ä: ${asset.dimensions?.width || 64}x${asset.dimensions?.height || 64} –ø–∏–∫—Å–µ–ª–µ–π
    - –°—Ç–∏–ª—å: ${gameDesign.artStyle}
    - –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    - –ß–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã
    - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è ${gameDesign.genre} –∏–≥—Ä—ã
    - –Ø—Ä–∫–∏–µ, —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–ª–∏—á–∏–º—ã–µ —Ü–≤–µ—Ç–∞
    `.trim();
  }

  private createBackgroundPrompt(asset: AssetRequirement, gameDesign: GameDesign): string {
    return `
    ${asset.description}
    
    –ò–≥—Ä–∞: ${gameDesign.title}
    –ñ–∞–Ω—Ä: ${gameDesign.genre}
    –¢–µ–º–∞: ${gameDesign.theme}
    –°—Ç–∏–ª—å: ${gameDesign.artStyle}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ–Ω—É:
    - –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã
    - –°—Ç–∏–ª—å: ${gameDesign.artStyle}
    - –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    - –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è ${gameDesign.genre} –∏–≥—Ä—ã
    - –ë–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞
    - –°–æ–∑–¥–∞–µ—Ç –Ω—É–∂–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    `.trim();
  }

  private createUIPrompt(asset: AssetRequirement, gameDesign: GameDesign): string {
    return `
    UI —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–≥—Ä—ã: ${asset.description}
    
    –ò–≥—Ä–∞: ${gameDesign.title}
    –ñ–∞–Ω—Ä: ${gameDesign.genre}
    –°—Ç–∏–ª—å: ${gameDesign.artStyle}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –ß–µ—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –∏ –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    - –°—Ç–∏–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±—â–µ–º—É –¥–∏–∑–∞–π–Ω—É –∏–≥—Ä—ã
    - –•–æ—Ä–æ—à–æ —á–∏—Ç–∞–µ—Ç—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö —ç–∫—Ä–∞–Ω–∞
    - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω
    `.trim();
  }

  private createSoundPrompt(asset: AssetRequirement, gameDesign: GameDesign): string {
    return `
    –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–≥—Ä—ã: ${asset.description}
    
    –ò–≥—Ä–∞: ${gameDesign.title}
    –ñ–∞–Ω—Ä: ${gameDesign.genre}
    –¢–µ–º–∞: ${gameDesign.theme}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è ${gameDesign.genre} –∏–≥—Ä—ã
    - –ß–µ—Ç–∫–∏–π –∏ —Ä–∞–∑–ª–∏—á–∏–º—ã–π –∑–≤—É–∫
    - –ù–µ —Ä–∞–∑–¥—Ä–∞–∂–∞—é—â–∏–π –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
    - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ –∏–≥—Ä—ã
    `.trim();
  }

  private createMusicPrompt(asset: AssetRequirement, gameDesign: GameDesign): string {
    return `
    –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞ –¥–ª—è –∏–≥—Ä—ã: ${asset.description}
    
    –ò–≥—Ä–∞: ${gameDesign.title}
    –ñ–∞–Ω—Ä: ${gameDesign.genre}
    –¢–µ–º–∞: ${gameDesign.theme}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è
    - –°–æ–∑–¥–∞–µ—Ç –Ω—É–∂–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è ${gameDesign.genre}
    - –ù–µ –æ—Ç–≤–ª–µ–∫–∞–µ—Ç –æ—Ç –≥–µ–π–º–ø–ª–µ—è
    - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞—Ç–∏–∫–µ: ${gameDesign.theme}
    - –ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–º–ø –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    `.trim();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
   */
  public getActiveGenerations(): { gameId: string; progress: number }[] {
    const result: { gameId: string; progress: number }[] = [];
    
    for (const [gameId, progress] of this.generationProgress.entries()) {
      result.push({ gameId, progress });
    }
    
    return result;
  }

  /**
   * –û—Ç–º–µ–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—Å—Å–µ—Ç–æ–≤
   */
  public cancelGeneration(gameId: string): boolean {
    if (this.activeGenerations.has(gameId)) {
      this.activeGenerations.delete(gameId);
      this.generationProgress.delete(gameId);
      this.emit('generation:cancelled', { gameId });
      this.logger.info(`‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è ${gameId} –æ—Ç–º–µ–Ω–µ–Ω–∞`);
      return true;
    }
    return false;
  }
} 
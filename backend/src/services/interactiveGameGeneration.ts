import { v4 as uuidv4 } from 'uuid';
import { LoggerService } from './logger';
import { DeepSeekService } from './ai/deepseek';
import { OpenAIService } from './ai/openai';
import { GameGenerationPipeline } from './gameGeneration';
import {
  InteractiveGameSession,
  InteractiveGameStep,
  StepVariant,
  GenerateVariantsRequest,
  GenerateVariantsResponse
} from '../types/interactive';
import { GameDAO, InteractiveSessionDAO } from '../database';

const logger = new LoggerService();

// –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserPreferenceProfile {
  userId: string;
  preferredComplexity: 'simple' | 'medium' | 'complex';
  favoriteGenres: string[];
  preferredStyles: string[];
  sessionHistory: {
    totalSessions: number;
    completedSessions: number;
    averageStepTime: number;
    mostChosenVariants: string[];
  };
  adaptiveSettings: {
    suggestComplexity: boolean;
    customizePrompts: boolean;
    enablePersonalization: boolean;
  };
}

// –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
interface AdvancedGenerationContext {
  userProfile: UserPreferenceProfile;
  currentTrends: string[];
  seasonalFactors: string[];
  platformOptimizations: string[];
}

export class InteractiveGameGenerationService {
  private deepseek: DeepSeekService;
  private openai: OpenAIService;
  private gameDAO: GameDAO;
  private sessionDAO: InteractiveSessionDAO;
  private generationPipeline: GameGenerationPipeline;
  
  // –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
  private userProfiles: Map<string, UserPreferenceProfile> = new Map();
  private adaptiveVariantCache: Map<string, StepVariant[]> = new Map();

  constructor() {
    this.deepseek = new DeepSeekService();
    this.openai = new OpenAIService();
    this.gameDAO = new GameDAO();
    this.sessionDAO = new InteractiveSessionDAO();
    this.generationPipeline = new GameGenerationPipeline();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    this.initializeAdaptiveComponents();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
   */
  private async initializeAdaptiveComponents(): Promise<void> {
    logger.info('üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try {
      const sessions = await this.sessionDAO.getAllSessionsStatistics();
      this.buildUserProfiles(sessions);
      logger.info(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.userProfiles.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π`);
    } catch (error) {
      logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:', error.message);
    }
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π
   */
  private buildUserProfiles(sessions: any[]): void {
    const userStats = new Map<string, any>();

    sessions.forEach(session => {
      if (!userStats.has(session.userId)) {
        userStats.set(session.userId, {
          totalSessions: 0,
          completedSessions: 0,
          totalStepTime: 0,
          stepCount: 0,
          chosenVariants: [],
          genres: [],
          complexities: []
        });
      }

      const stats = userStats.get(session.userId);
      stats.totalSessions++;
      
      if (session.completedAt) {
        stats.completedSessions++;
      }
      
      if (session.steps) {
        session.steps.forEach(step => {
          if (step.selectedVariant) {
            stats.stepCount++;
            stats.chosenVariants.push(step.selectedVariant);
          }
          if (step.timeSpent) {
            stats.totalStepTime += step.timeSpent;
          }
        });
      }
      
      if (session.genre) {
        stats.genres.push(session.genre);
      }
    });

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    userStats.forEach((stats, userId) => {
      const profile: UserPreferenceProfile = {
        userId,
        preferredComplexity: this.analyzePreferredComplexity(stats.complexities),
        favoriteGenres: this.getTopItems(stats.genres, 3),
        preferredStyles: this.analyzePreferredStyles(stats.chosenVariants),
        sessionHistory: {
          totalSessions: stats.totalSessions,
          completedSessions: stats.completedSessions,
          averageStepTime: stats.stepCount > 0 ? stats.totalStepTime / stats.stepCount : 0,
          mostChosenVariants: this.getTopItems(stats.chosenVariants, 5)
        },
        adaptiveSettings: {
          suggestComplexity: stats.totalSessions >= 3,
          customizePrompts: stats.completedSessions >= 2,
          enablePersonalization: stats.totalSessions >= 5
        }
      };

      this.userProfiles.set(userId, profile);
    });
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private analyzePreferredComplexity(complexities: string[]): 'simple' | 'medium' | 'complex' {
    if (complexities.length === 0) return 'medium';
    
    const counts = complexities.reduce((acc, complexity) => {
      acc[complexity] = (acc[complexity] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const sorted = Object.entries(counts).sort((a, b) => b[1] - a[1]);
    return (sorted[0]?.[0] as 'simple' | 'medium' | 'complex') || 'medium';
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  private getTopItems(items: string[], limit: number): string[] {
    const counts = items.reduce((acc, item) => {
      acc[item] = (acc[item] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return Object.entries(counts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, limit)
      .map(([item]) => item);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   */
  private analyzePreferredStyles(chosenVariants: string[]): string[] {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª–µ–π
    const styleKeywords = ['–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π', '–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π'];
    
    return styleKeywords.filter(keyword => 
      chosenVariants.some(variant => 
        variant.toLowerCase().includes(keyword.toLowerCase())
      )
    ).slice(0, 3);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π
   */
  private async getUserProfile(userId: string): Promise<UserPreferenceProfile> {
    if (this.userProfiles.has(userId)) {
      return this.userProfiles.get(userId)!;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newProfile: UserPreferenceProfile = {
      userId,
      preferredComplexity: 'medium',
      favoriteGenres: [],
      preferredStyles: [],
      sessionHistory: {
        totalSessions: 0,
        completedSessions: 0,
        averageStepTime: 0,
        mostChosenVariants: []
      },
      adaptiveSettings: {
        suggestComplexity: false,
        customizePrompts: false,
        enablePersonalization: false
      }
    };

    this.userProfiles.set(userId, newProfile);
    return newProfile;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
   */
  private createAdaptiveGameSteps(userProfile: UserPreferenceProfile, genre: string): InteractiveGameStep[] {
    const baseSteps = this.createGameSteps();
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —ç—Ç–∞–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userProfile.adaptiveSettings.enablePersonalization) {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const advancedSteps = [
        {
          stepId: 'advanced-mechanics',
          name: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏',
          description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π',
          type: 'advanced-mechanics',
          variants: [],
          order: 3.5
        },
        {
          stepId: 'monetization',
          name: '–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è',
          description: '–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏ –∏–≥—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏',
          type: 'monetization',
          variants: [],
          order: 5.5
        }
      ];

      // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
      baseSteps.splice(3, 0, advancedSteps[0]);
      baseSteps.splice(6, 0, advancedSteps[1]);
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userProfile.favoriteGenres.includes(genre)) {
      baseSteps.forEach(step => {
        step.description += ` (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∂–∞–Ω—Ä–∞ ${genre})`;
      });
    }

    // –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —ç—Ç–∞–ø—ã
    return baseSteps.sort((a, b) => a.order - b.order);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  private async createAdvancedGenerationContext(
    userProfile: UserPreferenceProfile, 
    params: any
  ): Promise<AdvancedGenerationContext> {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
    const currentTrends = this.getCurrentGameTrends();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    const seasonalFactors = this.getSeasonalFactors();
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    const platformOptimizations = this.getPlatformOptimizations('yandex_games');

    return {
      userProfile,
      currentTrends,
      seasonalFactors,
      platformOptimizations
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–∞–ø–∞
   */
  private async generateIntelligentStepVariants(request: {
    stepType: string;
    count: number;
    basePrompt: string;
    gameContext: any;
    userProfile: UserPreferenceProfile;
    advancedContext: AdvancedGenerationContext;
  }): Promise<GenerateVariantsResponse> {
    const cacheKey = `${request.stepType}-${request.userProfile.userId}-${JSON.stringify(request.gameContext).slice(0, 100)}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if (this.adaptiveVariantCache.has(cacheKey)) {
      logger.info(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è ${request.stepType}`);
      return {
        variants: this.adaptiveVariantCache.get(cacheKey)!,
        generationTime: 0,
        tokensUsed: 0
      };
    }

    const startTime = Date.now();
    
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const personalizedPrompt = this.createPersonalizedPrompt(request);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ò–ò —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      const aiResponse = await this.deepseek.generateCode(
        personalizedPrompt.userPrompt,
        personalizedPrompt.systemPrompt
      );
      
      // –ü–∞—Ä—Å–∏–º –∏ –æ–±–æ–≥–∞—â–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
      let variants = this.parseAIVariantsResponse(aiResponse.content, request.stepType);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
      variants = this.applyAdaptiveAlgorithms(variants, request.userProfile, request.advancedContext);
      
      // –ï—Å–ª–∏ –º–∞–ª–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –¥–æ–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–º–∏
      if (variants.length < request.count) {
        const fallbackVariants = this.getIntelligentVariants({
          stepType: request.stepType,
          count: request.count - variants.length,
          gameContext: request.gameContext
        });
        variants.push(...fallbackVariants);
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫—ç—à–∏—Ä—É–µ–º
      variants = variants.slice(0, request.count);
      this.adaptiveVariantCache.set(cacheKey, variants);
      
      const generationTime = Date.now() - startTime;
      logger.info(`üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${generationTime}ms (${variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)`);
      
      return {
        variants,
        generationTime,
        tokensUsed: aiResponse.tokensUsed || 0
      };

    } catch (error) {
      logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: ${error.message}`);
      
      // Fallback –∫ —É–ª—É—á—à–µ–Ω–Ω—ã–º –±–∞–∑–æ–≤—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
      const variants = this.getIntelligentVariants(request);
      const generationTime = Date.now() - startTime;
      
      return {
        variants,
        generationTime,
        tokensUsed: 0
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
   */
  private getCurrentGameTrends(): string[] {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å API –∏–≥—Ä–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    return [
      'multiplayer-cooperation',
      'procedural-generation',
      'accessibility-features',
      'mobile-first-design',
      'retro-aesthetics',
      'environmental-storytelling',
      'micro-transactions',
      'cross-platform-play'
    ];
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
   */
  private getSeasonalFactors(): string[] {
    const month = new Date().getMonth() + 1;
    const seasons = {
      'winter': [12, 1, 2],
      'spring': [3, 4, 5],
      'summer': [6, 7, 8],
      'autumn': [9, 10, 11]
    };

    for (const [season, months] of Object.entries(seasons)) {
      if (months.includes(month)) {
        return this.getSeasonalThemes(season);
      }
    }

    return [];
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ —Ç–µ–º—ã
   */
  private getSeasonalThemes(season: string): string[] {
    const themes = {
      'winter': ['snow-themes', 'cozy-gameplay', 'holiday-events', 'indoor-activities'],
      'spring': ['growth-mechanics', 'fresh-starts', 'nature-themes', 'renewal-concepts'],
      'summer': ['adventure-themes', 'outdoor-exploration', 'vacation-vibes', 'energetic-gameplay'],
      'autumn': ['harvest-mechanics', 'preparation-themes', 'nostalgic-elements', 'strategic-planning']
    };

    return themes[season] || [];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
   */
  private getPlatformOptimizations(platform: string): string[] {
    const optimizations = {
      'yandex_games': [
        'touch-friendly-controls',
        'quick-loading',
        'minimal-file-size',
        'browser-compatibility',
        'russian-localization',
        'social-features',
        'leaderboards-integration'
      ],
      'mobile': [
        'gesture-controls',
        'portrait-orientation',
        'offline-capability',
        'battery-optimization'
      ]
    };

    return optimizations[platform] || [];
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ò–ò
   */
  private createPersonalizedPrompt(request: {
    stepType: string;
    userProfile: UserPreferenceProfile;
    gameContext: any;
    advancedContext: AdvancedGenerationContext;
  }): { systemPrompt: string; userPrompt: string } {
    // –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    let systemPrompt = this.createSystemPromptForStep(request.stepType);
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (request.userProfile.adaptiveSettings.customizePrompts) {
      systemPrompt += `\n\n–ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø:
- –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${request.userProfile.preferredComplexity}
- –õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã: ${request.userProfile.favoriteGenres.join(', ') || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
- –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏: ${request.userProfile.preferredStyles.join(', ') || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
- –û–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${request.userProfile.sessionHistory.completedSessions} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π

–£–ß–¢–ò –≠–¢–ò –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (request.advancedContext.currentTrends.length > 0) {
      systemPrompt += `\n\n–¢–ï–ö–£–©–ò–ï –¢–†–ï–ù–î–´: ${request.advancedContext.currentTrends.join(', ')}`;
    }

    if (request.advancedContext.seasonalFactors.length > 0) {
      systemPrompt += `\n–°–ï–ó–û–ù–ù–´–ï –§–ê–ö–¢–û–†–´: ${request.advancedContext.seasonalFactors.join(', ')}`;
    }

    if (request.advancedContext.platformOptimizations.length > 0) {
      systemPrompt += `\n–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–õ–ê–¢–§–û–†–ú–´: ${request.advancedContext.platformOptimizations.join(', ')}`;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
    const userPrompt = this.createUserPromptForStep({
      stepType: request.stepType,
      gameContext: request.gameContext,
      count: 3,
      basePrompt: ''
    });

    return { systemPrompt, userPrompt };
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
   */
  private applyAdaptiveAlgorithms(
    variants: StepVariant[],
    userProfile: UserPreferenceProfile,
    advancedContext: AdvancedGenerationContext
  ): StepVariant[] {
    return variants.map(variant => {
      // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
      if (userProfile.adaptiveSettings.suggestComplexity) {
        const preferredComplexity = userProfile.preferredComplexity;
        const currentComplexity = variant.metadata?.complexity || 'medium';
        
        // –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if (currentComplexity !== preferredComplexity) {
          variant.metadata = {
            ...variant.metadata,
            adaptedComplexity: preferredComplexity,
            originalComplexity: currentComplexity,
            adaptationNote: `–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${preferredComplexity})`
          };
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
      const personalizedTags = this.generatePersonalizedTags(variant, userProfile, advancedContext);
      variant.metadata = {
        ...variant.metadata,
        personalizedTags,
        adaptiveScore: this.calculateAdaptiveScore(variant, userProfile)
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
      if (userProfile.sessionHistory.mostChosenVariants.includes(variant.title)) {
        variant.metadata.isFrequentChoice = true;
        variant.description += ' (–ø–æ—Ö–æ–∂ –Ω–∞ –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã)';
      }

      return variant;
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  private generatePersonalizedTags(
    variant: StepVariant,
    userProfile: UserPreferenceProfile,
    advancedContext: AdvancedGenerationContext
  ): string[] {
    const tags: string[] = [];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userProfile.preferredStyles.some(style => 
      variant.title.toLowerCase().includes(style.toLowerCase()) ||
      variant.description.toLowerCase().includes(style.toLowerCase())
    )) {
      tags.push('matched-style');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
    if (advancedContext.currentTrends.some(trend => 
      variant.description.toLowerCase().includes(trend.replace('-', ' '))
    )) {
      tags.push('trending');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    if (advancedContext.seasonalFactors.some(factor => 
      variant.description.toLowerCase().includes(factor.replace('-', ' '))
    )) {
      tags.push('seasonal');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userProfile.sessionHistory.completedSessions > 5) {
      tags.push('experienced-user');
    } else if (userProfile.sessionHistory.completedSessions === 0) {
      tags.push('new-user');
    }

    return tags;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  private calculateAdaptiveScore(variant: StepVariant, userProfile: UserPreferenceProfile): number {
    let score = 50; // –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç

    // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const variantComplexity = variant.metadata?.complexity || 'medium';
    if (variantComplexity === userProfile.preferredComplexity) {
      score += 20;
    }

    // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ç–∏–ª—è–º
    if (userProfile.preferredStyles.some(style => 
      variant.title.toLowerCase().includes(style.toLowerCase())
    )) {
      score += 15;
    }

    // –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userProfile.sessionHistory.mostChosenVariants.includes(variant.title)) {
      score += 10;
    }

    // –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (userProfile.sessionHistory.totalSessions === 0 && variantComplexity === 'complex') {
      score -= 15;
    }

    return Math.max(0, Math.min(100, score));
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   */
  private getIntelligentVariants(request: any): StepVariant[] {
    const { stepType, gameContext, count = 3 } = request;
    const baseVariants = this.getVariantsByType(stepType, gameContext);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã StepVariant
    return baseVariants.slice(0, count).map((variant, index) => ({
      id: `base-${stepType}-${Date.now()}-${index}`,
      title: variant.title,
      description: variant.description,
      details: {
        complexity: variant.complexity || 'medium',
        features: [],
        aiGenerated: false
      },
      aiGenerated: false,
      generatedAt: new Date(),
      metadata: {
        complexity: variant.complexity || 'medium',
        tags: [stepType],
        estimatedTime: this.getEstimatedTime(variant.complexity),
        quality: 'standard'
      }
    }));
  }

  async startInteractiveGeneration(params: {
    title: string;
    description: string;
    genre: string;
    userId: string;
    quality?: 'fast' | 'balanced' | 'high';
  }): Promise<InteractiveGameSession> {
    const gameId = `interactive-${Date.now()}-${uuidv4().slice(0, 8)}`;
    
    logger.info(`üéÆ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${gameId}`, {
      title: params.title,
      genre: params.genre,
      userId: params.userId
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const userProfile = await this.getUserProfile(params.userId);
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const steps = this.createAdaptiveGameSteps(userProfile, params.genre);

    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const advancedContext = await this.createAdvancedGenerationContext(userProfile, params);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    const firstStep = steps[0];
    const variants = await this.generateIntelligentStepVariants({
      stepType: firstStep.type,
      count: userProfile.adaptiveSettings.enablePersonalization ? 4 : 3,
      basePrompt: this.getStepPrompt(firstStep.type),
      gameContext: {
        title: params.title,
        description: params.description,
        genre: params.genre,
        previousChoices: []
      },
      userProfile,
      advancedContext
    });

    firstStep.variants = variants.variants;

    const sessionData: Omit<InteractiveGameSession, 'steps'> = {
      gameId,
      userId: params.userId,
      title: params.title,
      description: params.description,
      genre: params.genre,
      currentStep: 0,
      totalSteps: steps.length,
      isActive: true,
      isPaused: false,
      completedSteps: 0,
      startedAt: new Date(),
      lastActivityAt: new Date(),
      configuration: {
        quality: params.quality || 'balanced',
        aiProvider: 'deepseek',
        enabledFeatures: ['ai-generation', 'custom-prompts']
      },
      steps: steps
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const session = await this.sessionDAO.createSession(sessionData);

    logger.info(`‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${gameId}`);
    return session;
  }

  async getGameState(gameId: string): Promise<InteractiveGameSession | null> {
    const session = await this.sessionDAO.getSessionByGameId(gameId);
    if (session) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await this.sessionDAO.updateSession(gameId, { lastActivityAt: new Date() });
      session.lastActivityAt = new Date();
    }
    return session;
  }

  async selectVariant(
    gameId: string,
    stepId: string,
    variantId: string
  ): Promise<{
    success: boolean;
    nextStep?: InteractiveGameStep;
    message: string;
  }> {
    const session = activeSessions.get(gameId);
    if (!session) {
      throw new Error(`–°–µ—Å—Å–∏—è ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    const currentStep = session.steps[session.currentStep];
    if (currentStep.stepId !== stepId) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø. –û–∂–∏–¥–∞–ª—Å—è ${currentStep.stepId}, –ø–æ–ª—É—á–µ–Ω ${stepId}`);
    }

    const selectedVariant = currentStep.variants.find(v => v.id === variantId);
    if (!selectedVariant) {
      throw new Error(`–í–∞—Ä–∏–∞–Ω—Ç ${variantId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    currentStep.selectedVariant = variantId;
    session.completedSteps++;
    session.lastActivityAt = new Date();

    logger.info(`‚úÖ –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç ${variantId} –¥–ª—è —ç—Ç–∞–ø–∞ ${stepId}`, {
      gameId,
      variant: selectedVariant.title
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
    if (session.currentStep + 1 < session.totalSteps) {
      session.currentStep++;
      const nextStep = session.steps[session.currentStep];

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–±–æ—Ä–æ–≤
      const previousChoices = session.steps
        .slice(0, session.currentStep)
        .filter(step => step.selectedVariant)
        .map(step => ({
          stepId: step.stepId,
          choice: step.variants.find(v => v.id === step.selectedVariant)?.title || ''
        }));

      const variants = await this.generateStepVariants({
        stepType: nextStep.type,
        count: 3,
        basePrompt: this.getStepPrompt(nextStep.type),
        gameContext: {
          title: session.title,
          description: session.description,
          genre: session.genre,
          previousChoices
        }
      });

      nextStep.variants = variants.variants;

      activeSessions.set(gameId, session);

      return {
        success: true,
        nextStep,
        message: `–ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç—Ç–∞–ø—É: ${nextStep.name}`
      };
    } else {
      // –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø
      activeSessions.set(gameId, session);
      return {
        success: true,
        message: '–í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ì–æ—Ç–æ–≤–æ –∫ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.'
      };
    }
  }

  async completeGeneration(gameId: string): Promise<{
    success: boolean;
    finalGameData: any;
    message: string;
  }> {
    const session = activeSessions.get(gameId);
    if (!session) {
      throw new Error(`–°–µ—Å—Å–∏—è ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    logger.info(`üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${gameId}`);

    try {
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const gameChoices = session.steps
        .filter(step => step.selectedVariant)
        .map(step => {
          const selectedVariant = step.variants.find(v => v.id === step.selectedVariant);
          return {
            step: step.name,
            stepType: step.type,
            choice: selectedVariant?.title || '',
            details: selectedVariant?.details || {},
            metadata: selectedVariant?.metadata || {}
          };
        });

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤—ã–±–æ—Ä–æ–≤
      const generationRequest = this.createGenerationRequestFromChoices(session, gameChoices);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const gameEntity = await this.gameDAO.createGame({
        id: gameId,
        title: session.title,
        description: session.description,
        genre: session.genre,
        status: 'processing' as any,
        progress: 0,
        config: {
          interactive: true,
          choices: gameChoices,
          sessionId: session.gameId
        },
        userId: session.userId,
        metadata: {
          interactiveSession: true,
          totalSteps: session.totalSteps,
          completedSteps: session.completedSteps
        }
      });

      logger.info(`üíæ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: ${gameEntity.id}`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω
      logger.info(`üî• –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –ø–∞–π–ø–ª–∞–π–Ω...`);
      
      const buildResult = await this.generationPipeline.execute(
        generationRequest,
        (step: string, progress: number, logs?: string[]) => {
          logger.info(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${gameId}: ${step} (${progress}%)`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          this.gameDAO.updateGame(gameId, { 
            progress,
            metadata: { 
              ...gameEntity.metadata,
              currentStep: step,
              logs: logs || []
            }
          });
        }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
      await this.gameDAO.updateGame(gameId, {
        status: 'completed' as any,
        progress: 100,
        filePath: buildResult.outputPath,
        sizeBytes: buildResult.size,
        assets: buildResult.assets || {},
        metadata: {
          ...gameEntity.metadata,
          buildResult,
          validationResults: buildResult.validationResults,
          finalizedAt: new Date().toISOString()
        }
      });

      const finalGameData = {
        gameId,
        gamePath: buildResult.outputPath,
        downloadUrl: `/api/games/${gameId}/download`,
        size: buildResult.size,
        assets: buildResult.assets,
        choices: gameChoices,
        validationResults: buildResult.validationResults,
        generatedAt: new Date(),
        buildTime: buildResult.buildTime
      };

      session.finalGameData = finalGameData;
      session.completedAt = new Date();
      session.isActive = false;

      activeSessions.set(gameId, session);

      logger.info(`‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${gameId}`);

      return {
        success: true,
        finalGameData,
        message: '–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.'
      };

    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${gameId}:`, error);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π
      try {
        await this.gameDAO.updateGame(gameId, {
          status: 'failed' as any,
          metadata: {
            error: error.message,
            failedAt: new Date().toISOString()
          }
        });
      } catch (dbError) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î:', dbError);
      }

      session.isActive = false;
      session.error = error.message;
      activeSessions.set(gameId, session);

      return {
        success: false,
        finalGameData: null,
        message: `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã: ${error.message}`
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤—ã–±–æ—Ä–æ–≤
   */
  private createGenerationRequestFromChoices(session: InteractiveGameSession, gameChoices: any[]): any {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const conceptChoice = gameChoices.find(c => c.stepType === 'concept');
    const characterChoice = gameChoices.find(c => c.stepType === 'character');
    const levelChoice = gameChoices.find(c => c.stepType === 'level');
    const graphicsChoice = gameChoices.find(c => c.stepType === 'graphics');
    const audioChoice = gameChoices.find(c => c.stepType === 'audio');

    // –°—Ç—Ä–æ–∏–º –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã
    let enhancedDescription = session.description;
    
    if (conceptChoice) {
      enhancedDescription += `\n\n–ö–æ–Ω—Ü–µ–ø—Ü–∏—è: ${conceptChoice.choice}`;
      if (conceptChoice.details?.features) {
        enhancedDescription += ` –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${conceptChoice.details.features.join(', ')}`;
      }
    }

    if (characterChoice) {
      enhancedDescription += `\n–ì–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: ${characterChoice.choice}`;
    }

    if (levelChoice) {
      enhancedDescription += `\n–î–∏–∑–∞–π–Ω —É—Ä–æ–≤–Ω–µ–π: ${levelChoice.choice}`;
    }

    if (graphicsChoice) {
      enhancedDescription += `\n–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å: ${graphicsChoice.choice}`;
    }

    if (audioChoice) {
      enhancedDescription += `\n–ó–≤—É–∫–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: ${audioChoice.choice}`;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–æ–≤
    const complexities = gameChoices.map(c => c.metadata?.complexity || 'medium');
    const avgComplexity = this.calculateAverageComplexity(complexities);

    return {
      id: session.gameId,
      prompt: {
        title: session.title,
        description: enhancedDescription,
        genre: session.genre,
        complexity: avgComplexity,
        targetPlatform: 'yandex_games',
        interactiveChoices: gameChoices
      },
      localization: {
        enabled: true,
        sourceLanguage: 'ru',
        targetLanguages: ['en']
      },
      quality: session.configuration?.quality || 'balanced'
    };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–æ–≤
   */
  private calculateAverageComplexity(complexities: string[]): 'simple' | 'medium' | 'complex' {
    const weights = { simple: 1, medium: 2, complex: 3 };
    const totalWeight = complexities.reduce((sum, c) => sum + (weights[c] || 2), 0);
    const avgWeight = totalWeight / complexities.length;

    if (avgWeight <= 1.5) return 'simple';
    if (avgWeight <= 2.5) return 'medium';
    return 'complex';
  }

  private createGameSteps(): InteractiveGameStep[] {
    return [
      {
        stepId: 'concept',
        name: '–ö–æ–Ω—Ü–µ–ø—Ç –∏–≥—Ä—ã',
        description: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∏ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏–≥—Ä—ã',
        type: 'concept',
        variants: [],
        order: 1
      },
      {
        stepId: 'character',
        name: '–ì–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂',
        description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
        type: 'character',
        variants: [],
        order: 2
      },
      {
        stepId: 'level',
        name: '–î–∏–∑–∞–π–Ω —É—Ä–æ–≤–Ω–µ–π',
        description: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å—Ç–∏–ª—å —É—Ä–æ–≤–Ω–µ–π',
        type: 'level',
        variants: [],
        order: 3
      },
      {
        stepId: 'graphics',
        name: '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å',
        description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        type: 'graphics',
        variants: [],
        order: 4
      },
      {
        stepId: 'audio',
        name: '–ó–≤—É–∫–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ',
        description: '–í—ã–±–µ—Ä–∏—Ç–µ –º—É–∑—ã–∫—É –∏ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã',
        type: 'audio',
        variants: [],
        order: 5
      },
      {
        stepId: 'final',
        name: '–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è',
        description: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏ –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞',
        type: 'final',
        variants: [],
        order: 6
      }
    ];
  }

  private async generateStepVariants(request: GenerateVariantsRequest): Promise<GenerateVariantsResponse> {
    const startTime = Date.now();
    logger.info(`ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞: ${request.stepType}`);

    try {
      // –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      const systemPrompt = this.createSystemPromptForStep(request.stepType);
      const userPrompt = this.createUserPromptForStep(request);

      logger.info(`üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ DeepSeek –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      const aiResponse = await this.deepseek.generateCode(userPrompt, systemPrompt);
      
      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –ò–ò
      const parsedVariants = this.parseAIVariantsResponse(aiResponse.content, request.stepType);
      
      // –ï—Å–ª–∏ –ò–ò –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      const variants = parsedVariants.length >= 2 ? parsedVariants : this.getIntelligentVariants(request);
      
      const generationTime = Date.now() - startTime;
      logger.info(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞ ${generationTime}ms (${parsedVariants.length > 0 ? '–ò–ò' : 'fallback'})`);

      return {
        variants,
        generationTime,
        tokensUsed: aiResponse.tokensUsed || 0
      };

    } catch (error) {
      logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ò–ò, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: ${error.message}`);
      
      // Fallback –∫ –±–∞–∑–æ–≤—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
      const variants = this.getIntelligentVariants(request);
      const generationTime = Date.now() - startTime;
      
      return {
        variants,
        generationTime,
        tokensUsed: 0
      };
    }
  }

  private getVariantsByType(stepType: string, gameContext: any): Array<{title: string, description: string, complexity?: string}> {
    const { title, genre, previousChoices } = gameContext;
    
    const variantSets: Record<string, Array<{title: string, description: string, complexity?: string}>> = {
      concept: [
        {
          title: `–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π ${genre}`,
          description: `–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ ${genre} —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –≥–µ–π–º–ø–ª–µ–µ–º. –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ —Ü–µ–ª–∏, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ.`,
          complexity: 'simple'
        },
        {
          title: `–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π ${genre}`,
          description: `–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ ${genre} —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.`,
          complexity: 'medium'
        },
        {
          title: `–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π ${genre}`,
          description: `–°–º–µ–ª–æ–µ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞ ${genre}. –ù–µ–æ–±—ã—á–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏, –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –≤—ã—Å–æ–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å.`,
          complexity: 'complex'
        }
      ],
      character: [
        {
          title: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≥–µ—Ä–æ–π',
          description: '–•—Ä–∞–±—Ä—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å–∏–ª–∞.',
          complexity: 'simple'
        },
        {
          title: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–µ—Ü',
          description: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –±–æ–µ–≤—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏. –û—Å–æ–±—ã–µ –Ω–∞–≤—ã–∫–∏, –∫–æ–º–±–æ-–∞—Ç–∞–∫–∏, —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.',
          complexity: 'medium'
        },
        {
          title: '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π—Å—è –ø–µ—Ä—Å–æ–Ω–∞–∂',
          description: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥–µ–π–º–ø–ª–µ–π.',
          complexity: 'complex'
        }
      ],
      level: [
        {
          title: '–õ–∏–Ω–µ–π–Ω—ã–µ —É—Ä–æ–≤–Ω–∏',
          description: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å —è—Å–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏. –ü—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è, —á–µ—Ç–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å.',
          complexity: 'simple'
        },
        {
          title: '–†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏',
          description: '–£—Ä–æ–≤–Ω–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏.',
          complexity: 'medium'
        },
        {
          title: '–û—Ç–∫—Ä—ã—Ç—ã–π –º–∏—Ä',
          description: '–°–≤–æ–±–æ–¥–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π. –ù–µ–ª–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.',
          complexity: 'complex'
        }
      ],
      graphics: [
        {
          title: '–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞',
          description: '–ü—Ä–æ—Å—Ç–æ–π, —á–∏—Å—Ç—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å. –ü–æ–Ω—è—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞, –≤—ã—Å–æ–∫–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å.',
          complexity: 'simple'
        },
        {
          title: '–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è 2D –≥—Ä–∞—Ñ–∏–∫–∞',
          description: '–ë–æ–≥–∞—Ç–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è, –∫—Ä–∞—Å–æ—á–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞. –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã.',
          complexity: 'medium'
        },
        {
          title: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥—Ä–∞—Ñ–∏–∫–∞',
          description: '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.',
          complexity: 'complex'
        }
      ],
      audio: [
        {
          title: '–ü—Ä–æ—Å—Ç–æ–µ –∑–≤—É–∫–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ',
          description: '–ë–∞–∑–æ–≤—ã–µ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞. –ß–µ—Ç–∫–∏–µ –∞—É–¥–∏–æ-—Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π.',
          complexity: 'simple'
        },
        {
          title: '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –º—É–∑—ã–∫–∞',
          description: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞, —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –∏–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã.',
          complexity: 'medium'
        },
        {
          title: '–ò–º–º–µ—Ä—Å–∏–≤–Ω—ã–π –∑–≤—É–∫',
          description: '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –º—É–∑—ã–∫–∞. –ó–≤—É–∫–æ–≤—ã–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç—ã, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏.',
          complexity: 'complex'
        }
      ],
      final: [
        {
          title: '–ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
          description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫.',
          complexity: 'simple'
        },
        {
          title: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞',
          description: '–î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–ª–∞–Ω—Å–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —É–ª—É—á—à–µ–Ω–∏–π.',
          complexity: 'medium'
        },
        {
          title: '–ü–æ–ª–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è',
          description: '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
          complexity: 'complex'
        }
      ]
    };

    return variantSets[stepType] || variantSets.concept;
  }

  private getIntelligentVariants(request: GenerateVariantsRequest): StepVariant[] {
    const { stepType, gameContext } = request;
    const variants = this.getVariantsByType(stepType, gameContext);
    
    return variants.map((variant, index) => ({
      id: `${stepType}-${Date.now()}-${index}`,
      title: variant.title,
      description: variant.description,
      details: variant,
      aiGenerated: false,
      generatedAt: new Date(),
      metadata: {
        complexity: variant.complexity || 'medium',
        tags: [stepType, gameContext.genre],
        estimatedTime: this.getEstimatedTime(variant.complexity)
      }
    }));
  }

  private getDefaultVariants(stepType: string): StepVariant[] {
    const defaultVariants: Record<string, StepVariant[]> = {
      concept: [
        {
          id: 'concept-classic',
          title: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å',
          description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –≥–µ–π–º–ø–ª–µ–µ–º',
          details: {},
          aiGenerated: false,
          generatedAt: new Date(),
          metadata: { complexity: 'simple', tags: ['classic'] }
        },
        {
          id: 'concept-innovative',
          title: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥',
          description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏',
          details: {},
          aiGenerated: false,
          generatedAt: new Date(),
          metadata: { complexity: 'complex', tags: ['innovative'] }
        }
      ],
      character: [
        {
          id: 'char-hero',
          title: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≥–µ—Ä–æ–π',
          description: '–•—Ä–∞–±—Ä—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏',
          details: {},
          aiGenerated: false,
          generatedAt: new Date(),
          metadata: { complexity: 'simple', tags: ['hero'] }
        }
      ]
    };

    return defaultVariants[stepType] || [];
  }

  private getStepPrompt(stepType: string): string {
    const prompts: Record<string, string> = {
      concept: '–°–æ–∑–¥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π, –≤–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏, —Ü–µ–ª–∏ –∏–≥—Ä–æ–∫–∞ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.',
      character: '–°–æ–∑–¥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –≤–∫–ª—é—á–∞—è –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä.',
      level: '–°–æ–∑–¥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞ —É—Ä–æ–≤–Ω–µ–π, –≤–∫–ª—é—á–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.',
      graphics: '–°–æ–∑–¥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è, –≤–∫–ª—é—á–∞—è —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ–±—â—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.',
      audio: '–°–æ–∑–¥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–≤—É–∫–æ–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.',
      final: '–°–æ–∑–¥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –∏–≥—Ä—ã, –≤–∫–ª—é—á–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–ª–∏—Ä–æ–≤–∫—É.'
    };

    return prompts[stepType] || '–°–æ–∑–¥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã.';
  }

  private getEstimatedTime(complexity?: string): number {
    const times = {
      simple: 5,
      medium: 15,
      complex: 30
    };
    return times[complexity as keyof typeof times] || 15;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
  async pauseGeneration(gameId: string): Promise<boolean> {
    const session = activeSessions.get(gameId);
    if (session) {
      session.isPaused = true;
      session.lastActivityAt = new Date();
      activeSessions.set(gameId, session);
      return true;
    }
    return false;
  }

  async resumeGeneration(gameId: string): Promise<boolean> {
    const session = activeSessions.get(gameId);
    if (session) {
      session.isPaused = false;
      session.lastActivityAt = new Date();
      activeSessions.set(gameId, session);
      return true;
    }
    return false;
  }

  async deleteSession(gameId: string): Promise<boolean> {
    return activeSessions.delete(gameId);
  }

  async getActiveSessions(): Promise<InteractiveGameSession[]> {
    return Array.from(activeSessions.values());
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  private createSystemPromptForStep(stepType: string): string {
    const baseSystemPrompt = `
–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –≥–µ–π–º–¥–∏–∑–∞–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç—Ç–∞–ø–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä—ã.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 3 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —ç—Ç–∞–ø–∞ "${stepType}".

–í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
2. –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
3. –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –ø—Ä–æ—Å—Ç–æ–π, —Å—Ä–µ–¥–Ω–∏–π, —Å–ª–æ–∂–Ω—ã–π
4. –û–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏
5. –£—á–∏—Ç—ã–≤–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –≥–µ–π–º–¥–∏–∑–∞–π–Ω–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{
  "variants": [
    {
      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞",
      "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
      "complexity": "simple|medium|complex",
      "features": ["–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å1", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å2", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å3"]
    }
  ]
}
`;

    const stepSpecificPrompts = {
      concept: `
–§–æ–∫—É—Å –Ω–∞ –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫–∞—Ö –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏
- –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∂–∞–Ω—Ä—É
- –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –∏ –≥–ª—É–±–∏–Ω–æ–π
- –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
`,
      character: `
–§–æ–∫—É—Å –Ω–∞ –¥–∏–∑–∞–π–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
- –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ —Å—Ç–∏–ª—å
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
- –•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è
- –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ
`,
      level: `
–§–æ–∫—É—Å –Ω–∞ –¥–∏–∑–∞–π–Ω–µ —É—Ä–æ–≤–Ω–µ–π:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
- –°–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
`,
      graphics: `
–§–æ–∫—É—Å –Ω–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ:
- –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
- –°—Ç–∏–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
`,
      audio: `
–§–æ–∫—É—Å –Ω–∞ –∑–≤—É–∫–æ–≤–æ–º –¥–∏–∑–∞–π–Ω–µ:
- –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
- –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
- –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∞—É–¥–∏–æ
- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
`,
      final: `
–§–æ–∫—É—Å –Ω–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª–∏—Ä–æ–≤–∫–∞
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç
`
    };

    return baseSystemPrompt + (stepSpecificPrompts[stepType] || stepSpecificPrompts.concept);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–≥—Ä—ã
   */
  private createUserPromptForStep(request: GenerateVariantsRequest): string {
    const { stepType, gameContext } = request;
    const { title, genre, description, previousChoices } = gameContext;

    let contextInfo = `
–°–æ–∑–¥–∞–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —ç—Ç–∞–ø–∞ "${stepType}" –∏–≥—Ä—ã:

–ö–û–ù–¢–ï–ö–°–¢ –ò–ì–†–´:
- –ù–∞–∑–≤–∞–Ω–∏–µ: "${title}"
- –ñ–∞–Ω—Ä: ${genre}
- –û–ø–∏—Å–∞–Ω–∏–µ: ${description}
`;

    if (previousChoices && previousChoices.length > 0) {
      contextInfo += `\n–†–ê–ù–ï–ï –í–´–ë–†–ê–ù–ù–´–ï –†–ï–®–ï–ù–ò–Ø:\n`;
      previousChoices.forEach((choice, index) => {
        contextInfo += `${index + 1}. ${choice.stepId}: ${choice.choice}\n`;
      });
    }

    contextInfo += `\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é, —É—á–∏—Ç—ã–≤–∞—è –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä—ã.`;

    return contextInfo;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –ò–ò –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   */
  private parseAIVariantsResponse(content: string, stepType: string): StepVariant[] {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        logger.warn('–ù–µ –Ω–∞–π–¥–µ–Ω JSON –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò');
        return [];
      }

      const parsed = JSON.parse(jsonMatch[0]);
      
      if (!parsed.variants || !Array.isArray(parsed.variants)) {
        logger.warn('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò');
        return [];
      }

      return parsed.variants.map((variant: any, index: number) => {
        const stepVariant: StepVariant = {
          id: `ai-${stepType}-${Date.now()}-${index}`,
          title: variant.title || `–í–∞—Ä–∏–∞–Ω—Ç ${index + 1}`,
          description: variant.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          details: {
            complexity: variant.complexity || 'medium',
            features: variant.features || [],
            aiGenerated: true,
            originalResponse: variant
          },
          aiGenerated: true,
          generatedAt: new Date(),
          metadata: {
            complexity: variant.complexity || 'medium',
            tags: [stepType, ...(variant.features || [])],
            estimatedTime: this.getEstimatedTime(variant.complexity),
            aiModel: 'deepseek',
            quality: 'high'
          }
        };

        return stepVariant;
      }).filter(variant => variant.title && variant.description);

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò:', error);
      return [];
    }
  }
} 
import { EventEmitter } from 'events';
import { v4 as uuidv4 } from 'uuid';
import path from 'path';
import fs from 'fs/promises';
import {
  InteractiveGameRequest,
  InteractiveGenerationState,
  InteractiveStep,
  GenerationVariant,
  StepGenerationRequest,
  VariantGenerationResponse,
  StepGuide,
  InteractiveStepConfig,
  StepType,
  CharacterVariant,
  MechanicsVariant,
  LevelVariant,
  GraphicsVariant,
  SoundVariant,
  UIVariant
} from '@/types/interactive';
import { GameConfiguration } from '@/types/gameConfig';
import { LoggerService } from './logger';
import { IntelligentAIRouter } from './ai/intelligentRouter';
import { SmartPromptEngine } from './ai/smartPromptEngine';

interface EnhancedInteractiveContext {
  gameId: string;
  originalPrompt: string;
  promptAnalysis: any;
  userProfile: UserProfile;
  completedSteps: Map<string, any>;
  gameEvolution: GameEvolutionTracker;
  qualityMetrics: QualityTracker;
}

interface UserProfile {
  id: string;
  experience: 'beginner' | 'intermediate' | 'advanced' | 'professional';
  preferences: {
    genres: string[];
    complexity: string;
    artStyle: string;
  };
  history: {
    completedGames: number;
    favoriteGenres: string[];
    averageSessionTime: number;
  };
}

interface GameEvolutionTracker {
  theme: string;
  mood: string;
  complexity: string;
  targetAudience: string;
  technicalConstraints: string[];
  narrative: NarrativeThread;
}

interface NarrativeThread {
  character: any;
  world: any;
  conflict: any;
  progression: any;
}

interface QualityTracker {
  coherence: number; // 0-100
  creativity: number;
  feasibility: number;
  marketability: number;
  technicalSoundness: number;
}

export class EnhancedInteractiveGenerationService extends EventEmitter {
  private logger: LoggerService;
  private aiRouter: IntelligentAIRouter;
  private promptEngine: SmartPromptEngine;
  private activeGenerations = new Map<string, EnhancedInteractiveContext>();
  private stepConfigs = new Map<string, InteractiveStepConfig>();
  private qualityValidators = new Map<string, Function>();

  constructor() {
    super();
    this.logger = new LoggerService();
    this.aiRouter = new IntelligentAIRouter();
    this.promptEngine = new SmartPromptEngine(this.aiRouter);
    
    this.initializeStepConfigs();
    this.initializeQualityValidators();
    
    this.logger.info('üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–≥—Ä—ã
   */
  public async startEnhancedInteractiveGeneration(
    request: InteractiveGameRequest & { configuration?: GameConfiguration }
  ): Promise<InteractiveGenerationState> {
    try {
      this.logger.info(`üéÆ –ù–∞—á–∞–ª–æ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${request.id}`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —É–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const promptAnalysis = await this.promptEngine.analyzeAndEnhancePrompt(
        request.prompt,
        request.userId,
        { gameConfig: request.configuration }
      );

      this.logger.info(`üß† –ü—Ä–æ–º–ø—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ñ–∞–Ω—Ä: ${promptAnalysis.gameClassification.genre}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(promptAnalysis.confidenceScore * 100)}%`);

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userProfile = await this.createUserProfile(request.userId, promptAnalysis);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const context: EnhancedInteractiveContext = {
        gameId: request.id,
        originalPrompt: request.prompt,
        promptAnalysis,
        userProfile,
        completedSteps: new Map(),
        gameEvolution: this.initializeGameEvolution(promptAnalysis),
        qualityMetrics: {
          coherence: 100,
          creativity: 100,
          feasibility: 100,
          marketability: 100,
          technicalSoundness: 100
        }
      };

      // –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
      const steps = await this.createAdaptiveSteps(promptAnalysis, userProfile, request.configuration);

      // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const state: InteractiveGenerationState = {
        gameId: request.id,
        userId: request.userId,
        currentStepIndex: 0,
        totalSteps: steps.length,
        steps,
        startedAt: new Date(),
        lastActivityAt: new Date(),
        isActive: true,
        finalChoices: {},
        gameConfiguration: request.configuration
      };

      this.activeGenerations.set(request.id, context);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      await this.startEnhancedStep(request.id, 0);

      this.emit('enhanced:generation:started', {
        gameId: request.id,
        analysis: promptAnalysis,
        userProfile,
        estimatedQuality: this.calculateOverallQuality(context.qualityMetrics)
      });

      return state;

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${request.id}:`, error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  public async generateIntelligentVariants(
    gameId: string,
    stepId: string,
    count: number = 5
  ): Promise<VariantGenerationResponse> {
    try {
      const context = this.activeGenerations.get(gameId);
      if (!context) {
        throw new Error(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      const state = this.getGenerationState(gameId);
      if (!state) {
        throw new Error(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }

      const step = state.steps.find(s => s.stepId === stepId);
      if (!step) {
        throw new Error(`–≠—Ç–∞–ø ${stepId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      this.logger.info(`ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–∞–ø–∞ "${step.name}"`);

      // –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–±–æ—Ä–æ–≤
      const aiContext = this.buildAIContext(context, step);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò
      const variants = await this.generateVariantsWithAI(step, aiContext, count);

      // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      const evaluatedVariants = await this.evaluateVariantQuality(variants, context);

      // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø
      step.variants.push(...evaluatedVariants);
      context.qualityMetrics = this.updateQualityMetrics(context.qualityMetrics, evaluatedVariants);

      const response: VariantGenerationResponse = {
        stepId,
        variants: evaluatedVariants,
        generatedAt: new Date(),
        totalCount: evaluatedVariants.length,
        hasMore: true
      };

      this.emit('enhanced:variants:generated', {
        gameId,
        stepId,
        variants: evaluatedVariants,
        qualityScore: this.calculateOverallQuality(context.qualityMetrics)
      });

      return response;

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è ${gameId}/${stepId}:`, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  public async selectVariantWithContext(
    gameId: string,
    stepId: string,
    variantId: string,
    customPrompt?: string
  ): Promise<void> {
    try {
      const context = this.activeGenerations.get(gameId);
      if (!context) {
        throw new Error(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      const state = this.getGenerationState(gameId);
      if (!state) {
        throw new Error(`–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }

      const step = state.steps.find(s => s.stepId === stepId);
      if (!step) {
        throw new Error(`–≠—Ç–∞–ø ${stepId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      const variant = step.variants.find(v => v.id === variantId);
      if (!variant) {
        throw new Error(`–í–∞—Ä–∏–∞–Ω—Ç ${variantId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      context.completedSteps.set(stepId, {
        stepType: step.type,
        selectedVariant: variant,
        customPrompt,
        timestamp: new Date()
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —ç–≤–æ–ª—é—Ü–∏—é –∏–≥—Ä—ã
      this.updateGameEvolution(context, step.type, variant);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      step.selectedVariant = variantId;
      step.customPrompt = customPrompt;
      step.isCompleted = true;
      state.finalChoices[stepId] = variantId;
      state.lastActivityAt = new Date();

      this.logger.info(`‚úÖ –≠—Ç–∞–ø ${stepId} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∏–≥—Ä—ã ${gameId}`);

      this.emit('enhanced:step:completed', {
        gameId,
        stepId,
        selectedVariant: variant,
        gameEvolution: context.gameEvolution,
        overallProgress: this.calculateProgress(context)
      });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
      await this.proceedToNextEnhancedStep(gameId);

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ${gameId}/${stepId}/${variantId}:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ AI –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–±–æ—Ä–æ–≤
   */
  private buildAIContext(context: EnhancedInteractiveContext, currentStep: InteractiveStep): any {
    const aiContext = {
      originalPrompt: context.originalPrompt,
      promptAnalysis: context.promptAnalysis,
      gameEvolution: context.gameEvolution,
      userProfile: context.userProfile,
      currentStepType: currentStep.type,
      previousChoices: {},
      coherenceRequirements: this.getCoherenceRequirements(context),
      qualityTargets: context.qualityMetrics
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–±–æ—Ä–∞—Ö
    for (const [stepId, stepData] of context.completedSteps) {
      aiContext.previousChoices[stepData.stepType] = {
        content: stepData.selectedVariant.content,
        reasoning: stepData.selectedVariant.metadata?.reasoning,
        customPrompt: stepData.customPrompt
      };
    }

    return aiContext;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò
   */
  private async generateVariantsWithAI(
    step: InteractiveStep,
    aiContext: any,
    count: number
  ): Promise<GenerationVariant[]> {
    const variants: GenerationVariant[] = [];

    for (let i = 0; i < count; i++) {
      try {
        const variant = await this.generateSingleVariantWithAI(step.type, aiContext, i);
        if (variant) {
          variants.push(variant);
        }
      } catch (error) {
        this.logger.warn(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${i} –¥–ª—è —Ç–∏–ø–∞ ${step.type}:`, error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
      }
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ
    while (variants.length < Math.min(count, 3)) {
      const fallbackVariant = this.createFallbackVariant(step.type, aiContext);
      variants.push(fallbackVariant);
    }

    return variants;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
   */
  private async generateSingleVariantWithAI(
    stepType: StepType,
    aiContext: any,
    variantIndex: number
  ): Promise<GenerationVariant> {
    // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–∏–ø–∞ —ç—Ç–∞–ø–∞
    const taskPrompt = this.createTaskPrompt(stepType, aiContext, variantIndex);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è –ò–ò
    let aiTaskType: 'game_design' | 'code_generation' | 'image_generation' | 'text_generation' = 'text_generation';
    
    if (stepType === 'character' || stepType === 'graphics') {
      aiTaskType = 'image_generation';
    } else if (stepType === 'mechanics' || stepType === 'levels') {
      aiTaskType = 'game_design';
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
    const aiResult = await this.aiRouter.executeTask({
      id: uuidv4(),
      type: aiTaskType,
      prompt: taskPrompt,
      context: aiContext,
      requirements: {
        quality: 'balanced',
        optimization: aiContext.userProfile.experience === 'professional' ? 'quality' : 'speed'
      }
    });

    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç—Ç–∞–ø–∞
    return this.parseAIResultToVariant(stepType, aiResult, aiContext);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
   */
  private createTaskPrompt(stepType: StepType, aiContext: any, variantIndex: number): string {
    const basePrompt = `–°–æ–∑–¥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç ${variantIndex + 1} –¥–ª—è —ç—Ç–∞–ø–∞ "${stepType}" –∏–≥—Ä—ã.`;
    
    let specificPrompt = '';
    
    switch (stepType) {
      case 'character':
        specificPrompt = this.createCharacterPrompt(aiContext);
        break;
      case 'mechanics':
        specificPrompt = this.createMechanicsPrompt(aiContext);
        break;
      case 'levels':
        specificPrompt = this.createLevelPrompt(aiContext);
        break;
      case 'graphics':
        specificPrompt = this.createGraphicsPrompt(aiContext);
        break;
      case 'sounds':
        specificPrompt = this.createSoundsPrompt(aiContext);
        break;
      case 'ui':
        specificPrompt = this.createUIPrompt(aiContext);
        break;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—ã–±–æ—Ä–æ–≤
    let contextPrompt = '\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä—ã:\n';
    contextPrompt += `–ñ–∞–Ω—Ä: ${aiContext.gameEvolution.theme}\n`;
    contextPrompt += `–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${aiContext.gameEvolution.mood}\n`;
    contextPrompt += `–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${aiContext.gameEvolution.targetAudience}\n`;

    if (Object.keys(aiContext.previousChoices).length > 0) {
      contextPrompt += '\n–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã:\n';
      for (const [choiceType, choice] of Object.entries(aiContext.previousChoices)) {
        contextPrompt += `${choiceType}: ${JSON.stringify(choice.content, null, 2)}\n`;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
    let qualityPrompt = '\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É:\n';
    qualityPrompt += `- –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤—ã–±–æ—Ä–∞–º–∏\n`;
    qualityPrompt += `- –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n`;
    qualityPrompt += `- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç—å –¥–ª—è HTML5\n`;
    qualityPrompt += `- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –Ø–Ω–¥–µ–∫—Å –ò–≥—Ä—ã\n`;

    return basePrompt + specificPrompt + contextPrompt + qualityPrompt;
  }

  /**
   * –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç—Ç–∞–ø–æ–≤
   */
  private createCharacterPrompt(aiContext: any): string {
    return `
–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –∏–≥—Ä—ã. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "name": "–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
  "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "appearance": {
    "physicalDescription": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏",
    "clothing": "–û–ø–∏—Å–∞–Ω–∏–µ –æ–¥–µ–∂–¥—ã/—ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏",
    "distinctiveFeatures": ["—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 1", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 2"]
  },
  "abilities": [
    {
      "name": "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å 1",
      "description": "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç",
      "gameplayImpact": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å"
    }
  ],
  "personality": {
    "traits": ["—á–µ—Ä—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ 1", "—á–µ—Ä—Ç–∞ 2"],
    "motivation": "–ß—Ç–æ –¥–≤–∏–∂–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º",
    "background": "–ö—Ä–∞—Ç–∫–∞—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è"
  },
  "technicalSpecs": {
    "animationStyle": "pixel art/cartoon/realistic",
    "primaryColor": "#HEX —Ü–≤–µ—Ç",
    "secondaryColor": "#HEX —Ü–≤–µ—Ç"
  }
}`;
  }

  private createMechanicsPrompt(aiContext: any): string {
    return `
–°–æ–∑–¥–∞–π –∏–≥—Ä–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "coreLoop": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞",
  "primaryMechanic": {
    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏",
    "description": "–ö–∞–∫ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
    "controls": ["–¥–µ–π—Å—Ç–≤–∏–µ 1", "–¥–µ–π—Å—Ç–≤–∏–µ 2"]
  },
  "secondaryMechanics": [
    {
      "name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
      "interaction": "–ö–∞–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –æ—Å–Ω–æ–≤–Ω–æ–π"
    }
  ],
  "progression": {
    "type": "level-based/skill-based/story-based",
    "description": "–ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∏–≥—Ä–æ–∫"
  },
  "difficulty": {
    "curve": "linear/exponential/adaptive",
    "balancing": "–ö–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å"
  },
  "feedback": {
    "visual": ["–≤–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"],
    "audio": ["–∑–≤—É–∫–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"],
    "haptic": ["—Ç–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (–µ—Å–ª–∏ –µ—Å—Ç—å)"]
  }
}`;
  }

  private createLevelPrompt(aiContext: any): string {
    return `
–°–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω —É—Ä–æ–≤–Ω—è. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "theme": "–¢–µ–º–∞ —É—Ä–æ–≤–Ω—è",
  "layout": {
    "type": "linear/branching/open/maze",
    "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏",
    "keyAreas": ["–æ–±–ª–∞—Å—Ç—å 1", "–æ–±–ª–∞—Å—Ç—å 2", "–æ–±–ª–∞—Å—Ç—å 3"]
  },
  "challenges": [
    {
      "type": "combat/puzzle/platforming/timing",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞",
      "difficulty": "easy/medium/hard",
      "placement": "–ì–¥–µ —Ä–∞–∑–º–µ—â–µ–Ω –≤ —É—Ä–æ–≤–Ω–µ"
    }
  ],
  "collectibles": [
    {
      "type": "coins/powerups/secrets",
      "count": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
      "placement": "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
    }
  ],
  "atmosphere": {
    "mood": "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è",
    "lighting": "–æ—Å–≤–µ—â–µ–Ω–∏–µ",
    "soundscape": "–∑–≤—É–∫–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
  },
  "technicalSpecs": {
    "estimatedSize": "800x600 –∏–ª–∏ –¥—Ä—É–≥–æ–µ",
    "performanceNotes": "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
  }
}`;
  }

  private createGraphicsPrompt(aiContext: any): string {
    return `
–°–æ–∑–¥–∞–π –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "artStyle": "pixel art/cartoon/minimalist/realistic/abstract",
  "colorPalette": {
    "primary": ["#color1", "#color2", "#color3"],
    "secondary": ["#color4", "#color5"],
    "accent": ["#color6"]
  },
  "visualTheme": {
    "mood": "–≤–µ—Å–µ–ª—ã–π/–º—Ä–∞—á–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π",
    "inspiration": "–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è",
    "keyVisualElements": ["—ç–ª–µ–º–µ–Ω—Ç 1", "—ç–ª–µ–º–µ–Ω—Ç 2"]
  },
  "technicalSpecs": {
    "resolution": "—Ü–µ–ª–µ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
    "spriteSize": "—Ä–∞–∑–º–µ—Ä —Å–ø—Ä–∞–π—Ç–æ–≤",
    "animationFrames": "—Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏",
    "compressionNotes": "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∂–∞—Ç–∏—é"
  },
  "assetTypes": [
    {
      "type": "characters/backgrounds/ui/effects",
      "description": "–æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞",
      "priority": "high/medium/low"
    }
  ]
}`;
  }

  private createSoundsPrompt(aiContext: any): string {
    return `
–°–æ–∑–¥–∞–π –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∑–≤—É–∫–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "audioStyle": "chiptune/orchestral/electronic/ambient/rock",
  "mood": "—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π/—Å–ø–æ–∫–æ–π–Ω—ã–π/–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π/–≤–µ—Å–µ–ª—ã–π",
  "musicTracks": [
    {
      "name": "Menu Theme",
      "mood": "welcoming",
      "instruments": ["piano", "strings"],
      "duration": "2-3 minutes loop"
    }
  ],
  "soundEffects": [
    {
      "action": "jump/collect/hit/menu_select",
      "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –∑–≤—É–∫–∞",
      "style": "synthetic/natural/musical",
      "priority": "high/medium/low"
    }
  ],
  "technicalSpecs": {
    "format": "wav/mp3/ogg",
    "bitrate": "—Ü–µ–ª–µ–≤–æ–π –±–∏—Ç—Ä–µ–π—Ç",
    "compression": "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∂–∞—Ç–∏—é",
    "totalSizeEstimate": "–æ—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"
  },
  "adaptiveAudio": {
    "dynamicMusic": "–µ—Å—Ç—å –ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –º—É–∑—ã–∫–∞",
    "environmentalSounds": "–æ–∫—Ä—É–∂–∞—é—â–∏–µ –∑–≤—É–∫–∏",
    "feedbackSounds": "–∑–≤—É–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
  }
}`;
  }

  private createUIPrompt(aiContext: any): string {
    return `
–°–æ–∑–¥–∞–π –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "designPhilosophy": "minimalist/detailed/retro/modern/playful",
  "layoutPrinciples": {
    "screenOrganization": "–∫–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω —ç–∫—Ä–∞–Ω",
    "navigationFlow": "–ª–æ–≥–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
    "responsiveness": "–∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Ä–∞–∑–Ω—ã–º —ç–∫—Ä–∞–Ω–∞–º"
  },
  "visualElements": {
    "buttonStyle": "–æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è –∫–Ω–æ–ø–æ–∫",
    "typography": "—à—Ä–∏—Ñ—Ç—ã –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏",
    "iconStyle": "—Å—Ç–∏–ª—å –∏–∫–æ–Ω–æ–∫",
    "colorScheme": ["#color1", "#color2", "#color3"]
  },
  "screens": [
    {
      "name": "MainMenu/GamePlay/Settings/GameOver",
      "elements": ["—ç–ª–µ–º–µ–Ω—Ç 1", "—ç–ª–µ–º–µ–Ω—Ç 2"],
      "layout": "–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏",
      "interactions": ["–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ 1", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ 2"]
    }
  ],
  "mobileOptimization": {
    "touchTargets": "—Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞—Å–∞–Ω–∏—è",
    "gestureSupport": "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∂–µ—Å—Ç—ã",
    "orientation": "portrait/landscape/both"
  },
  "accessibility": {
    "colorBlindness": "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∞–ª—å—Ç–æ–Ω–∏–∫–æ–≤",
    "textSize": "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞",
    "contrast": "–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
  }
}`;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ò–ò –≤ –≤–∞—Ä–∏–∞–Ω—Ç
   */
  private parseAIResultToVariant(
    stepType: StepType,
    aiResult: any,
    aiContext: any
  ): GenerationVariant {
    let content: any = {};
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò
      const jsonMatch = aiResult.content?.match(/```json\n([\s\S]*?)\n```/) || 
                       aiResult.content?.match(/\{[\s\S]*\}/);
      
      if (jsonMatch) {
        content = JSON.parse(jsonMatch[1] || jsonMatch[0]);
      } else if (typeof aiResult.content === 'string') {
        // –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        content = this.createBasicContentFromText(stepType, aiResult.content);
      } else {
        content = aiResult.content || {};
      }
    } catch (error) {
      this.logger.warn(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è ${stepType}:`, error);
      content = this.createFallbackContent(stepType, aiContext);
    }

    return {
      id: uuidv4(),
      type: 'ai_generated',
      content,
      metadata: {
        aiProvider: 'intelligent_router',
        generated: new Date(),
        coherenceScore: this.calculateCoherenceScore(content, aiContext),
        qualityScore: this.calculateVariantQuality(content, stepType),
        reasoning: this.generateReasoningForVariant(content, stepType, aiContext)
      }
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private createBasicContentFromText(stepType: StepType, text: string): any {
    switch (stepType) {
      case 'character':
        return {
          name: 'AI –ü–µ—Ä—Å–æ–Ω–∞–∂',
          description: text.slice(0, 200),
          appearance: { physicalDescription: text },
          abilities: [{ name: '–ë–∞–∑–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å', description: 'AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å' }]
        };
      case 'mechanics':
        return {
          coreLoop: text.slice(0, 100),
          primaryMechanic: { name: '–û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞', description: text }
        };
      default:
        return { description: text, aiGenerated: true };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private createFallbackContent(stepType: StepType, aiContext: any): any {
    const fallbacks = {
      character: {
        name: `–ì–µ—Ä–æ–π ${aiContext.gameEvolution.theme}`,
        description: '–•—Ä–∞–±—Ä—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂, –≥–æ—Ç–æ–≤—ã–π –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º',
        appearance: { physicalDescription: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–≥—Ä–æ–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂' }
      },
      mechanics: {
        coreLoop: '–ò—Å—Å–ª–µ–¥—É–π, —Å—Ä–∞–∂–∞–π—Å—è, –ø–æ–±–µ–∂–¥–∞–π',
        primaryMechanic: { name: '–ë–∞–∑–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' }
      },
      levels: {
        theme: aiContext.gameEvolution.theme,
        layout: { type: 'linear', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞' }
      },
      graphics: {
        artStyle: 'cartoon',
        colorPalette: { primary: ['#3498db', '#e74c3c', '#2ecc71'] }
      },
      sounds: {
        audioStyle: 'chiptune',
        mood: '–≤–µ—Å–µ–ª—ã–π'
      },
      ui: {
        designPhilosophy: 'minimalist',
        visualElements: { buttonStyle: '–ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏' }
      }
    };

    return fallbacks[stepType] || { description: '–ë–∞–∑–æ–≤—ã–π AI –∫–æ–Ω—Ç–µ–Ω—Ç', type: stepType };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ fallback –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  private createFallbackVariant(stepType: StepType, aiContext: any): GenerationVariant {
    return {
      id: uuidv4(),
      type: 'fallback',
      content: this.createFallbackContent(stepType, aiContext),
      metadata: {
        generated: new Date(),
        isFallback: true,
        reasoning: '–ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–∏ –æ—à–∏–±–∫–µ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
      }
    };
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   */
  private async evaluateVariantQuality(
    variants: GenerationVariant[],
    context: EnhancedInteractiveContext
  ): Promise<GenerationVariant[]> {
    return variants.map(variant => {
      const qualityScore = this.calculateVariantQuality(variant.content, 'character'); // TODO: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π stepType
      const coherenceScore = this.calculateCoherenceScore(variant.content, context);
      
      variant.metadata = {
        ...variant.metadata,
        qualityScore,
        coherenceScore,
        overallScore: (qualityScore + coherenceScore) / 2
      };
      
      return variant;
    }).sort((a, b) => (b.metadata?.overallScore || 0) - (a.metadata?.overallScore || 0));
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  private initializeStepConfigs(): void {
    // –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç—Ç–∞–ø–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
    this.stepConfigs.set('platformer', {
      steps: [
        { type: 'character', name: '–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π', description: '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä—ã', required: true },
        { type: 'mechanics', name: '–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏', description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏', required: true },
        { type: 'levels', name: '–î–∏–∑–∞–π–Ω —É—Ä–æ–≤–Ω–µ–π', description: '–°–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π—Ç–µ —É—Ä–æ–≤–Ω–∏', required: true },
        { type: 'graphics', name: '–í–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å', description: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å', required: false },
        { type: 'sounds', name: '–ó–≤—É–∫–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ', description: '–°–æ–∑–¥–∞–π—Ç–µ –∑–≤—É–∫–æ–≤–æ–π –¥–∏–∑–∞–π–Ω', required: false },
        { type: 'ui', name: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', required: false }
      ]
    });
  }

  private initializeQualityValidators(): void {
    this.qualityValidators.set('coherence', (content: any, context: any) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤—ã–±–æ—Ä–∞–º–∏
      return Math.random() * 100; // TODO: —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
    });

    this.qualityValidators.set('creativity', (content: any) => {
      // –û—Ü–µ–Ω–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
      return Math.random() * 100; // TODO: —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
    });
  }

  private createUserProfile(userId: string, promptAnalysis: any): UserProfile {
    return {
      id: userId,
      experience: promptAnalysis.userIntent.experience,
      preferences: {
        genres: [promptAnalysis.gameClassification.genre],
        complexity: promptAnalysis.gameClassification.complexity,
        artStyle: 'modern'
      },
      history: {
        completedGames: 0,
        favoriteGenres: [promptAnalysis.gameClassification.genre],
        averageSessionTime: 30
      }
    };
  }

  private initializeGameEvolution(promptAnalysis: any): GameEvolutionTracker {
    return {
      theme: promptAnalysis.gameClassification.genre,
      mood: promptAnalysis.userIntent.emotionalTone,
      complexity: promptAnalysis.gameClassification.complexity,
      targetAudience: promptAnalysis.gameClassification.targetAudience,
      technicalConstraints: promptAnalysis.gameClassification.technicalRequirements,
      narrative: {
        character: null,
        world: null,
        conflict: null,
        progression: null
      }
    };
  }

  private async createAdaptiveSteps(
    promptAnalysis: any,
    userProfile: UserProfile,
    configuration?: GameConfiguration
  ): Promise<InteractiveStep[]> {
    const baseSteps = this.stepConfigs.get(promptAnalysis.gameClassification.genre)?.steps || 
                     this.stepConfigs.get('platformer')!.steps;

    return baseSteps.map(stepConfig => ({
      stepId: uuidv4(),
      type: stepConfig.type,
      name: stepConfig.name,
      description: stepConfig.description,
      variants: [],
      isCompleted: false,
      isRequired: stepConfig.required,
      estimatedDuration: this.estimateStepDuration(stepConfig.type, userProfile.experience),
      adaptiveHints: this.generateAdaptiveHints(stepConfig.type, promptAnalysis)
    }));
  }

  private updateGameEvolution(
    context: EnhancedInteractiveContext,
    stepType: StepType,
    variant: GenerationVariant
  ): void {
    switch (stepType) {
      case 'character':
        context.gameEvolution.narrative.character = variant.content;
        break;
      case 'mechanics':
        context.gameEvolution.narrative.progression = variant.content;
        break;
      case 'levels':
        context.gameEvolution.narrative.world = variant.content;
        break;
      // –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
    }
  }

  private getCoherenceRequirements(context: EnhancedInteractiveContext): any {
    return {
      themeConsistency: context.gameEvolution.theme,
      moodAlignment: context.gameEvolution.mood,
      audienceAppropriate: context.gameEvolution.targetAudience,
      technicalViability: context.gameEvolution.technicalConstraints
    };
  }

  private calculateVariantQuality(content: any, stepType: StepType): number {
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ
    let score = 50;
    
    if (content && typeof content === 'object') {
      score += 20;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
      const requiredFields = this.getRequiredFieldsForStepType(stepType);
      const presentFields = requiredFields.filter(field => content[field] !== undefined);
      score += (presentFields.length / requiredFields.length) * 30;
    }
    
    return Math.min(100, score);
  }

  private calculateCoherenceScore(content: any, context: EnhancedInteractiveContext): number {
    // –û—Ü–µ–Ω–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤—ã–±–æ—Ä–∞–º–∏
    let score = 70; // –±–∞–∑–æ–≤–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–µ
    if (content.theme && context.gameEvolution.theme) {
      if (content.theme.includes(context.gameEvolution.theme)) {
        score += 15;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
    if (content.mood && context.gameEvolution.mood) {
      if (content.mood === context.gameEvolution.mood) {
        score += 15;
      }
    }
    
    return Math.min(100, score);
  }

  private getRequiredFieldsForStepType(stepType: StepType): string[] {
    const fieldMap = {
      character: ['name', 'description', 'appearance'],
      mechanics: ['coreLoop', 'primaryMechanic'],
      levels: ['theme', 'layout'],
      graphics: ['artStyle', 'colorPalette'],
      sounds: ['audioStyle', 'mood'],
      ui: ['designPhilosophy', 'layoutPrinciples']
    };
    
    return fieldMap[stepType] || ['description'];
  }

  private generateReasoningForVariant(content: any, stepType: StepType, aiContext: any): string {
    return `–í–∞—Ä–∏–∞–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å —É—á–µ—Ç–æ–º –∂–∞–Ω—Ä–∞ ${aiContext.gameEvolution.theme} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ ${aiContext.userProfile.experience}`;
  }

  private updateQualityMetrics(current: QualityTracker, variants: GenerationVariant[]): QualityTracker {
    const avgQuality = variants.reduce((sum, v) => sum + (v.metadata?.qualityScore || 50), 0) / variants.length;
    const avgCoherence = variants.reduce((sum, v) => sum + (v.metadata?.coherenceScore || 50), 0) / variants.length;
    
    return {
      ...current,
      coherence: (current.coherence + avgCoherence) / 2,
      creativity: (current.creativity + avgQuality) / 2,
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∫–∞
      feasibility: current.feasibility,
      marketability: current.marketability,
      technicalSoundness: current.technicalSoundness
    };
  }

  private calculateOverallQuality(metrics: QualityTracker): number {
    return (metrics.coherence + metrics.creativity + metrics.feasibility + 
            metrics.marketability + metrics.technicalSoundness) / 5;
  }

  private calculateProgress(context: EnhancedInteractiveContext): number {
    const totalSteps = 6; // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤
    const completedSteps = context.completedSteps.size;
    return (completedSteps / totalSteps) * 100;
  }

  private estimateStepDuration(stepType: StepType, experience: string): number {
    const baseDurations = {
      character: 300, // 5 –º–∏–Ω—É—Ç
      mechanics: 600, // 10 –º–∏–Ω—É—Ç
      levels: 480,    // 8 –º–∏–Ω—É—Ç
      graphics: 240,  // 4 –º–∏–Ω—É—Ç—ã
      sounds: 180,    // 3 –º–∏–Ω—É—Ç—ã
      ui: 360         // 6 –º–∏–Ω—É—Ç
    };
    
    const experienceMultiplier = {
      beginner: 1.5,
      intermediate: 1.0,
      advanced: 0.8,
      professional: 0.6
    };
    
    return (baseDurations[stepType] || 300) * (experienceMultiplier[experience] || 1.0);
  }

  private generateAdaptiveHints(stepType: StepType, promptAnalysis: any): string[] {
    const baseHints = {
      character: ['–ü–æ–¥—É–º–∞–π—Ç–µ –æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –≥–µ—Ä–æ—è'],
      mechanics: ['–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ', '–û–±–µ—Å–ø–µ—á—å—Ç–µ –±–∞–ª–∞–Ω—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏'],
      levels: ['–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≤—ã–∑–æ–≤—ã', '–£—á—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏'],
      graphics: ['–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –∂–∞–Ω—Ä–∞', '–£—á—Ç–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'],
      sounds: ['–°–æ–∑–¥–∞–π—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –∑–≤—É–∫–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ', '–û–±–µ—Å–ø–µ—á—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ –∑–≤—É–∫'],
      ui: ['–°–¥–µ–ª–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º', '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤']
    };
    
    return baseHints[stepType] || ['–ë—É–¥—å—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã', '–£—á—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç'];
  }

  private async startEnhancedStep(gameId: string, stepIndex: number): Promise<void> {
    const context = this.activeGenerations.get(gameId);
    if (!context) return;

    this.logger.info(`üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ ${stepIndex} –¥–ª—è –∏–≥—Ä—ã ${gameId}`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const state = this.getGenerationState(gameId);
    if (state && stepIndex < state.steps.length) {
      const step = state.steps[stepIndex];
      await this.generateIntelligentVariants(gameId, step.stepId, 5);
    }
  }

  private async proceedToNextEnhancedStep(gameId: string): Promise<void> {
    const context = this.activeGenerations.get(gameId);
    if (!context) return;

    const state = this.getGenerationState(gameId);
    if (!state) return;

    const nextStepIndex = state.currentStepIndex + 1;
    
    if (nextStepIndex >= state.totalSteps) {
      // –í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–≥—Ä—É
      await this.completeEnhancedGeneration(gameId);
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
      state.currentStepIndex = nextStepIndex;
      await this.startEnhancedStep(gameId, nextStepIndex);
    }
  }

  private async completeEnhancedGeneration(gameId: string): Promise<string> {
    const context = this.activeGenerations.get(gameId);
    if (!context) {
      throw new Error(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${gameId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    this.logger.info(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${gameId}`);

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–≥—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const finalGamePath = await this.buildFinalGameWithContext(context);
    
    const state = this.getGenerationState(gameId);
    if (state) {
      state.generatedGame = finalGamePath;
      state.isActive = false;
    }

    this.emit('enhanced:generation:completed', {
      gameId,
      finalGame: {
        path: finalGamePath,
        downloadUrl: `/api/games/${gameId}/download`,
        qualityScore: this.calculateOverallQuality(context.qualityMetrics)
      },
      context: context
    });

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      this.activeGenerations.delete(gameId);
    }, 3600000); // 1 —á–∞—Å

    return finalGamePath;
  }

  private async buildFinalGameWithContext(context: EnhancedInteractiveContext): Promise<string> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∫–∏ –∏–≥—Ä—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
    const outputDir = path.join(process.cwd(), 'generated-games', context.gameId);
    await fs.mkdir(outputDir, { recursive: true });
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const result = {
      gameId: context.gameId,
      promptAnalysis: context.promptAnalysis,
      userProfile: context.userProfile,
      gameEvolution: context.gameEvolution,
      qualityMetrics: context.qualityMetrics,
      completedSteps: Object.fromEntries(context.completedSteps),
      generatedAt: new Date()
    };
    
    await fs.writeFile(
      path.join(outputDir, 'generation-result.json'),
      JSON.stringify(result, null, 2)
    );
    
    return outputDir;
  }

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
  public getGenerationState(gameId: string): InteractiveGenerationState | undefined {
    // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º undefined
    return undefined;
  }
} 
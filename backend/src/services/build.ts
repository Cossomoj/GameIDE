import fs from 'fs/promises';
import path from 'path';
import crypto from 'crypto';
import { LoggerService } from './logger';
import { BuildResult, GameManifest, ManifestFile, FileStructure, GameDesign } from '@/types';
import config from '@/config';

interface BuildRequest {
  gameId: string;
  structure: FileStructure;
  code: { [filename: string]: string };
  assets: { [path: string]: Buffer };
  gameDesign: GameDesign;
  outputPath: string;
}

export class BuildService {
  private logger: LoggerService;

  constructor() {
    this.logger = new LoggerService();
  }

  public async build(request: BuildRequest): Promise<BuildResult> {
    const { gameId, structure, code, assets, gameDesign, outputPath } = request;
    const startTime = Date.now();

    try {
      this.logger.info(`üî® –ù–∞—á–∞—Ç–∞ —Å–±–æ—Ä–∫–∞ –∏–≥—Ä—ã ${gameId}`);

      // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      await this.ensureDirectory(outputPath);

      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
      await this.createDirectoryStructure(outputPath, structure);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∫–æ–¥–∞
      const codeFiles = await this.writeCodeFiles(outputPath, code);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—Å—Å–µ—Ç—ã
      const assetFiles = await this.writeAssetFiles(outputPath, assets);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
      const allFiles = [...codeFiles, ...assetFiles];

      // –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
      const manifest = await this.createManifest(gameDesign, allFiles);
      await this.writeFile(path.join(outputPath, 'manifest.json'), JSON.stringify(manifest, null, 2));

      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      if (config.optimization.codeMinification) {
        await this.optimizeFiles(outputPath);
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏
      const buildSize = await this.calculateBuildSize(outputPath);

      const duration = Date.now() - startTime;
      this.logger.info(`‚úÖ –°–±–æ—Ä–∫–∞ –∏–≥—Ä—ã ${gameId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}ms`, {
        size: this.formatSize(buildSize),
        files: allFiles.length,
      });

      return {
        success: true,
        outputPath,
        size: buildSize,
        warnings: [],
        errors: [],
        manifest,
      };

    } catch (error) {
      const duration = Date.now() - startTime;
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –∏–≥—Ä—ã ${gameId}:`, error);

      return {
        success: false,
        outputPath,
        size: 0,
        warnings: [],
        errors: [error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏'],
        manifest: {
          name: gameDesign.title,
          version: '1.0.0',
          description: gameDesign.description,
          author: 'AI Game Generator',
          files: [],
          requirements: {
            yandexSDK: config.yandexGames.requiredSDKVersion,
          },
        },
      };
    }
  }

  private async createDirectoryStructure(basePath: string, structure: FileStructure): Promise<void> {
    for (const [key, value] of Object.entries(structure)) {
      const fullPath = path.join(basePath, key);

      if (typeof value === 'object' && value !== null) {
        // –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        await this.ensureDirectory(fullPath);
        await this.createDirectoryStructure(fullPath, value as FileStructure);
      }
      // –§–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø–æ–∑–∂–µ
    }
  }

  private async writeCodeFiles(basePath: string, code: { [filename: string]: string }): Promise<ManifestFile[]> {
    const files: ManifestFile[] = [];

    for (const [filename, content] of Object.entries(code)) {
      const filePath = path.join(basePath, filename);
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await this.ensureDirectory(path.dirname(filePath));
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
      await this.writeFile(filePath, content);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç
      const stats = await fs.stat(filePath);
      files.push({
        path: filename,
        size: stats.size,
        type: this.getFileType(filename),
        hash: this.calculateHash(content),
      });

      this.logger.fileOperation('create', filename, stats.size);
    }

    return files;
  }

  private async writeAssetFiles(basePath: string, assets: { [path: string]: Buffer }): Promise<ManifestFile[]> {
    const files: ManifestFile[] = [];

    for (const [assetPath, buffer] of Object.entries(assets)) {
      const filePath = path.join(basePath, assetPath);
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await this.ensureDirectory(path.dirname(filePath));
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
      await fs.writeFile(filePath, buffer);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç
      files.push({
        path: assetPath,
        size: buffer.length,
        type: this.getFileType(assetPath),
        hash: this.calculateHash(buffer),
      });

      this.logger.fileOperation('create', assetPath, buffer.length);
    }

    return files;
  }

  private async createManifest(gameDesign: GameDesign, files: ManifestFile[]): Promise<GameManifest> {
    return {
      name: gameDesign.title,
      version: '1.0.0',
      description: gameDesign.description,
      author: 'AI Game Generator',
      files,
      requirements: {
        yandexSDK: config.yandexGames.requiredSDKVersion,
      },
    };
  }

  private async optimizeFiles(buildPath: string): Promise<void> {
    this.logger.info('üöÄ –ù–∞—á–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤...');

    try {
      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JavaScript —Ñ–∞–π–ª–æ–≤
      await this.optimizeJavaScriptFiles(buildPath);
      
      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CSS —Ñ–∞–π–ª–æ–≤
      await this.optimizeCSSFiles(buildPath);
      
      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (config.optimization.assetOptimization) {
        await this.optimizeImageFiles(buildPath);
      }

      this.logger.info('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
    }
  }

  private async optimizeJavaScriptFiles(buildPath: string): Promise<void> {
    const jsFiles = await this.findFiles(buildPath, '.js');
    
    for (const jsFile of jsFiles) {
      try {
        const content = await fs.readFile(jsFile, 'utf-8');
        const optimized = this.minifyJavaScript(content);
        await fs.writeFile(jsFile, optimized);
        
        this.logger.debug(`–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω JS —Ñ–∞–π–ª: ${path.relative(buildPath, jsFile)}`);
      } catch (error) {
        this.logger.warn(`–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${jsFile}:`, error);
      }
    }
  }

  private async optimizeCSSFiles(buildPath: string): Promise<void> {
    const cssFiles = await this.findFiles(buildPath, '.css');
    
    for (const cssFile of cssFiles) {
      try {
        const content = await fs.readFile(cssFile, 'utf-8');
        const optimized = this.minifyCSS(content);
        await fs.writeFile(cssFile, optimized);
        
        this.logger.debug(`–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω CSS —Ñ–∞–π–ª: ${path.relative(buildPath, cssFile)}`);
      } catch (error) {
        this.logger.warn(`–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${cssFile}:`, error);
      }
    }
  }

  private async optimizeImageFiles(buildPath: string): Promise<void> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é sharp
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    const imageFiles = await this.findFiles(buildPath, ['.png', '.jpg', '.jpeg']);
    this.logger.debug(`–ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`);
  }

  private minifyJavaScript(code: string): string {
    // –ü—Ä–æ—Å—Ç–∞—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JavaScript
    return code
      .replace(/\/\*[\s\S]*?\*\//g, '') // –£–¥–∞–ª—è–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .replace(/\/\/.*$/gm, '')          // –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .replace(/\s+/g, ' ')              // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
      .replace(/;\s*}/g, '}')            // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
      .replace(/\s*{\s*/g, '{')          // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Å–∫–æ–±–æ–∫
      .replace(/\s*}\s*/g, '}')
      .replace(/\s*;\s*/g, ';')
      .trim();
  }

  private minifyCSS(css: string): string {
    // –ü—Ä–æ—Å—Ç–∞—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è CSS
    return css
      .replace(/\/\*[\s\S]*?\*\//g, '') // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .replace(/\s+/g, ' ')              // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/\s*{\s*/g, '{')          // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Å–∫–æ–±–æ–∫
      .replace(/\s*}\s*/g, '}')
      .replace(/\s*:\s*/g, ':')          // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –¥–≤–æ–µ—Ç–æ—á–∏–π
      .replace(/\s*;\s*/g, ';')          // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ç–æ—á–µ–∫ —Å –∑–∞–ø—è—Ç–æ–π
      .replace(/;\s*}/g, '}')            // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
      .trim();
  }

  private async calculateBuildSize(buildPath: string): Promise<number> {
    let totalSize = 0;
    
    const items = await fs.readdir(buildPath, { withFileTypes: true });
    
    for (const item of items) {
      const itemPath = path.join(buildPath, item.name);
      
      if (item.isDirectory()) {
        totalSize += await this.calculateBuildSize(itemPath);
      } else {
        const stats = await fs.stat(itemPath);
        totalSize += stats.size;
      }
    }
    
    return totalSize;
  }

  private async findFiles(dir: string, extensions: string | string[]): Promise<string[]> {
    const exts = Array.isArray(extensions) ? extensions : [extensions];
    const files: string[] = [];
    
    const items = await fs.readdir(dir, { withFileTypes: true });
    
    for (const item of items) {
      const itemPath = path.join(dir, item.name);
      
      if (item.isDirectory()) {
        files.push(...await this.findFiles(itemPath, exts));
      } else if (exts.some(ext => item.name.toLowerCase().endsWith(ext))) {
        files.push(itemPath);
      }
    }
    
    return files;
  }

  private getFileType(filename: string): string {
    const ext = path.extname(filename).toLowerCase();
    
    const typeMap: { [key: string]: string } = {
      '.html': 'text/html',
      '.js': 'application/javascript',
      '.css': 'text/css',
      '.json': 'application/json',
      '.png': 'image/png',
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.webp': 'image/webp',
      '.wav': 'audio/wav',
      '.mp3': 'audio/mpeg',
      '.ogg': 'audio/ogg',
    };
    
    return typeMap[ext] || 'application/octet-stream';
  }

  private calculateHash(data: string | Buffer): string {
    return crypto.createHash('sha256').update(data).digest('hex').substring(0, 16);
  }

  private async ensureDirectory(dirPath: string): Promise<void> {
    try {
      await fs.mkdir(dirPath, { recursive: true });
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if ((error as any).code !== 'EEXIST') {
        throw error;
      }
    }
  }

  private async writeFile(filePath: string, content: string): Promise<void> {
    try {
      await fs.writeFile(filePath, content, 'utf-8');
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
      throw error;
    }
  }

  private formatSize(bytes: number): string {
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 Bytes';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–±–æ—Ä–∫–∏
  public async validateBuild(buildPath: string): Promise<{ isValid: boolean; issues: string[] }> {
    const issues: string[] = [];

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      const requiredFiles = ['index.html', 'manifest.json'];
      for (const file of requiredFiles) {
        try {
          await fs.access(path.join(buildPath, file));
        } catch {
          issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${file}`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏
      const size = await this.calculateBuildSize(buildPath);
      if (size > config.yandexGames.maxSize) {
        issues.push(`–†–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏ (${this.formatSize(size)}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç (${this.formatSize(config.yandexGames.maxSize)})`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON —Ñ–∞–π–ª–æ–≤
      const jsonFiles = await this.findFiles(buildPath, '.json');
      for (const jsonFile of jsonFiles) {
        try {
          const content = await fs.readFile(jsonFile, 'utf-8');
          JSON.parse(content);
        } catch {
          issues.push(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON —Ñ–∞–π–ª: ${path.relative(buildPath, jsonFile)}`);
        }
      }

      return {
        isValid: issues.length === 0,
        issues,
      };

    } catch (error) {
      issues.push(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–±–æ—Ä–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      return {
        isValid: false,
        issues,
      };
    }
  }
} 
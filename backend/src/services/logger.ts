import winston from 'winston';
import path from 'path';
import fs from 'fs';

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const logsDir = path.join(process.cwd(), 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

export class LoggerService {
  private logger: winston.Logger;

  constructor() {
    this.logger = winston.createLogger({
      level: process.env.LOG_LEVEL || 'info',
      format: winston.format.combine(
        winston.format.timestamp({
          format: 'YYYY-MM-DD HH:mm:ss'
        }),
        winston.format.errors({ stack: true }),
        winston.format.printf(({ timestamp, level, message, ...meta }) => {
          let log = `${timestamp} [${level.toUpperCase()}]: ${message}`;
          
          if (Object.keys(meta).length > 0) {
            log += `\n${JSON.stringify(meta, null, 2)}`;
          }
          
          return log;
        })
      ),
      transports: [
        // –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        new winston.transports.Console({
          format: winston.format.combine(
            winston.format.colorize(),
            winston.format.simple()
          )
        }),
        
        // –§–∞–π–ª –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤
        new winston.transports.File({
          filename: path.join(logsDir, 'combined.log'),
          maxsize: 5 * 1024 * 1024, // 5MB
          maxFiles: 5,
          tailable: true
        }),
        
        // –§–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫
        new winston.transports.File({
          filename: path.join(logsDir, 'error.log'),
          level: 'error',
          maxsize: 5 * 1024 * 1024, // 5MB
          maxFiles: 5,
          tailable: true
        })
      ],
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
      exceptionHandlers: [
        new winston.transports.File({
          filename: path.join(logsDir, 'exceptions.log')
        })
      ],
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–æ–º–∏—Å–æ–≤
      rejectionHandlers: [
        new winston.transports.File({
          filename: path.join(logsDir, 'rejections.log')
        })
      ]
    });

    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    if (process.env.NODE_ENV === 'production') {
      this.logger.remove(this.logger.transports[0]);
    }
  }

  info(message: string, meta?: any): void {
    this.logger.info(message, meta);
  }

  warn(message: string, meta?: any): void {
    this.logger.warn(message, meta);
  }

  error(message: string, meta?: any): void {
    this.logger.error(message, meta);
  }

  debug(message: string, meta?: any): void {
    this.logger.debug(message, meta);
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  generationStart(gameId: string, prompt: any): void {
    this.info(`üéÆ –ù–∞—á–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä—ã ${gameId}`, { gameId, prompt });
  }

  generationStep(gameId: string, step: string, progress: number): void {
    this.info(`üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${gameId}: ${step} (${progress}%)`, { gameId, step, progress });
  }

  generationComplete(gameId: string, duration: number, size: number): void {
    this.info(`üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${gameId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`, { 
      gameId, 
      duration: `${duration}ms`, 
      size: `${(size / 1024 / 1024).toFixed(2)}MB` 
    });
  }

  generationError(gameId: string, step: string, error: any): void {
    this.error(`üí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${gameId} –Ω–∞ —ç—Ç–∞–ø–µ ${step}`, { gameId, step, error });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∑–∞–ø—Ä–æ—Å–æ–≤
  aiRequest(service: string, model: string, tokens: number): void {
    this.info(`ü§ñ AI –∑–∞–ø—Ä–æ—Å: ${service}/${model}`, { service, model, tokens });
  }

  aiResponse(service: string, model: string, tokens: number, duration: number): void {
    this.info(`‚ú® AI –æ—Ç–≤–µ—Ç: ${service}/${model}`, { service, model, tokens, duration: `${duration}ms` });
  }

  aiError(service: string, error: any): void {
    this.error(`üö´ –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞: ${service}`, { service, error });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
  fileOperation(operation: string, path: string, size?: number): void {
    this.info(`üìÅ ${operation}: ${path}`, { operation, path, size });
  }

  // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  performance(operation: string, duration: number, metadata?: any): void {
    this.info(`‚ö° ${operation} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${duration}ms`, { operation, duration, ...metadata });
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  securityEvent(event: string, ip: string, details?: any): void {
    this.warn(`üîí –°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${event}`, { event, ip, ...details });
  }

  // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  systemEvent(event: string, details?: any): void {
    this.info(`üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event}`, { event, ...details });
  }
} 
import { LoggerService } from '../logger';
import { StepType } from '../../types/interactive';

interface PromptQualityMetrics {
  clarity: number; // –Ø—Å–Ω–æ—Å—Ç—å –∏ –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å (0-1)
  specificity: number; // –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (0-1)
  creativity: number; // –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (0-1)
  technical: number; // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å (0-1)
  coherence: number; // –°–≤—è–∑–Ω–æ—Å—Ç—å –∏ –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å (0-1)
  completeness: number; // –ü–æ–ª–Ω–æ—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏—è (0-1)
  overallScore: number; // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ (0-1)
}

interface QualityIssue {
  type: 'warning' | 'error' | 'suggestion';
  severity: 'low' | 'medium' | 'high';
  category: 'clarity' | 'specificity' | 'creativity' | 'technical' | 'coherence' | 'completeness';
  message: string;
  suggestion?: string;
  examples?: string[];
}

interface PromptAnalysis {
  metrics: PromptQualityMetrics;
  issues: QualityIssue[];
  improvements: string[];
  optimizedPrompt?: string;
  passesQualityCheck: boolean;
  recommendations: {
    priority: 'high' | 'medium' | 'low';
    action: string;
    description: string;
  }[];
}

interface QualityCheckRules {
  stepType: StepType;
  minLength: number;
  maxLength: number;
  requiredKeywords: string[];
  forbiddenWords: string[];
  specificityRules: {
    mustInclude: string[];
    shouldAvoid: string[];
  };
  genreSpecific: {
    [genre: string]: {
      keywords: string[];
      patterns: string[];
    };
  };
}

export class PromptQualityChecker {
  private logger: LoggerService;
  private qualityRules: Map<StepType, QualityCheckRules> = new Map();
  private readonly QUALITY_THRESHOLD = 0.7; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞

  constructor() {
    this.logger = new LoggerService();
    this.initializeQualityRules();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  public async analyzePromptQuality(
    prompt: string,
    stepType: StepType,
    genre: string,
    context?: any
  ): Promise<PromptAnalysis> {
    try {
      this.logger.info(`üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è ${stepType}/${genre}`);

      const metrics = this.calculateQualityMetrics(prompt, stepType, genre, context);
      const issues = this.identifyQualityIssues(prompt, stepType, genre, metrics);
      const improvements = this.generateImprovements(prompt, stepType, genre, issues);
      const recommendations = this.generateRecommendations(metrics, issues);
      const optimizedPrompt = this.generateOptimizedPrompt(prompt, improvements);

      const analysis: PromptAnalysis = {
        metrics,
        issues,
        improvements,
        optimizedPrompt,
        passesQualityCheck: metrics.overallScore >= this.QUALITY_THRESHOLD,
        recommendations
      };

      this.logger.info(`üìä –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–∞: ${(metrics.overallScore * 100).toFixed(1)}%`);

      return analysis;

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–∞:', error);
      
      return {
        metrics: this.getDefaultMetrics(),
        issues: [{
          type: 'error',
          severity: 'high',
          category: 'technical',
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–∞'
        }],
        improvements: [],
        passesQualityCheck: false,
        recommendations: []
      };
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–π–¥–µ–Ω/–Ω–µ –ø—Ä–æ–π–¥–µ–Ω)
   */
  public async quickQualityCheck(
    prompt: string,
    stepType: StepType,
    genre: string
  ): Promise<{
    passed: boolean;
    score: number;
    criticalIssues: string[];
  }> {
    try {
      const analysis = await this.analyzePromptQuality(prompt, stepType, genre);
      
      const criticalIssues = analysis.issues
        .filter(issue => issue.severity === 'high')
        .map(issue => issue.message);

      return {
        passed: analysis.passesQualityCheck,
        score: analysis.metrics.overallScore,
        criticalIssues
      };

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:', error);
      return {
        passed: false,
        score: 0,
        criticalIssues: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞']
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  public async analyzeBatchQuality(
    prompts: { text: string; stepType: StepType; genre: string }[]
  ): Promise<{
    overallQuality: number;
    passRate: number;
    commonIssues: { issue: string; frequency: number }[];
    bestPractices: string[];
    worstPerformingSteps: { stepType: StepType; score: number }[];
  }> {
    try {
      const analyses = await Promise.all(
        prompts.map(p => this.analyzePromptQuality(p.text, p.stepType, p.genre))
      );

      const overallQuality = analyses.reduce((sum, a) => sum + a.metrics.overallScore, 0) / analyses.length;
      const passRate = analyses.filter(a => a.passesQualityCheck).length / analyses.length;

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
      const issueFrequency = new Map<string, number>();
      analyses.forEach(a => {
        a.issues.forEach(issue => {
          issueFrequency.set(issue.message, (issueFrequency.get(issue.message) || 0) + 1);
        });
      });

      const commonIssues = Array.from(issueFrequency.entries())
        .map(([issue, frequency]) => ({ issue, frequency }))
        .sort((a, b) => b.frequency - a.frequency)
        .slice(0, 5);

      // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
      const bestPractices = this.extractBestPractices(analyses);

      // –ù–∞—Ö–æ–¥–∏–º —Ö—É–¥—à–∏–µ —ç—Ç–∞–ø—ã
      const stepScores = new Map<StepType, number[]>();
      prompts.forEach((p, i) => {
        if (!stepScores.has(p.stepType)) {
          stepScores.set(p.stepType, []);
        }
        stepScores.get(p.stepType)!.push(analyses[i].metrics.overallScore);
      });

      const worstPerformingSteps = Array.from(stepScores.entries())
        .map(([stepType, scores]) => ({
          stepType,
          score: scores.reduce((sum, s) => sum + s, 0) / scores.length
        }))
        .sort((a, b) => a.score - b.score)
        .slice(0, 3);

      return {
        overallQuality,
        passRate,
        commonIssues,
        bestPractices,
        worstPerformingSteps
      };

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤:', error);
      return {
        overallQuality: 0,
        passRate: 0,
        commonIssues: [],
        bestPractices: [],
        worstPerformingSteps: []
      };
    }
  }

  private initializeQualityRules(): void {
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    this.qualityRules.set('character', {
      stepType: 'character',
      minLength: 20,
      maxLength: 500,
      requiredKeywords: ['–ø–µ—Ä—Å–æ–Ω–∞–∂', '–≤–Ω–µ—à–Ω–æ—Å—Ç—å', '—Å—Ç–∏–ª—å'],
      forbiddenWords: ['–ø–ª–æ—Ö–æ–π', '—Å–∫—É—á–Ω—ã–π', '–Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π'],
      specificityRules: {
        mustInclude: ['—Ü–≤–µ—Ç', '—Ä–∞–∑–º–µ—Ä', '—Ñ–æ—Ä–º–∞'],
        shouldAvoid: ['—á—Ç–æ-—Ç–æ', '–∫–∞–∫–æ–π-—Ç–æ', '–ø—Ä–∏–º–µ—Ä–Ω–æ']
      },
      genreSpecific: {
        'platformer': {
          keywords: ['–ø—Ä—ã–∂–∫–∏', '–¥–≤–∏–∂–µ–Ω–∏–µ', '–∞–Ω–∏–º–∞—Ü–∏—è'],
          patterns: ['—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', '—Ñ–∏–∑–∏–∫–∞']
        },
        'rpg': {
          keywords: ['–∫–ª–∞—Å—Å', '–Ω–∞–≤—ã–∫–∏', '—ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞'],
          patterns: ['—Ä–∞–∑–≤–∏—Ç–∏–µ', '–∏—Å—Ç–æ—Ä–∏—è']
        }
      }
    });

    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫
    this.qualityRules.set('mechanics', {
      stepType: 'mechanics',
      minLength: 30,
      maxLength: 600,
      requiredKeywords: ['–º–µ—Ö–∞–Ω–∏–∫–∞', '–∏–≥—Ä–æ–∫', '–¥–µ–π—Å—Ç–≤–∏–µ'],
      forbiddenWords: ['—Å–ª–æ–∂–Ω–æ', '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ', '–Ω–µ –∑–Ω–∞—é'],
      specificityRules: {
        mustInclude: ['—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Ü–µ–ª—å', '–ø—Ä–∞–≤–∏–ª–∞'],
        shouldAvoid: ['–≤–æ–∑–º–æ–∂–Ω–æ', '–º–æ–∂–µ—Ç –±—ã—Ç—å', '–ø–æ –∂–µ–ª–∞–Ω–∏—é']
      },
      genreSpecific: {
        'puzzle': {
          keywords: ['–ª–æ–≥–∏–∫–∞', '—Ä–µ—à–µ–Ω–∏–µ', '–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞'],
          patterns: ['—Å–ª–æ–∂–Ω–æ—Å—Ç—å', '–ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è']
        },
        'arcade': {
          keywords: ['—Å–∫–æ—Ä–æ—Å—Ç—å', '—Ä–µ–∞–∫—Ü–∏—è', '—Å—á–µ—Ç'],
          patterns: ['–≤—Ä–µ–º—è', '—Ä–µ–∫–æ—Ä–¥—ã']
        }
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç—Ç–∞–ø–æ–≤
    this.initializeAdditionalRules();
  }

  private initializeAdditionalRules(): void {
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
    this.qualityRules.set('levels', {
      stepType: 'levels',
      minLength: 25,
      maxLength: 400,
      requiredKeywords: ['—É—Ä–æ–≤–µ–Ω—å', '–¥–∏–∑–∞–π–Ω', '–∏–≥—Ä–æ–∫'],
      forbiddenWords: ['–ø—É—Å—Ç–æ–π', '–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π'],
      specificityRules: {
        mustInclude: ['—Ä–∞–∑–º–µ—Ä', '–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è', '—Ü–µ–ª—å'],
        shouldAvoid: ['–ª—é–±–æ–π', '–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π']
      },
      genreSpecific: {
        'platformer': {
          keywords: ['–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', '–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è', '–ø—Ä—ã–∂–∫–∏'],
          patterns: ['–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å', '—Å–µ–∫—Ä–µ—Ç—ã']
        }
      }
    });

    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∏
    this.qualityRules.set('graphics', {
      stepType: 'graphics',
      minLength: 20,
      maxLength: 300,
      requiredKeywords: ['—Å—Ç–∏–ª—å', '—Ü–≤–µ—Ç', '–≤–∏–∑—É–∞–ª'],
      forbiddenWords: ['–Ω–µ–≤–∞–∂–Ω–æ', '–ª—é–±–æ–π'],
      specificityRules: {
        mustInclude: ['–ø–∞–ª–∏—Ç—Ä–∞', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'],
        shouldAvoid: ['—á—Ç–æ —É–≥–æ–¥–Ω–æ', '–Ω–µ –≤–∞–∂–Ω–æ']
      },
      genreSpecific: {
        'horror': {
          keywords: ['—Ç–µ–º–Ω—ã–π', '–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞', '—Ç–µ–Ω–∏'],
          patterns: ['–∫–æ–Ω—Ç—Ä–∞—Å—Ç', '–º—Ä–∞—á–Ω–æ—Å—Ç—å']
        }
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ —ç—Ç–∞–ø–æ–≤
    this.initializeNewStepTypeRules();
  }

  private initializeNewStepTypeRules(): void {
    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
    this.qualityRules.set('monetization', {
      stepType: 'monetization',
      minLength: 30,
      maxLength: 400,
      requiredKeywords: ['–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è', '–¥–æ—Ö–æ–¥', '–º–æ–¥–µ–ª—å'],
      forbiddenWords: ['–æ–±–º–∞–Ω', '–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ'],
      specificityRules: {
        mustInclude: ['—Ü–µ–Ω–∞', '—Ü–µ–Ω–Ω–æ—Å—Ç—å', '–∞—É–¥–∏—Ç–æ—Ä–∏—è'],
        shouldAvoid: ['–¥–æ—Ä–æ–≥–æ', '–¥–µ—à–µ–≤–æ']
      },
      genreSpecific: {
        'casual': {
          keywords: ['—Ä–µ–∫–ª–∞–º–∞', '–∫–æ—Å–º–µ—Ç–∏–∫–∞'],
          patterns: ['–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ—Å—Ç—å', '–Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç—å']
        }
      }
    });

    // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
    this.qualityRules.set('multiplayer', {
      stepType: 'multiplayer',
      minLength: 25,
      maxLength: 350,
      requiredKeywords: ['–∏–≥—Ä–æ–∫–∏', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ'],
      forbiddenWords: ['—Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã'],
      specificityRules: {
        mustInclude: ['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '—Ä–æ–ª–∏', '–æ–±—â–µ–Ω–∏–µ'],
        shouldAvoid: ['—Ö–∞–æ—Å', '–±–µ—Å–ø–æ—Ä—è–¥–æ–∫']
      },
      genreSpecific: {
        'competitive': {
          keywords: ['–±–∞–ª–∞–Ω—Å', '–Ω–∞–≤—ã–∫', '—Ä–µ–π—Ç–∏–Ω–≥'],
          patterns: ['—á–µ—Å—Ç–Ω–æ—Å—Ç—å', '—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ']
        }
      }
    });
  }

  private calculateQualityMetrics(
    prompt: string,
    stepType: StepType,
    genre: string,
    context?: any
  ): PromptQualityMetrics {
    const rules = this.qualityRules.get(stepType);
    
    // –Ø—Å–Ω–æ—Å—Ç—å
    const clarity = this.calculateClarity(prompt);
    
    // –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å
    const specificity = this.calculateSpecificity(prompt, rules);
    
    // –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
    const creativity = this.calculateCreativity(prompt, stepType);
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    const technical = this.calculateTechnicalScore(prompt, rules);
    
    // –°–≤—è–∑–Ω–æ—Å—Ç—å
    const coherence = this.calculateCoherence(prompt, context);
    
    // –ü–æ–ª–Ω–æ—Ç–∞
    const completeness = this.calculateCompleteness(prompt, rules);

    // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    const overallScore = (clarity + specificity + creativity + technical + coherence + completeness) / 6;

    return {
      clarity,
      specificity,
      creativity,
      technical,
      coherence,
      completeness,
      overallScore
    };
  }

  private calculateClarity(prompt: string): number {
    let score = 0.5; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    const sentences = prompt.split(/[.!?]+/).filter(s => s.trim().length > 0);
    const avgSentenceLength = sentences.reduce((sum, s) => sum + s.length, 0) / sentences.length;
    
    if (avgSentenceLength < 100) score += 0.2; // –ù–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if (avgSentenceLength > 20) score += 0.1; // –ù–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª–æ–≤
    const complexWords = prompt.match(/\b\w{10,}\b/g) || [];
    if (complexWords.length / prompt.split(' ').length < 0.1) score += 0.2;

    return Math.min(score, 1);
  }

  private calculateSpecificity(prompt: string, rules?: QualityCheckRules): number {
    let score = 0.3; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
    const specificWords = ['—Ä–∞–∑–º–µ—Ä', '—Ü–≤–µ—Ç', '—Ñ–æ—Ä–º–∞', '—Å—Ç–∏–ª—å', '—Ç–∏–ø', '–≤–∏–¥', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'];
    const foundSpecific = specificWords.filter(word => 
      prompt.toLowerCase().includes(word)
    ).length;
    
    score += (foundSpecific / specificWords.length) * 0.4;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±–µ–≥–∞–Ω–∏–µ —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
    const vagueWords = ['—á—Ç–æ-—Ç–æ', '–∫–∞–∫-—Ç–æ', '–ø—Ä–∏–º–µ—Ä–Ω–æ', '–≤–æ–∑–º–æ–∂–Ω–æ', '–º–æ–∂–µ—Ç –±—ã—Ç—å'];
    const foundVague = vagueWords.filter(word => 
      prompt.toLowerCase().includes(word)
    ).length;
    
    score -= foundVague * 0.1;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    if (rules?.specificityRules) {
      const foundRequired = rules.specificityRules.mustInclude.filter(word =>
        prompt.toLowerCase().includes(word)
      ).length;
      score += (foundRequired / rules.specificityRules.mustInclude.length) * 0.3;
    }

    return Math.max(Math.min(score, 1), 0);
  }

  private calculateCreativity(prompt: string, stepType: StepType): number {
    let score = 0.4; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–ª–æ–≤
    const words = prompt.toLowerCase().split(/\s+/);
    const uniqueWords = new Set(words);
    const diversity = uniqueWords.size / words.length;
    score += diversity * 0.3;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤
    const creativeWords = ['—É–Ω–∏–∫–∞–ª—å–Ω—ã–π', '–Ω–µ–æ–±—ã—á–Ω—ã–π', '–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π', '–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π'];
    const foundCreative = creativeWords.filter(word => 
      prompt.toLowerCase().includes(word)
    ).length;
    score += (foundCreative / creativeWords.length) * 0.3;

    return Math.min(score, 1);
  }

  private calculateTechnicalScore(prompt: string, rules?: QualityCheckRules): number {
    let score = 0.5; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

    if (!rules) return score;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    if (prompt.length >= rules.minLength && prompt.length <= rules.maxLength) {
      score += 0.2;
    } else {
      score -= 0.1;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const foundRequired = rules.requiredKeywords.filter(keyword =>
      prompt.toLowerCase().includes(keyword.toLowerCase())
    ).length;
    score += (foundRequired / rules.requiredKeywords.length) * 0.2;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    const foundForbidden = rules.forbiddenWords.filter(word =>
      prompt.toLowerCase().includes(word.toLowerCase())
    ).length;
    score -= foundForbidden * 0.1;

    return Math.max(Math.min(score, 1), 0);
  }

  private calculateCoherence(prompt: string, context?: any): number {
    let score = 0.6; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    const sentences = prompt.split(/[.!?]+/).filter(s => s.trim().length > 0);
    
    if (sentences.length > 1) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑—É—é—â–∏—Ö —Å–ª–æ–≤
      const connectors = ['—Ç–∞–∫–∂–µ', '–∫—Ä–æ–º–µ —Ç–æ–≥–æ', '–ø—Ä–∏ —ç—Ç–æ–º', '–æ–¥–Ω–∞–∫–æ', '–ø–æ—ç—Ç–æ–º—É'];
      const foundConnectors = connectors.filter(conn => 
        prompt.toLowerCase().includes(conn)
      ).length;
      score += (foundConnectors / sentences.length) * 0.4;
    }

    return Math.min(score, 1);
  }

  private calculateCompleteness(prompt: string, rules?: QualityCheckRules): number {
    let score = 0.4; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

    if (!rules) return score;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
    const aspects = ['—á—Ç–æ', '–∫–∞–∫', '–∑–∞—á–µ–º', '–≥–¥–µ']; // –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const coveredAspects = aspects.filter(aspect => {
      switch (aspect) {
        case '—á—Ç–æ': return /—á—Ç–æ|–∫–∞–∫–æ–π|–∫–∞–∫–∞—è|–∫–∞–∫–æ–µ/.test(prompt.toLowerCase());
        case '–∫–∞–∫': return /–∫–∞–∫|—Å–ø–æ—Å–æ–±|–º–µ—Ç–æ–¥/.test(prompt.toLowerCase());
        case '–∑–∞—á–µ–º': return /—Ü–µ–ª—å|–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ|–¥–ª—è/.test(prompt.toLowerCase());
        case '–≥–¥–µ': return /–≥–¥–µ|–º–µ—Å—Ç–æ|–æ–±–ª–∞—Å—Ç—å/.test(prompt.toLowerCase());
        default: return false;
      }
    }).length;

    score += (coveredAspects / aspects.length) * 0.6;

    return Math.min(score, 1);
  }

  private identifyQualityIssues(
    prompt: string,
    stepType: StepType,
    genre: string,
    metrics: PromptQualityMetrics
  ): QualityIssue[] {
    const issues: QualityIssue[] = [];
    const rules = this.qualityRules.get(stepType);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—Å–Ω–æ—Å—Ç–∏
    if (metrics.clarity < 0.5) {
      issues.push({
        type: 'warning',
        severity: 'medium',
        category: 'clarity',
        message: '–ü—Ä–æ–º–ø—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è—Å–Ω—ã–º',
        suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏
    if (metrics.specificity < 0.4) {
      issues.push({
        type: 'warning',
        severity: 'high',
        category: 'specificity',
        message: '–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã–π',
        suggestion: '–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: —Ä–∞–∑–º–µ—Ä—ã, —Ü–≤–µ—Ç–∞, —Å—Ç–∏–ª–∏'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (rules) {
      if (prompt.length < rules.minLength) {
        issues.push({
          type: 'error',
          severity: 'high',
          category: 'completeness',
          message: `–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${prompt.length} —Å–∏–º–≤–æ–ª–æ–≤, –º–∏–Ω–∏–º—É–º ${rules.minLength})`,
          suggestion: '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–π'
        });
      }

      if (prompt.length > rules.maxLength) {
        issues.push({
          type: 'warning',
          severity: 'medium',
          category: 'clarity',
          message: `–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (${prompt.length} —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º ${rules.maxLength})`,
          suggestion: '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ'
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    if (metrics.technical < 0.5) {
      issues.push({
        type: 'error',
        severity: 'high',
        category: 'technical',
        message: '–ü—Ä–æ–º–ø—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'
      });
    }

    return issues;
  }

  private generateImprovements(
    prompt: string,
    stepType: StepType,
    genre: string,
    issues: QualityIssue[]
  ): string[] {
    const improvements: string[] = [];

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    issues.forEach(issue => {
      if (issue.suggestion) {
        improvements.push(issue.suggestion);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ —ç—Ç–∞–ø–∞ —É–ª—É—á—à–µ–Ω–∏—è
    const typeSpecificImprovements = this.getTypeSpecificImprovements(stepType, genre);
    improvements.push(...typeSpecificImprovements);

    return [...new Set(improvements)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }

  private generateRecommendations(
    metrics: PromptQualityMetrics,
    issues: QualityIssue[]
  ): Array<{
    priority: 'high' | 'medium' | 'low';
    action: string;
    description: string;
  }> {
    const recommendations: Array<{
      priority: 'high' | 'medium' | 'low';
      action: string;
      description: string;
    }> = [];

    // –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const highSeverityIssues = issues.filter(i => i.severity === 'high');
    if (highSeverityIssues.length > 0) {
      recommendations.push({
        priority: 'high',
        action: '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
        description: `–ù–∞–π–¥–µ–Ω–æ ${highSeverityIssues.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞`
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
    if (metrics.specificity < 0.5) {
      recommendations.push({
        priority: 'high',
        action: '–ü–æ–≤—ã—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å',
        description: '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫'
      });
    }

    if (metrics.creativity < 0.4) {
      recommendations.push({
        priority: 'medium',
        action: '–£–≤–µ–ª–∏—á–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å',
        description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –ª–µ–∫—Å–∏–∫—É –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏'
      });
    }

    return recommendations;
  }

  private generateOptimizedPrompt(prompt: string, improvements: string[]): string {
    // –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
    if (improvements.length === 0) {
      return prompt;
    }

    const optimizationHints = improvements
      .filter(imp => imp.includes('–î–æ–±–∞–≤—å—Ç–µ') || imp.includes('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ'))
      .slice(0, 2); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏—è

    if (optimizationHints.length > 0) {
      return `${prompt} (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—á—Ç–∏—Ç–µ: ${optimizationHints.join(', ')})`;
    }

    return prompt;
  }

  private getTypeSpecificImprovements(stepType: StepType, genre: string): string[] {
    const improvements: string[] = [];

    switch (stepType) {
      case 'character':
        improvements.push('–û–ø–∏—à–∏—Ç–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', '–£–∫–∞–∂–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏');
        break;
      case 'mechanics':
        improvements.push('–î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∏–≥—Ä–æ–∫–∞');
        break;
      case 'levels':
        improvements.push('–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É', '–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è');
        break;
      case 'monetization':
        improvements.push('–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é', '–û–ø–∏—à–∏—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
        break;
    }

    return improvements;
  }

  private extractBestPractices(analyses: PromptAnalysis[]): string[] {
    const practices: string[] = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    const successfulAnalyses = analyses.filter(a => a.passesQualityCheck);
    
    if (successfulAnalyses.length > 0) {
      const avgClarity = successfulAnalyses.reduce((sum, a) => sum + a.metrics.clarity, 0) / successfulAnalyses.length;
      if (avgClarity > 0.8) {
        practices.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Å–Ω—ã–µ –∏ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏');
      }

      const avgSpecificity = successfulAnalyses.reduce((sum, a) => sum + a.metrics.specificity, 0) / successfulAnalyses.length;
      if (avgSpecificity > 0.7) {
        practices.push('–í–∫–ª—é—á–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç–æ—Å—Ç–∏');
      }
    }

    if (practices.length === 0) {
      practices.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫');
    }

    return practices;
  }

  private getDefaultMetrics(): PromptQualityMetrics {
    return {
      clarity: 0.5,
      specificity: 0.5,
      creativity: 0.5,
      technical: 0.5,
      coherence: 0.5,
      completeness: 0.5,
      overallScore: 0.5
    };
  }
} 
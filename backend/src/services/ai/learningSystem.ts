import { EventEmitter } from 'events';
import { LoggerService } from '../logger';
import { GenerationVariant, InteractiveGenerationState, StepType } from '../../types/interactive';

interface LearningData {
  stepType: StepType;
  prompt: string;
  context: any;
  variants: GenerationVariant[];
  selectedVariantId: string;
  userFeedback?: {
    rating: number; // 1-5
    comments?: string;
    usedInFinalGame: boolean;
  };
  sessionId: string;
  userId?: string;
  timestamp: Date;
  gameGenre: string;
  finalGameSuccess?: boolean; // –ë—ã–ª–∞ –ª–∏ –∏–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
}

interface LearningPattern {
  stepType: StepType;
  genre: string;
  successfulPromptPatterns: string[];
  successfulContextPatterns: any[];
  avgRating: number;
  totalSamples: number;
  lastUpdated: Date;
  improvedPrompts: string[];
  commonFailures: string[];
}

interface QualityMetrics {
  coherence: number; // –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å –æ–±—â–∏–º –≤–∏–¥–µ–Ω–∏–µ–º –∏–≥—Ä—ã
  creativity: number; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
  usability: number; // –ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  userSatisfaction: number; // –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  technicalFeasibility: number; // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç—å
}

interface PromptOptimization {
  originalPrompt: string;
  optimizedPrompt: string;
  improvements: string[];
  confidence: number;
  basedOnSamples: number;
}

export class AILearningSystem extends EventEmitter {
  private logger: LoggerService;
  private learningData: Map<string, LearningData[]> = new Map();
  private patterns: Map<string, LearningPattern> = new Map();
  private readonly MIN_SAMPLES_FOR_PATTERN = 5;
  private readonly LEARNING_RATE = 0.1;

  constructor() {
    super();
    this.logger = new LoggerService();
    this.initializeLearningSystem();
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
   */
  public async recordUserChoice(data: {
    gameId: string;
    stepType: StepType;
    prompt: string;
    context: any;
    variants: GenerationVariant[];
    selectedVariantId: string;
    userId?: string;
    gameGenre: string;
  }): Promise<void> {
    try {
      const learningRecord: LearningData = {
        stepType: data.stepType,
        prompt: data.prompt,
        context: data.context,
        variants: data.variants,
        selectedVariantId: data.selectedVariantId,
        sessionId: data.gameId,
        userId: data.userId,
        timestamp: new Date(),
        gameGenre: data.gameGenre
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
      const key = `${data.stepType}_${data.gameGenre}`;
      if (!this.learningData.has(key)) {
        this.learningData.set(key, []);
      }
      this.learningData.get(key)!.push(learningRecord);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
      await this.updateLearningPatterns(key);

      this.logger.info(`üìö –ó–∞–ø–∏—Å–∞–Ω –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data.stepType} –¥–ª—è –∏–≥—Ä—ã ${data.gameId}`);

      this.emit('learning:choice_recorded', {
        gameId: data.gameId,
        stepType: data.stepType,
        confidence: this.getPatternConfidence(key)
      });

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async recordUserFeedback(
    gameId: string,
    stepType: StepType,
    rating: number,
    comments?: string,
    usedInFinalGame: boolean = false
  ): Promise<void> {
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      for (const [key, records] of this.learningData.entries()) {
        const record = records.find(r => 
          r.sessionId === gameId && r.stepType === stepType
        );
        
        if (record) {
          record.userFeedback = {
            rating,
            comments,
            usedInFinalGame
          };

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —É—á–µ—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
          await this.updateLearningPatterns(key);
          
          this.logger.info(`üí¨ –ó–∞–ø–∏—Å–∞–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: ${rating}/5 –¥–ª—è ${stepType} –≤ –∏–≥—Ä–µ ${gameId}`);
          
          this.emit('learning:feedback_recorded', {
            gameId,
            stepType,
            rating,
            improvedQuality: rating >= 4
          });
          
          break;
        }
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', error);
    }
  }

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã
   */
  public async recordGameSuccess(gameId: string, successful: boolean): Promise<void> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
      for (const records of this.learningData.values()) {
        records
          .filter(r => r.sessionId === gameId)
          .forEach(r => r.finalGameSuccess = successful);
      }

      this.logger.info(`üéØ –ó–∞–ø–∏—Å–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã ${gameId}: ${successful ? '—É—Å–ø–µ—Ö' : '–Ω–µ—É–¥–∞—á–∞'}`);

      this.emit('learning:game_success_recorded', {
        gameId,
        successful
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–∏—è
   */
  public async getOptimizedPrompt(
    originalPrompt: string,
    stepType: StepType,
    genre: string,
    context?: any
  ): Promise<PromptOptimization> {
    try {
      const key = `${stepType}_${genre}`;
      const pattern = this.patterns.get(key);

      if (!pattern || pattern.totalSamples < this.MIN_SAMPLES_FOR_PATTERN) {
        return {
          originalPrompt,
          optimizedPrompt: originalPrompt,
          improvements: ['–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'],
          confidence: 0,
          basedOnSamples: pattern?.totalSamples || 0
        };
      }

      let optimizedPrompt = originalPrompt;
      const improvements: string[] = [];

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      for (const successPattern of pattern.successfulPromptPatterns) {
        if (!optimizedPrompt.includes(successPattern)) {
          optimizedPrompt = `${optimizedPrompt} ${successPattern}`;
          improvements.push(`–î–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: ${successPattern}`);
        }
      }

      // –ò–∑–±–µ–≥–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      for (const failure of pattern.commonFailures) {
        if (optimizedPrompt.includes(failure)) {
          optimizedPrompt = optimizedPrompt.replace(failure, '');
          improvements.push(`–£–¥–∞–ª–µ–Ω –Ω–µ—É–¥–∞—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${failure}`);
        }
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∂–∞–Ω—Ä–æ–≤–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
      const genreImprovements = this.getGenreSpecificImprovements(genre, stepType);
      for (const improvement of genreImprovements) {
        if (!optimizedPrompt.includes(improvement)) {
          optimizedPrompt = `${optimizedPrompt} ${improvement}`;
          improvements.push(`–î–æ–±–∞–≤–ª–µ–Ω–æ –∂–∞–Ω—Ä–æ–≤–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: ${improvement}`);
        }
      }

      const confidence = Math.min(pattern.avgRating / 5, 1) * 
                        Math.min(pattern.totalSamples / 20, 1);

      this.logger.info(`üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è ${stepType}/${genre}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${confidence.toFixed(2)}`);

      return {
        originalPrompt,
        optimizedPrompt: optimizedPrompt.trim(),
        improvements,
        confidence,
        basedOnSamples: pattern.totalSamples
      };

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞:', error);
      return {
        originalPrompt,
        optimizedPrompt: originalPrompt,
        improvements: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'],
        confidence: 0,
        basedOnSamples: 0
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  public async analyzeVariantQuality(
    variants: GenerationVariant[],
    stepType: StepType,
    genre: string,
    context?: any
  ): Promise<Array<GenerationVariant & { qualityMetrics: QualityMetrics }>> {
    try {
      const key = `${stepType}_${genre}`;
      const pattern = this.patterns.get(key);

      return variants.map(variant => {
        const metrics = this.calculateQualityMetrics(variant, pattern, context);
        
        return {
          ...variant,
          qualityMetrics: metrics
        };
      });

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', error);
      return variants.map(v => ({
        ...v,
        qualityMetrics: {
          coherence: 0.5,
          creativity: 0.5,
          usability: 0.5,
          userSatisfaction: 0.5,
          technicalFeasibility: 0.5
        }
      }));
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  public async getImprovementRecommendations(
    stepType: StepType,
    genre: string
  ): Promise<{
    recommendations: string[];
    confidence: number;
    basedOnData: boolean;
  }> {
    try {
      const key = `${stepType}_${genre}`;
      const pattern = this.patterns.get(key);

      if (!pattern || pattern.totalSamples < this.MIN_SAMPLES_FOR_PATTERN) {
        return {
          recommendations: [
            '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
            '–°–æ–±–∏—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏'
          ],
          confidence: 0,
          basedOnData: false
        };
      }

      const recommendations: string[] = [];

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      if (pattern.successfulPromptPatterns.length > 0) {
        recommendations.push(
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${pattern.successfulPromptPatterns.slice(0, 3).join(', ')}`
        );
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–ª—ã
      if (pattern.commonFailures.length > 0) {
        recommendations.push(
          `–ò–∑–±–µ–≥–∞–π—Ç–µ: ${pattern.commonFailures.slice(0, 3).join(', ')}`
        );
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
      if (pattern.avgRating < 3) {
        recommendations.push('–ö–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π');
      } else if (pattern.avgRating < 4) {
        recommendations.push('–ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è');
      } else {
        recommendations.push('–¢–µ–∫—É—â–∏–π –ø–æ–¥—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ');
      }

      const confidence = Math.min(pattern.totalSamples / 10, 1);

      return {
        recommendations,
        confidence,
        basedOnData: true
      };

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
      return {
        recommendations: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö'],
        confidence: 0,
        basedOnData: false
      };
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  public exportLearningData(): {
    totalRecords: number;
    patterns: any[];
    topPerformingSteps: any[];
    recentTrends: any[];
  } {
    const totalRecords = Array.from(this.learningData.values())
      .reduce((sum, records) => sum + records.length, 0);

    const patterns = Array.from(this.patterns.entries()).map(([key, pattern]) => ({
      key,
      ...pattern
    }));

    const topPerformingSteps = patterns
      .filter(p => p.totalSamples >= this.MIN_SAMPLES_FOR_PATTERN)
      .sort((a, b) => b.avgRating - a.avgRating)
      .slice(0, 10);

    const recentTrends = this.analyzeRecentTrends();

    return {
      totalRecords,
      patterns,
      topPerformingSteps,
      recentTrends
    };
  }

  private async initializeLearningSystem(): Promise<void> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—ã–ª–æ –±—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      this.logger.info('üß† –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      
      this.emit('learning:system_initialized');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è:', error);
    }
  }

  private async updateLearningPatterns(key: string): Promise<void> {
    try {
      const records = this.learningData.get(key) || [];
      
      if (records.length < this.MIN_SAMPLES_FOR_PATTERN) {
        return;
      }

      const [stepType, genre] = key.split('_') as [StepType, string];

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (—Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ)
      const successfulRecords = records.filter(r => 
        (r.userFeedback?.rating && r.userFeedback.rating >= 4) ||
        r.userFeedback?.usedInFinalGame ||
        r.finalGameSuccess
      );

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      const failedRecords = records.filter(r =>
        (r.userFeedback?.rating && r.userFeedback.rating <= 2) ||
        r.finalGameSuccess === false
      );

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
      const successfulPromptPatterns = this.extractPromptPatterns(
        successfulRecords.map(r => r.prompt)
      );

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–∏–µ –ø—Ä–æ–≤–∞–ª—ã
      const commonFailures = this.extractFailurePatterns(
        failedRecords.map(r => r.prompt)
      );

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
      const ratingsSum = records.reduce((sum, r) => 
        sum + (r.userFeedback?.rating || 3), 0
      );
      const avgRating = ratingsSum / records.length;

      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
      const pattern: LearningPattern = {
        stepType,
        genre,
        successfulPromptPatterns,
        successfulContextPatterns: successfulRecords.map(r => r.context),
        avgRating,
        totalSamples: records.length,
        lastUpdated: new Date(),
        improvedPrompts: this.generateImprovedPrompts(successfulPromptPatterns),
        commonFailures
      };

      this.patterns.set(key, pattern);

      this.logger.info(`üìä –û–±–Ω–æ–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è ${key}: ${records.length} –∑–∞–ø–∏—Å–µ–π, —Ä–µ–π—Ç–∏–Ω–≥ ${avgRating.toFixed(2)}`);

      this.emit('learning:pattern_updated', {
        key,
        avgRating,
        totalSamples: records.length,
        confidence: this.getPatternConfidence(key)
      });

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è:', error);
    }
  }

  private extractPromptPatterns(prompts: string[]): string[] {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ - –∏—â–µ–º –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã –∏ —Ç–µ—Ä–º–∏–Ω—ã
    const wordCounts = new Map<string, number>();
    
    for (const prompt of prompts) {
      const words = prompt.toLowerCase()
        .split(/\s+/)
        .filter(word => word.length > 3 && !this.isStopWord(word));
      
      for (const word of words) {
        wordCounts.set(word, (wordCounts.get(word) || 0) + 1);
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    return Array.from(wordCounts.entries())
      .filter(([_, count]) => count >= Math.ceil(prompts.length * 0.3))
      .map(([word, _]) => word)
      .slice(0, 10);
  }

  private extractFailurePatterns(prompts: string[]): string[] {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –Ω–æ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    return this.extractPromptPatterns(prompts).slice(0, 5);
  }

  private generateImprovedPrompts(patterns: string[]): string[] {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const improvements: string[] = [];
    
    if (patterns.includes('–¥–µ—Ç–∞–ª—å–Ω—ã–π')) {
      improvements.push('–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏');
    }
    
    if (patterns.includes('—Å—Ç–∏–ª—å')) {
      improvements.push('–ß–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å');
    }
    
    if (patterns.includes('–∏–≥—Ä–æ–∫')) {
      improvements.push('–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ–ø—ã—Ç –∏–≥—Ä–æ–∫–∞');
    }

    return improvements;
  }

  private isStopWord(word: string): boolean {
    const stopWords = ['–∏', '–≤', '–Ω–∞', '—Å', '–¥–ª—è', '–∫–∞–∫', '—á—Ç–æ', '—ç—Ç–æ', '–∫–∞–∫', '–∏–ª–∏'];
    return stopWords.includes(word);
  }

  private getPatternConfidence(key: string): number {
    const pattern = this.patterns.get(key);
    if (!pattern) return 0;
    
    return Math.min(pattern.totalSamples / 20, 1) * 
           Math.min(pattern.avgRating / 5, 1);
  }

  private calculateQualityMetrics(
    variant: GenerationVariant,
    pattern?: LearningPattern,
    context?: any
  ): QualityMetrics {
    // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    let coherence = 0.5;
    let creativity = 0.5;
    let usability = 0.5;
    let userSatisfaction = 0.5;
    let technicalFeasibility = 0.5;

    if (pattern) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
      userSatisfaction = Math.min(pattern.avgRating / 5, 1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      const content = JSON.stringify(variant.content).toLowerCase();
      const matchingPatterns = pattern.successfulPromptPatterns
        .filter(p => content.includes(p)).length;
      
      coherence = Math.min(matchingPatterns / pattern.successfulPromptPatterns.length, 1);
      
      // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
      creativity = Math.random() * 0.4 + 0.3; // –ü–æ–∫–∞ —Å–ª—É—á–∞–π–Ω–æ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
      
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç—å (–±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞)
      technicalFeasibility = 0.8; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –≤—ã—Å–æ–∫—É—é —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç—å
      
      // –£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      usability = userSatisfaction * 0.9; // –ö–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
    }

    return {
      coherence,
      creativity,
      usability,
      userSatisfaction,
      technicalFeasibility
    };
  }

  private getGenreSpecificImprovements(genre: string, stepType: StepType): string[] {
    const improvements: string[] = [];

    // –ñ–∞–Ω—Ä–æ–≤–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
    if (genre === 'platformer' && stepType === 'mechanics') {
      improvements.push('—Ç–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–ø–ª–∞–≤–Ω–∞—è —Ñ–∏–∑–∏–∫–∞ –ø—Ä—ã–∂–∫–æ–≤');
    } else if (genre === 'puzzle' && stepType === 'mechanics') {
      improvements.push('–∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏', '–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å');
    } else if (genre === 'rpg' && stepType === 'character') {
      improvements.push('–¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è', '—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è');
    }

    return improvements;
  }

  private analyzeRecentTrends(): any[] {
    // –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
    const now = new Date();
    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

    const trends: any[] = [];

    for (const [key, records] of this.learningData.entries()) {
      const recentRecords = records.filter(r => r.timestamp >= weekAgo);
      
      if (recentRecords.length > 0) {
        const avgRecentRating = recentRecords.reduce((sum, r) => 
          sum + (r.userFeedback?.rating || 3), 0
        ) / recentRecords.length;

        trends.push({
          key,
          recentSamples: recentRecords.length,
          avgRating: avgRecentRating,
          trend: avgRecentRating > 3.5 ? 'improving' : 'declining'
        });
      }
    }

    return trends.sort((a, b) => b.recentSamples - a.recentSamples);
  }
} 
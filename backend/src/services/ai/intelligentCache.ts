import Redis from 'ioredis';
import { EventEmitter } from 'events';
import { LoggerService } from '../logger';
import config from '@/config';

interface CacheEntry<T = any> {
  key: string;
  value: T;
  timestamp: number;
  ttl: number;
  hitCount: number;
  lastAccess: number;
  size: number;
  metadata?: {
    priority: number;
    tags: string[];
    dependency?: string;
    provider?: string;
    compressed?: boolean;
  };
}

interface CacheStats {
  hits: number;
  misses: number;
  sets: number;
  deletes: number;
  evictions: number;
  memory: {
    used: number;
    total: number;
    percentage: number;
  };
  operations: {
    get: number;
    set: number;
    delete: number;
  };
}

interface RateLimitInfo {
  requests: number;
  windowStart: number;
  windowSize: number;
  limit: number;
  resetTime: number;
  provider: string;
  endpoint?: string;
}

interface IntelligentCacheConfig {
  redis: {
    host: string;
    port: number;
    password?: string;
    db: number;
    keyPrefix: string;
  };
  cache: {
    defaultTTL: number;
    maxMemory: number;
    evictionPolicy: 'lru' | 'lfu' | 'ttl' | 'random';
    compressionThreshold: number;
    enableCompression: boolean;
  };
  rateLimits: {
    enabled: boolean;
    persistentStorage: boolean;
    gracePeriod: number;
  };
  intelligent: {
    enabled: boolean;
    learningEnabled: boolean;
    autoOptimization: boolean;
    predictivePreloading: boolean;
  };
}

export class IntelligentCacheService extends EventEmitter {
  private redis: Redis;
  private logger: LoggerService;
  private config: IntelligentCacheConfig;
  private stats: CacheStats;
  private rateLimits: Map<string, RateLimitInfo>;
  private accessPatterns: Map<string, number[]>;
  private popularKeys: Set<string>;
  private isConnected: boolean = false;
  private retryAttempts: number = 0;
  private maxRetryAttempts: number = 5;

  constructor(customConfig?: Partial<IntelligentCacheConfig>) {
    super();
    this.logger = new LoggerService();
    this.config = this.mergeConfig(customConfig);
    this.stats = this.initializeStats();
    this.rateLimits = new Map();
    this.accessPatterns = new Map();
    this.popularKeys = new Set();
    
    this.initializeRedis();
    this.setupIntelligentFeatures();
  }

  private mergeConfig(customConfig?: Partial<IntelligentCacheConfig>): IntelligentCacheConfig {
    const defaultConfig: IntelligentCacheConfig = {
      redis: {
        host: process.env.REDIS_HOST || 'localhost',
        port: parseInt(process.env.REDIS_PORT || '6379'),
        password: process.env.REDIS_PASSWORD,
        db: parseInt(process.env.REDIS_DB || '0'),
        keyPrefix: 'gameide:cache:'
      },
      cache: {
        defaultTTL: 3600, // 1 —á–∞—Å
        maxMemory: 512 * 1024 * 1024, // 512MB
        evictionPolicy: 'lru',
        compressionThreshold: 1024, // 1KB
        enableCompression: true
      },
      rateLimits: {
        enabled: true,
        persistentStorage: true,
        gracePeriod: 300 // 5 –º–∏–Ω—É—Ç
      },
      intelligent: {
        enabled: true,
        learningEnabled: true,
        autoOptimization: true,
        predictivePreloading: true
      }
    };

    return this.deepMerge(defaultConfig, customConfig || {});
  }

  private initializeStats(): CacheStats {
    return {
      hits: 0,
      misses: 0,
      sets: 0,
      deletes: 0,
      evictions: 0,
      memory: {
        used: 0,
        total: this.config.cache.maxMemory,
        percentage: 0
      },
      operations: {
        get: 0,
        set: 0,
        delete: 0
      }
    };
  }

  private async initializeRedis(): Promise<void> {
    try {
      this.redis = new Redis({
        host: this.config.redis.host,
        port: this.config.redis.port,
        password: this.config.redis.password,
        db: this.config.redis.db,
        keyPrefix: this.config.redis.keyPrefix,
        retryDelayOnFailover: 1000,
        maxRetriesPerRequest: 3,
        lazyConnect: true,
        keepAlive: 30000,
        family: 4
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Redis
      this.redis.on('connect', () => {
        this.isConnected = true;
        this.retryAttempts = 0;
        this.logger.info('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è');
        this.emit('connected');
      });

      this.redis.on('error', (error) => {
        this.isConnected = false;
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ Redis:', error);
        this.emit('error', error);
        this.handleRedisError(error);
      });

      this.redis.on('close', () => {
        this.isConnected = false;
        this.logger.warn('‚ö†Ô∏è Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        this.emit('disconnected');
      });

      this.redis.on('reconnecting', () => {
        this.logger.info('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...');
        this.emit('reconnecting');
      });

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      await this.redis.connect();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã
      if (this.config.rateLimits.persistentStorage) {
        await this.loadRateLimits();
      }

      this.logger.info('üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis:', error);
      throw error;
    }
  }

  private setupIntelligentFeatures(): void {
    if (!this.config.intelligent.enabled) return;

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    if (this.config.intelligent.autoOptimization) {
      setInterval(() => {
        this.performOptimization();
      }, 5 * 60 * 1000);
    }

    // –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(() => {
      this.collectStats();
    }, 60 * 1000);

    // –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    if (this.config.intelligent.predictivePreloading) {
      setInterval(() => {
        this.performPredictivePreloading();
      }, 10 * 60 * 1000);
    }
  }

  // =================== API RATE LIMITING ===================

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  async checkRateLimit(
    provider: string, 
    endpoint: string = 'default', 
    limit: number = 100, 
    windowSizeMs: number = 3600000 // 1 —á–∞—Å
  ): Promise<{ allowed: boolean; resetTime: number; remaining: number }> {
    const key = `ratelimit:${provider}:${endpoint}`;
    const now = Date.now();
    
    try {
      let limitInfo = this.rateLimits.get(key);
      
      if (!limitInfo || (now - limitInfo.windowStart) >= windowSizeMs) {
        // –ù–æ–≤–æ–µ –æ–∫–Ω–æ
        limitInfo = {
          requests: 0,
          windowStart: now,
          windowSize: windowSizeMs,
          limit,
          resetTime: now + windowSizeMs,
          provider,
          endpoint
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
      if (limitInfo.requests >= limit) {
        this.logger.warn(`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–ª—è ${provider}:${endpoint}`, {
          requests: limitInfo.requests,
          limit,
          resetTime: new Date(limitInfo.resetTime)
        });

        return {
          allowed: false,
          resetTime: limitInfo.resetTime,
          remaining: 0
        };
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      limitInfo.requests++;
      this.rateLimits.set(key, limitInfo);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
      if (this.config.rateLimits.persistentStorage && this.isConnected) {
        await this.redis.setex(
          `limit:${key}`, 
          Math.ceil(windowSizeMs / 1000), 
          JSON.stringify(limitInfo)
        );
      }

      this.logger.debug(`‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è ${provider}:${endpoint}`, {
        requests: limitInfo.requests,
        limit,
        remaining: limit - limitInfo.requests
      });

      return {
        allowed: true,
        resetTime: limitInfo.resetTime,
        remaining: limit - limitInfo.requests
      };

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
      return {
        allowed: true,
        resetTime: now + windowSizeMs,
        remaining: limit
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–∑ Redis –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
   */
  private async loadRateLimits(): Promise<void> {
    try {
      const keys = await this.redis.keys('limit:ratelimit:*');
      
      for (const redisKey of keys) {
        const data = await this.redis.get(redisKey);
        if (data) {
          const limitInfo: RateLimitInfo = JSON.parse(data);
          const key = redisKey.replace('limit:', '');
          this.rateLimits.set(key, limitInfo);
        }
      }

      this.logger.info(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.rateLimits.size} –ª–∏–º–∏—Ç–æ–≤ –∏–∑ Redis`);
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–º–∏—Ç–æ–≤:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏–º–∏—Ç–æ–≤
   */
  getRateLimitStats(): { [provider: string]: { requests: number; limit: number; resetTime: number }[] } {
    const stats: { [provider: string]: { requests: number; limit: number; resetTime: number }[] } = {};
    
    for (const [key, info] of this.rateLimits) {
      if (!stats[info.provider]) {
        stats[info.provider] = [];
      }
      
      stats[info.provider].push({
        requests: info.requests,
        limit: info.limit,
        resetTime: info.resetTime
      });
    }
    
    return stats;
  }

  // =================== INTELLIGENT CACHING ===================

  /**
   * –£–º–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
   */
  async set<T>(
    key: string, 
    value: T, 
    options: {
      ttl?: number;
      priority?: number;
      tags?: string[];
      dependency?: string;
      compress?: boolean;
    } = {}
  ): Promise<boolean> {
    try {
      this.stats.operations.set++;
      this.stats.sets++;

      if (!this.isConnected) {
        this.logger.warn('‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ');
        return false;
      }

      const ttl = options.ttl || this.config.cache.defaultTTL;
      const serialized = JSON.stringify(value);
      let finalValue = serialized;
      let compressed = false;

      // –°–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      if (this.config.cache.enableCompression && 
          serialized.length > this.config.cache.compressionThreshold &&
          (options.compress !== false)) {
        try {
          const zlib = await import('zlib');
          const compressedBuffer = zlib.gzipSync(serialized);
          if (compressedBuffer.length < serialized.length) {
            finalValue = compressedBuffer.toString('base64');
            compressed = true;
          }
        } catch (error) {
          this.logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è:', error);
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∫–µ—à–∞
      const entry: CacheEntry<T> = {
        key,
        value: finalValue as any,
        timestamp: Date.now(),
        ttl,
        hitCount: 0,
        lastAccess: Date.now(),
        size: finalValue.length,
        metadata: {
          priority: options.priority || 1,
          tags: options.tags || [],
          dependency: options.dependency,
          provider: this.extractProvider(key),
          compressed
        }
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
      const pipeline = this.redis.pipeline();
      pipeline.setex(`entry:${key}`, ttl, JSON.stringify(entry));
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      if (options.tags && options.tags.length > 0) {
        for (const tag of options.tags) {
          pipeline.sadd(`tag:${tag}`, key);
          pipeline.expire(`tag:${tag}`, ttl + 300); // –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ TTL
        }
      }

      await pipeline.exec();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.stats.memory.used += entry.size;
      this.updateMemoryPercentage();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
      if (this.stats.memory.percentage > 90) {
        this.performEviction();
      }

      this.logger.debug(`üíæ –ó–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–æ: ${key}`, {
        size: entry.size,
        ttl,
        compressed,
        priority: options.priority
      });

      return true;

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à:', error);
      return false;
    }
  }

  /**
   * –£–º–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞ —Å –æ–±—É—á–µ–Ω–∏–µ–º
   */
  async get<T>(key: string): Promise<T | null> {
    try {
      this.stats.operations.get++;

      if (!this.isConnected) {
        this.stats.misses++;
        return null;
      }

      const entryData = await this.redis.get(`entry:${key}`);
      
      if (!entryData) {
        this.stats.misses++;
        this.recordAccess(key, false);
        return null;
      }

      const entry: CacheEntry<T> = JSON.parse(entryData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
      if (Date.now() - entry.timestamp > entry.ttl * 1000) {
        this.stats.misses++;
        this.recordAccess(key, false);
        await this.delete(key);
        return null;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
      entry.hitCount++;
      entry.lastAccess = Date.now();
      this.stats.hits++;
      this.recordAccess(key, true);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.redis.setex(`entry:${key}`, entry.ttl, JSON.stringify(entry));

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∂–∞—Ç–∏–µ
      let value = entry.value;
      if (entry.metadata?.compressed) {
        try {
          const zlib = await import('zlib');
          const buffer = Buffer.from(value as string, 'base64');
          value = zlib.gunzipSync(buffer).toString();
        } catch (error) {
          this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏:', error);
          return null;
        }
      }

      // –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ
      const result = typeof value === 'string' ? JSON.parse(value) : value;

      this.logger.debug(`üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫–µ—à: ${key}`, {
        hitCount: entry.hitCount,
        age: Date.now() - entry.timestamp
      });

      return result;

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞:', error);
      this.stats.misses++;
      return null;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π —Ç–µ–≥–æ–≤
   */
  async delete(key: string): Promise<boolean> {
    try {
      this.stats.operations.delete++;
      this.stats.deletes++;

      if (!this.isConnected) {
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–≥–æ–≤
      const entryData = await this.redis.get(`entry:${key}`);
      
      const pipeline = this.redis.pipeline();
      pipeline.del(`entry:${key}`);

      // –û—á–∏—â–∞–µ–º —Ç–µ–≥–∏
      if (entryData) {
        const entry: CacheEntry = JSON.parse(entryData);
        if (entry.metadata?.tags) {
          for (const tag of entry.metadata.tags) {
            pipeline.srem(`tag:${tag}`, key);
          }
        }
        this.stats.memory.used -= entry.size;
      }

      await pipeline.exec();
      this.updateMemoryPercentage();

      this.logger.debug(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–µ—à–∞: ${key}`);
      return true;

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞:', error);
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø–æ —Ç–µ–≥–∞–º
   */
  async clearByTag(tag: string): Promise<number> {
    try {
      if (!this.isConnected) return 0;

      const keys = await this.redis.smembers(`tag:${tag}`);
      
      if (keys.length === 0) return 0;

      const pipeline = this.redis.pipeline();
      
      for (const key of keys) {
        pipeline.del(`entry:${key}`);
      }
      
      pipeline.del(`tag:${tag}`);
      
      await pipeline.exec();

      this.logger.info(`üßπ –û—á–∏—â–µ–Ω–æ ${keys.length} –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–µ–≥—É: ${tag}`);
      return keys.length;

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ —Ç–µ–≥—É:', error);
      return 0;
    }
  }

  // =================== INTELLIGENT FEATURES ===================

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
   */
  private recordAccess(key: string, hit: boolean): void {
    if (!this.config.intelligent.learningEnabled) return;

    const now = Date.now();
    const hourSlot = Math.floor(now / (60 * 60 * 1000)); // –ß–∞—Å–æ–≤—ã–µ —Å–ª–æ—Ç—ã
    
    if (!this.accessPatterns.has(key)) {
      this.accessPatterns.set(key, []);
    }
    
    const pattern = this.accessPatterns.get(key)!;
    pattern.push(hourSlot);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const cutoff = hourSlot - 24;
    this.accessPatterns.set(key, pattern.filter(slot => slot > cutoff));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª—é—á–∏
    if (hit && pattern.length > 5) {
      this.popularKeys.add(key);
    }
  }

  /**
   * –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private async performPredictivePreloading(): Promise<void> {
    if (!this.config.intelligent.predictivePreloading) return;

    try {
      this.logger.info('üîÆ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏...');
      
      const now = Date.now();
      const hourSlot = Math.floor(now / (60 * 60 * 1000));
      
      for (const [key, pattern] of this.accessPatterns) {
        if (pattern.length < 3) continue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–æ—Å—Ç—É–ø–∞
        const recentAccesses = pattern.filter(slot => slot > hourSlot - 6); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
        
        if (recentAccesses.length >= 2) {
          // –ö–ª—é—á –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞
          const cached = await this.redis.get(`entry:${key}`);
          
          if (!cached) {
            this.emit('preload-needed', { key, pattern: recentAccesses });
            this.logger.debug(`üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞: ${key}`);
          }
        }
      }
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', error);
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–µ—à–∞
   */
  private async performOptimization(): Promise<void> {
    if (!this.config.intelligent.autoOptimization) return;

    try {
      this.logger.info('‚ö° –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–µ—à–∞...');
      
      // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–∏
      await this.cleanupUnusedKeys();
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º TTL –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–π
      await this.optimizeTTL();
      
      // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.collectStats();
      
      this.logger.info('‚úÖ –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª—é—á–µ–π
   */
  private async cleanupUnusedKeys(): Promise<void> {
    try {
      const keys = await this.redis.keys('entry:*');
      const now = Date.now();
      let cleanedCount = 0;
      
      for (const redisKey of keys) {
        const entryData = await this.redis.get(redisKey);
        if (!entryData) continue;
        
        const entry: CacheEntry = JSON.parse(entryData);
        const key = redisKey.replace('entry:', '');
        
        // –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–∞ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫ –∏ –º–∞–ª–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π
        if (now - entry.lastAccess > 24 * 60 * 60 * 1000 && entry.hitCount < 2) {
          await this.delete(key);
          cleanedCount++;
        }
      }
      
      if (cleanedCount > 0) {
        this.logger.info(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª—é—á–µ–π`);
      }
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è TTL –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–ª—é—á–µ–π
   */
  private async optimizeTTL(): Promise<void> {
    try {
      for (const key of this.popularKeys) {
        const entryData = await this.redis.get(`entry:${key}`);
        if (!entryData) continue;
        
        const entry: CacheEntry = JSON.parse(entryData);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º TTL –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª—é—á–µ–π
        if (entry.hitCount > 10) {
          const newTTL = Math.min(entry.ttl * 1.5, 24 * 3600); // –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
          await this.redis.expire(`entry:${key}`, newTTL);
          
          this.logger.debug(`‚è∞ –£–≤–µ–ª–∏—á–µ–Ω TTL –¥–ª—è ${key}: ${entry.ttl} ‚Üí ${newTTL}`);
        }
      }
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ TTL:', error);
    }
  }

  /**
   * Eviction –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
   */
  private async performEviction(): Promise<void> {
    try {
      this.logger.warn('üö® –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏, –∑–∞–ø—É—Å–∫ eviction...');
      
      const keys = await this.redis.keys('entry:*');
      const entries: { key: string; entry: CacheEntry; score: number }[] = [];
      
      // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
      for (const redisKey of keys) {
        const entryData = await this.redis.get(redisKey);
        if (!entryData) continue;
        
        const entry: CacheEntry = JSON.parse(entryData);
        const key = redisKey.replace('entry:', '');
        
        let score = 0;
        const now = Date.now();
        
        switch (this.config.cache.evictionPolicy) {
          case 'lru':
            score = now - entry.lastAccess; // –ë–æ–ª—å—à–µ = —Å—Ç–∞—Ä—à–µ
            break;
          case 'lfu':
            score = -entry.hitCount; // –ú–µ–Ω—å—à–µ = —Ä–µ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            break;
          case 'ttl':
            score = entry.timestamp + (entry.ttl * 1000) - now; // –ú–µ–Ω—å—à–µ = —Å–∫–æ—Ä–µ–µ –∏—Å—Ç–µ—á–µ—Ç
            break;
          case 'random':
            score = Math.random();
            break;
        }
        
        entries.push({ key, entry, score });
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score (–∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏)
      entries.sort((a, b) => b.score - a.score);
      
      // –£–¥–∞–ª—è–µ–º 20% –∑–∞–ø–∏—Å–µ–π
      const toRemove = Math.ceil(entries.length * 0.2);
      let removedCount = 0;
      
      for (let i = 0; i < toRemove && i < entries.length; i++) {
        await this.delete(entries[i].key);
        removedCount++;
        this.stats.evictions++;
      }
      
      this.logger.info(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${removedCount} –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ eviction`);
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ eviction:', error);
    }
  }

  // =================== UTILITY METHODS ===================

  private updateMemoryPercentage(): void {
    this.stats.memory.percentage = (this.stats.memory.used / this.stats.memory.total) * 100;
  }

  private extractProvider(key: string): string {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "openai:completion:xxx" -> "openai")
    const parts = key.split(':');
    return parts.length > 0 ? parts[0] : 'unknown';
  }

  private async collectStats(): Promise<void> {
    try {
      if (!this.isConnected) return;
      
      const keys = await this.redis.keys('entry:*');
      let totalSize = 0;
      
      for (const key of keys) {
        const entryData = await this.redis.get(key);
        if (entryData) {
          const entry: CacheEntry = JSON.parse(entryData);
          totalSize += entry.size;
        }
      }
      
      this.stats.memory.used = totalSize;
      this.updateMemoryPercentage();
      
      this.emit('stats-updated', this.stats);
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  private async handleRedisError(error: Error): Promise<void> {
    this.retryAttempts++;
    
    if (this.retryAttempts >= this.maxRetryAttempts) {
      this.logger.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis');
      this.emit('max-retries-exceeded', error);
      return;
    }
    
    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const delay = Math.min(1000 * Math.pow(2, this.retryAttempts), 30000);
    
    setTimeout(async () => {
      try {
        await this.redis.connect();
      } catch (reconnectError) {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', reconnectError);
      }
    }, delay);
  }

  // =================== PUBLIC API ===================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
   */
  getStats(): CacheStats & { rateLimits: any; isConnected: boolean } {
    return {
      ...this.stats,
      rateLimits: this.getRateLimitStats(),
      isConnected: this.isConnected
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–µ—à–∞
   */
  async clear(): Promise<void> {
    try {
      if (!this.isConnected) return;
      
      await this.redis.flushdb();
      this.stats = this.initializeStats();
      this.rateLimits.clear();
      this.accessPatterns.clear();
      this.popularKeys.clear();
      
      this.logger.info('üßπ –í–µ—Å—å –∫–µ—à –æ—á–∏—â–µ–Ω');
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
   */
  async exists(key: string): Promise<boolean> {
    try {
      if (!this.isConnected) return false;
      return await this.redis.exists(`entry:${key}`) === 1;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async close(): Promise<void> {
    try {
      if (this.redis) {
        await this.redis.quit();
        this.isConnected = false;
        this.logger.info('üëã Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      }
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Redis:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async healthCheck(): Promise<{
    status: 'healthy' | 'unhealthy';
    redis: boolean;
    stats: CacheStats;
    latency: number;
  }> {
    const start = Date.now();
    let redisHealthy = false;
    
    try {
      if (this.isConnected) {
        await this.redis.ping();
        redisHealthy = true;
      }
    } catch (error) {
      this.logger.error('‚ùå Redis health check failed:', error);
    }
    
    const latency = Date.now() - start;
    
    return {
      status: redisHealthy ? 'healthy' : 'unhealthy',
      redis: redisHealthy,
      stats: this.stats,
      latency
    };
  }

  private deepMerge(target: any, source: any): any {
    const result = { ...target };
    
    for (const key in source) {
      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
        result[key] = this.deepMerge(target[key] || {}, source[key]);
      } else {
        result[key] = source[key];
      }
    }
    
    return result;
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const intelligentCache = new IntelligentCacheService();
export default intelligentCache; 
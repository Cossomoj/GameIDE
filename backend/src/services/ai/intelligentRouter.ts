import { EventEmitter } from 'events';
import { OpenAIService } from './openai';
import { ClaudeService } from './claude';
import { DeepSeekService } from './deepseek';
import { LoggerService } from '../logger';
import config from '@/config';
import { intelligentCache } from './intelligentCache';
import { aiHealthMonitor } from '../aiHealthMonitor';
import { AIServiceError } from '@/middleware/errorHandler';

interface AITaskRequest {
  id: string;
  type: 'game_design' | 'code_generation' | 'image_generation' | 'sound_generation' | 'text_generation';
  prompt: string;
  context?: any;
  requirements?: {
    quality?: 'fast' | 'balanced' | 'high';
    optimization?: 'cost' | 'speed' | 'quality';
    contentType?: string;
    targetAudience?: string;
  };
  maxRetries?: number;
  timeout?: number;
}

interface AIProvider {
  name: string;
  service: OpenAIService | ClaudeService | DeepSeekService;
  capabilities: AICapability[];
  status: ProviderStatus;
  metrics: ProviderMetrics;
  costs: ProviderCosts;
  priority: number;
  costPerToken: number;
  maxTokens: number;
  reliability: number;
  latency: number;
  rateLimits: {
    requestsPerMinute: number;
    tokensPerMinute: number;
    requestsPerDay: number;
  };
  healthScore: number;
  lastError?: Date;
  errorCount: number;
  successCount: number;
}

interface AICapability {
  type: AITaskRequest['type'];
  quality: number; // 0-100
  speed: number; // 0-100
  reliability: number; // 0-100
  costEfficiency: number; // 0-100
}

interface ProviderStatus {
  isAvailable: boolean;
  currentLoad: number; // 0-100
  responseTime: number; // ms
  errorRate: number; // 0-100
  lastCheck: Date;
  quotaRemaining?: number;
}

interface ProviderMetrics {
  totalRequests: number;
  successfulRequests: number;
  failedRequests: number;
  averageResponseTime: number;
  averageQuality: number;
  uptime: number; // percentage
}

interface ProviderCosts {
  costPerRequest: number;
  costPerToken: number;
  dailySpent: number;
  monthlyLimit: number;
}

interface RoutingDecision {
  selectedProvider: string;
  confidence: number;
  reasoning: string;
  fallbackProviders: string[];
  estimatedCost: number;
  estimatedTime: number;
}

interface RequestOptions {
  prompt: string;
  maxTokens?: number;
  temperature?: number;
  capability?: string;
  priority?: 'low' | 'medium' | 'high' | 'critical';
  timeout?: number;
  retries?: number;
  fallbackProviders?: string[];
  cacheOptions?: {
    enabled?: boolean;
    ttl?: number;
    tags?: string[];
  };
}

interface AIResponse {
  content: string;
  provider: string;
  tokensUsed: number;
  latency: number;
  cost: number;
  cached: boolean;
  retryCount: number;
  metadata?: any;
}

interface CircuitBreakerState {
  state: 'closed' | 'open' | 'half-open';
  failures: number;
  lastFailure: Date | null;
  successCount: number;
  nextAttempt: Date | null;
}

interface RetryConfig {
  maxRetries: number;
  baseDelay: number;
  maxDelay: number;
  backoffMultiplier: number;
  jitterEnabled: boolean;
  retryableErrors: string[];
}

interface MonitoringData {
  requests: {
    total: number;
    successful: number;
    failed: number;
    cached: number;
  };
  providers: {
    [key: string]: {
      requests: number;
      errors: number;
      avgLatency: number;
      totalCost: number;
      tokensUsed: number;
      reliability: number;
    };
  };
  errors: {
    [type: string]: {
      count: number;
      lastOccurrence: Date;
      examples: string[];
    };
  };
  performance: {
    avgResponseTime: number;
    p95ResponseTime: number;
    cacheHitRate: number;
  };
  costs: {
    total: number;
    byProvider: { [provider: string]: number };
    savedByCaching: number;
  };
}

export interface RouterConfig {
  retryAttempts: number;
  timeoutMs: number;
  loadBalancing: boolean;
  preferredServices: string[];
  emergencyFallback: boolean;
}

export class IntelligentAIRouter extends EventEmitter {
  private logger: LoggerService;
  private providers: Map<string, AIProvider> = new Map();
  private routingHistory: Map<string, RoutingDecision[]> = new Map();
  private loadBalancer: LoadBalancer;
  private healthChecker: HealthChecker;
  private contextAnalyzer: ContextAnalyzer;
  private costTracker: CostTracker;
  private cache: Map<string, any> = new Map();
  private circuitBreakers: Map<string, CircuitBreakerState>;
  private retryConfig: RetryConfig;
  private monitoring: MonitoringData;
  private healthCheckInterval: NodeJS.Timeout;
  private performanceWindow: number[] = [];
  private errorTypePatterns: Map<string, RegExp>;
  private config: RouterConfig;
  private requestQueue: Map<string, {
    resolve: (value: AIResponse) => void;
    reject: (error: Error) => void;
    retryCount: number;
    startTime: number;
  }> = new Map();

  constructor(config?: Partial<RouterConfig>) {
    super();
    this.logger = new LoggerService();
    this.loadBalancer = new LoadBalancer();
    this.healthChecker = new HealthChecker();
    this.contextAnalyzer = new ContextAnalyzer();
    this.costTracker = new CostTracker();
    this.circuitBreakers = new Map();
    
    this.retryConfig = {
      maxRetries: 3,
      baseDelay: 1000,
      maxDelay: 30000,
      backoffMultiplier: 2,
      jitterEnabled: true,
      retryableErrors: [
        'timeout',
        'rate_limit',
        'server_error',
        'network_error',
        'connection_error',
        'service_unavailable'
      ]
    };

    this.monitoring = this.initializeMonitoring();
    this.errorTypePatterns = this.initializeErrorPatterns();
    
    this.initializeProviders();
    this.startHealthMonitoring();
    this.startPerformanceTracking();
    
    this.logger.info('ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π AI —Ä–æ—É—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    this.config = {
      retryAttempts: 3,
      timeoutMs: 45000, // 45 —Å–µ–∫—É–Ω–¥
      loadBalancing: true,
      preferredServices: ['deepseek', 'claude', 'openai'],
      emergencyFallback: true,
      ...config
    };

    this.setupHealthMonitorListeners();
  }

  private setupHealthMonitorListeners(): void {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è failover –æ—Ç health monitor
    aiHealthMonitor.on('failover:activated', (event) => {
      this.logger.info(`üì° –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ failover: ${event.from} ‚Üí ${event.to}`);
      this.emit('router:failover', event);
    });

    // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
    aiHealthMonitor.on('health:updated', (report) => {
      this.emit('router:health-updated', report);
    });
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AI –∑–∞–¥–∞—á —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
   */
  public async executeTask(request: AITaskRequest): Promise<any> {
    const startTime = Date.now();
    
    try {
      this.logger.info(`üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏: ${request.id} (${request.type})`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      const cacheKey = this.generateCacheKey(request);
      if (this.cache.has(cacheKey) && request.requirements?.optimization !== 'quality') {
        this.logger.info(`üíæ –ù–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–µ—à–µ –¥–ª—è –∑–∞–¥–∞—á–∏ ${request.id}`);
        return this.cache.get(cacheKey);
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
      const analysis = await this.contextAnalyzer.analyze(request);
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
      const routingDecision = await this.selectOptimalProvider(request, analysis);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —Å fallback
      const result = await this.executeWithFallback(request, routingDecision);
      
      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (result && request.requirements?.optimization !== 'speed') {
        this.cache.set(cacheKey, result);
        // –û—á–∏—â–∞–µ–º –∫–µ—à —á–µ—Ä–µ–∑ —á–∞—Å
        setTimeout(() => this.cache.delete(cacheKey), 3600000);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
      const duration = Date.now() - startTime;
      await this.updateProviderMetrics(routingDecision.selectedProvider, true, duration, result);

      this.emit('task:completed', {
        taskId: request.id,
        provider: routingDecision.selectedProvider,
        duration,
        cacheHit: false
      });

      return result;

    } catch (error) {
      const duration = Date.now() - startTime;
      this.logger.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AI –∑–∞–¥–∞—á–∏ ${request.id}:`, error);
      
      this.emit('task:failed', {
        taskId: request.id,
        error: error.message,
        duration
      });

      throw error;
    }
  }

  /**
   * –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏
   */
  private async selectOptimalProvider(
    request: AITaskRequest, 
    analysis: any
  ): Promise<RoutingDecision> {
    const availableProviders = Array.from(this.providers.values())
      .filter(p => p.status.isAvailable && this.canHandleTask(p, request.type));

    if (availableProviders.length === 0) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    const scores = await Promise.all(
      availableProviders.map(provider => this.calculateProviderScore(provider, request, analysis))
    );

    // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    const bestIndex = scores.indexOf(Math.max(...scores));
    const selectedProvider = availableProviders[bestIndex];

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    const fallbackProviders = availableProviders
      .filter(p => p.name !== selectedProvider.name)
      .sort((a, b) => {
        const aScore = this.calculateProviderScore(a, request, analysis);
        const bScore = this.calculateProviderScore(b, request, analysis);
        return Number(bScore) - Number(aScore);
      })
      .map(p => p.name);

    const decision: RoutingDecision = {
      selectedProvider: selectedProvider.name,
      confidence: scores[bestIndex] / 100,
      reasoning: this.generateReasoning(selectedProvider, request, analysis),
      fallbackProviders,
      estimatedCost: this.estimateCost(selectedProvider, request),
      estimatedTime: this.estimateTime(selectedProvider, request)
    };

    this.logger.info(`üéØ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${decision.selectedProvider} (–¥–æ–≤–µ—Ä–∏–µ: ${Math.round(decision.confidence * 100)}%)`);
    this.logger.info(`üí° –ü—Ä–∏—á–∏–Ω–∞: ${decision.reasoning}`);

    return decision;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π fallback
   */
  private async executeWithFallback(
    request: AITaskRequest, 
    decision: RoutingDecision
  ): Promise<any> {
    const providersToTry = [decision.selectedProvider, ...decision.fallbackProviders];
    let lastError: Error | null = null;

    for (const providerName of providersToTry) {
      try {
        this.logger.info(`üöÄ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${providerName}`);
        
        const provider = this.providers.get(providerName);
        if (!provider || !provider.status.isAvailable) {
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if (provider.status.currentLoad > 90) {
          this.logger.warn(`‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${providerName} –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (${provider.status.currentLoad}%)`);
          continue;
        }

        const result = await this.executeTaskWithProvider(provider, request);
        
        if (providerName !== decision.selectedProvider) {
          this.logger.info(`üîÑ Fallback —Å—Ä–∞–±–æ—Ç–∞–ª: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ ${providerName}`);
          this.emit('fallback:used', {
            originalProvider: decision.selectedProvider,
            fallbackProvider: providerName,
            taskId: request.id
          });
        }

        return result;

      } catch (error) {
        lastError = error as Error;
        this.logger.warn(`‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${providerName} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        const provider = this.providers.get(providerName);
        if (provider) {
          await this.updateProviderMetrics(providerName, false, 0, null);
        }
      }
    }

    throw new Error(`–í—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${lastError?.message}`);
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
   */
  private async executeTaskWithProvider(provider: AIProvider, request: AITaskRequest): Promise<any> {
    const service = provider.service;

    switch (request.type) {
      case 'game_design':
        if ('generateGameDesign' in service) {
          return await service.generateGameDesign(request.prompt);
        }
        break;
        
      case 'code_generation':
        if ('generateCode' in service) {
          return await service.generateCode(request.prompt);
        }
        break;
        
      case 'image_generation':
        if ('generateImage' in service) {
          return await service.generateImage(request.prompt);
        }
        break;
        
      case 'sound_generation':
        if ('generateSound' in service) {
          return await service.generateSound(request.prompt);
        }
        break;
        
      case 'text_generation':
        if ('generateCode' in service) {
          return await service.generateCode(request.prompt);
        }
        break;
    }

    throw new Error(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider.name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ ${request.type}`);
  }

  /**
   * –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
   */
  private async calculateProviderScore(
    provider: AIProvider, 
    request: AITaskRequest, 
    analysis: any
  ): Promise<number> {
    let score = 0;

    // –ë–∞–∑–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–∏–ø–æ–º –∑–∞–¥–∞—á–∏ (40%)
    const capability = provider.capabilities.find(c => c.type === request.type);
    if (!capability) return 0;

    // –ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
    const qualityWeight = request.requirements?.optimization === 'quality' ? 0.5 : 0.3;
    score += capability.quality * qualityWeight;

    // –°–∫–æ—Ä–æ—Å—Ç—å (20%)
    const speedWeight = request.requirements?.optimization === 'speed' ? 0.4 : 0.2;
    score += capability.speed * speedWeight;

    // –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (20%)
    score += capability.reliability * 0.2;

    // –°—Ç–æ–∏–º–æ—Å—Ç—å (10%)
    const costWeight = request.requirements?.optimization === 'cost' ? 0.3 : 0.1;
    score += capability.costEfficiency * costWeight;

    // –¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (—à—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É)
    const loadPenalty = provider.status.currentLoad / 100;
    score *= (1 - loadPenalty * 0.3);

    // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É
    if (provider.metrics.uptime > 95) {
      score *= 1.1;
    }

    // –®—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫
    if (provider.status.errorRate > 10) {
      score *= (1 - provider.status.errorRate / 200);
    }

    return Math.max(0, Math.min(100, score));
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   */
  private initializeProviders(): void {
    // OpenAI
    const openaiService = new OpenAIService();
    this.providers.set('openai', {
      name: 'openai',
      service: openaiService,
      capabilities: [
        { type: 'image_generation', quality: 95, speed: 70, reliability: 90, costEfficiency: 60 },
        { type: 'sound_generation', quality: 85, speed: 80, reliability: 90, costEfficiency: 65 },
        { type: 'text_generation', quality: 88, speed: 85, reliability: 92, costEfficiency: 70 }
      ],
      status: {
        isAvailable: true,
        currentLoad: 0,
        responseTime: 0,
        errorRate: 0,
        lastCheck: new Date()
      },
      metrics: {
        totalRequests: 0,
        successfulRequests: 0,
        failedRequests: 0,
        averageResponseTime: 0,
        averageQuality: 0,
        uptime: 100
      },
      costs: {
        costPerRequest: 0.02,
        costPerToken: 0.0001,
        dailySpent: 0,
        monthlyLimit: 1000
      },
      priority: 1,
      costPerToken: 0.00003,
      maxTokens: 4000,
      reliability: 0.98,
      latency: 1500,
      rateLimits: {
        requestsPerMinute: 60,
        tokensPerMinute: 90000,
        requestsPerDay: 10000
      },
      healthScore: 100,
      errorCount: 0,
      successCount: 0
    });

    // Claude
    const claudeService = new ClaudeService();
    this.providers.set('claude', {
      name: 'claude',
      service: claudeService,
      capabilities: [
        { type: 'game_design', quality: 95, speed: 75, reliability: 95, costEfficiency: 75 },
        { type: 'code_generation', quality: 92, speed: 80, reliability: 94, costEfficiency: 80 },
        { type: 'text_generation', quality: 96, speed: 82, reliability: 96, costEfficiency: 78 }
      ],
      status: {
        isAvailable: true,
        currentLoad: 0,
        responseTime: 0,
        errorRate: 0,
        lastCheck: new Date()
      },
      metrics: {
        totalRequests: 0,
        successfulRequests: 0,
        failedRequests: 0,
        averageResponseTime: 0,
        averageQuality: 0,
        uptime: 100
      },
      costs: {
        costPerRequest: 0.015,
        costPerToken: 0.00008,
        dailySpent: 0,
        monthlyLimit: 1500
      },
      priority: 3,
      costPerToken: 0.00008,
      maxTokens: 4000,
      reliability: 0.97,
      latency: 1800,
      rateLimits: {
        requestsPerMinute: 50,
        tokensPerMinute: 40000,
        requestsPerDay: 5000
      },
      healthScore: 100,
      errorCount: 0,
      successCount: 0
    });

    // DeepSeek
    const deepseekService = new DeepSeekService();
    this.providers.set('deepseek', {
      name: 'deepseek',
      service: deepseekService,
      capabilities: [
        { type: 'code_generation', quality: 88, speed: 90, reliability: 85, costEfficiency: 95 },
        { type: 'game_design', quality: 82, speed: 88, reliability: 87, costEfficiency: 92 },
        { type: 'text_generation', quality: 85, speed: 92, reliability: 88, costEfficiency: 94 }
      ],
      status: {
        isAvailable: true,
        currentLoad: 0,
        responseTime: 0,
        errorRate: 0,
        lastCheck: new Date()
      },
      metrics: {
        totalRequests: 0,
        successfulRequests: 0,
        failedRequests: 0,
        averageResponseTime: 0,
        averageQuality: 0,
        uptime: 100
      },
      costs: {
        costPerRequest: 0.005,
        costPerToken: 0.00003,
        dailySpent: 0,
        monthlyLimit: 2000
      },
      priority: 2,
      costPerToken: 0.00002,
      maxTokens: 4000,
      reliability: 0.95,
      latency: 2000,
      rateLimits: {
        requestsPerMinute: 100,
        tokensPerMinute: 150000,
        requestsPerDay: 20000
      },
      healthScore: 100,
      errorCount: 0,
      successCount: 0
    });

    this.logger.info(`ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${this.providers.size} AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º circuit breakers
    for (const providerName of this.providers.keys()) {
      this.circuitBreakers.set(providerName, {
        state: 'closed',
        failures: 0,
        lastFailure: null,
        successCount: 0,
        nextAttempt: null
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
   */
  private canHandleTask(provider: AIProvider, taskType: AITaskRequest['type']): boolean {
    return provider.capabilities.some(cap => cap.type === taskType);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private generateCacheKey(request: AITaskRequest): string {
    const contextHash = request.context ? 
      Buffer.from(JSON.stringify(request.context)).toString('base64').slice(0, 16) : '';
    
    return `${request.type}:${Buffer.from(request.prompt).toString('base64').slice(0, 32)}:${contextHash}`;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  private async updateProviderMetrics(
    providerName: string, 
    success: boolean, 
    responseTime: number, 
    result: any
  ): Promise<void> {
    const provider = this.providers.get(providerName);
    if (!provider) return;

    provider.metrics.totalRequests++;
    
    if (success) {
      provider.metrics.successfulRequests++;
      provider.status.errorRate = (provider.metrics.failedRequests / provider.metrics.totalRequests) * 100;
    } else {
      provider.metrics.failedRequests++;
      provider.status.errorRate = (provider.metrics.failedRequests / provider.metrics.totalRequests) * 100;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    provider.metrics.averageResponseTime = 
      (provider.metrics.averageResponseTime * (provider.metrics.totalRequests - 1) + responseTime) / 
      provider.metrics.totalRequests;

    provider.status.responseTime = responseTime;
    provider.status.lastCheck = new Date();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É (–ø—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤)
    const recentRequests = this.getRecentRequests(providerName, 60000); // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
    provider.status.currentLoad = Math.min(100, (recentRequests / 10) * 100);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private getRecentRequests(providerName: string, timeWindow: number): number {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
    return Math.floor(Math.random() * 5);
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   */
  private startHealthMonitoring(): void {
    setInterval(async () => {
      await this.checkProvidersHealth();
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    this.logger.info('üè• –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   */
  private async checkProvidersHealth(): Promise<void> {
    for (const [name, provider] of this.providers) {
      try {
        await this.healthChecker.checkProvider(provider);
        provider.status.isAvailable = true;
      } catch (error) {
        provider.status.isAvailable = false;
        this.logger.warn(`üí• –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
   */
  public getRoutingStats(): any {
    const stats = {
      providers: {},
      totalRequests: 0,
      cacheHitRate: 0,
      averageResponseTime: 0
    };

    for (const [name, provider] of this.providers) {
      stats.providers[name] = {
        status: provider.status.isAvailable ? 'healthy' : 'unhealthy',
        load: provider.status.currentLoad,
        successRate: provider.metrics.totalRequests > 0 ? 
          (provider.metrics.successfulRequests / provider.metrics.totalRequests) * 100 : 0,
        averageResponseTime: provider.metrics.averageResponseTime,
        totalRequests: provider.metrics.totalRequests,
        dailyCost: provider.costs.dailySpent
      };
      
      stats.totalRequests += provider.metrics.totalRequests;
    }

    return stats;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  private generateReasoning(provider: AIProvider, request: AITaskRequest, analysis: any): string {
    const capability = provider.capabilities.find(c => c.type === request.type);
    if (!capability) return '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á';

    const reasons = [];
    
    if (capability.quality > 90) reasons.push('–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ');
    if (capability.speed > 85) reasons.push('–±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞');
    if (capability.reliability > 90) reasons.push('–≤—ã—Å–æ–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å');
    if (capability.costEfficiency > 80) reasons.push('–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å');
    if (provider.status.currentLoad < 50) reasons.push('–Ω–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞');

    return `–í—ã–±—Ä–∞–Ω –∑–∞ ${reasons.join(', ')}`;
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  private estimateCost(provider: AIProvider, request: AITaskRequest): number {
    const baseCost = provider.costs.costPerRequest;
    const promptLength = request.prompt.length;
    const tokenCost = (promptLength / 4) * provider.costs.costPerToken; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    
    return baseCost + tokenCost;
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  private estimateTime(provider: AIProvider, request: AITaskRequest): number {
    const capability = provider.capabilities.find(c => c.type === request.type);
    if (!capability) return 30000; // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    const baseTime = 10000 - (capability.speed * 100); // –û—Ç 10 —Å–µ–∫—É–Ω–¥ –¥–æ 100–º—Å
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const loadMultiplier = 1 + (provider.status.currentLoad / 100);
    
    return Math.max(1000, baseTime * loadMultiplier);
  }

  private initializeMonitoring(): MonitoringData {
    return {
      requests: {
        total: 0,
        successful: 0,
        failed: 0,
        cached: 0
      },
      providers: {},
      errors: {},
      performance: {
        avgResponseTime: 0,
        p95ResponseTime: 0,
        cacheHitRate: 0
      },
      costs: {
        total: 0,
        byProvider: {},
        savedByCaching: 0
      }
    };
  }

  private initializeErrorPatterns(): Map<string, RegExp> {
    return new Map([
      ['timeout', /timeout|timed out|connection timeout/i],
      ['rate_limit', /rate limit|quota exceeded|too many requests/i],
      ['server_error', /server error|internal error|5\d\d/i],
      ['network_error', /network error|connection refused|dns/i],
      ['authentication', /auth|unauthorized|invalid key|403/i],
      ['quota_exceeded', /quota|billing|payment|insufficient funds/i],
      ['model_error', /model not found|invalid model|unsupported/i]
    ]);
  }

  // =================== MAIN API ===================

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AI –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
   */
  async generateResponse(options: RequestOptions): Promise<AIResponse> {
    const startTime = Date.now();
    const requestId = this.generateRequestId();
    
    try {
      this.logger.info(`üöÄ –ó–∞–ø—Ä–æ—Å ${requestId} –Ω–∞—á–∞—Ç`, {
        capability: options.capability,
        priority: options.priority,
        tokens: options.maxTokens
      });

      this.monitoring.requests.total++;

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      const cacheResult = await this.checkCache(options);
      if (cacheResult) {
        this.monitoring.requests.cached++;
        this.monitoring.costs.savedByCaching += this.estimateCost(options);
        
        this.logger.info(`üíæ –ö–µ—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId}`);
        return {
          ...cacheResult,
          cached: true,
          retryCount: 0
        };
      }

      // 2. –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const selectedProvider = await this.selectBestProvider(options);
      if (!selectedProvider) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤');
      }

      // 3. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π
      const response = await this.executeWithRetry(selectedProvider, options, requestId);
      
      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      await this.cacheResponse(options, response);
      
      // 5. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
      this.updateMetrics(selectedProvider.name, response, startTime);
      
      this.monitoring.requests.successful++;
      
      this.logger.info(`‚úÖ –ó–∞–ø—Ä–æ—Å ${requestId} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`, {
        provider: selectedProvider.name,
        latency: response.latency,
        cost: response.cost
      });

      return response;

    } catch (error) {
      this.monitoring.requests.failed++;
      this.recordError(error, requestId);
      
      this.logger.error(`‚ùå –ó–∞–ø—Ä–æ—Å ${requestId} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π:`, error);
      
      // –ü—ã—Ç–∞–µ–º—Å—è fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      if (options.fallbackProviders && options.fallbackProviders.length > 0) {
        return this.tryFallbackProviders(options, requestId, error);
      }
      
      throw error;
    }
  }

  // =================== PROVIDER SELECTION ===================

  /**
   * –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
   */
  private async selectBestProvider(options: RequestOptions): Promise<AIProvider | null> {
    const availableProviders = Array.from(this.providers.values())
      .filter(provider => this.isProviderAvailable(provider, options))
      .filter(provider => this.checkCircuitBreaker(provider.name));

    if (availableProviders.length === 0) {
      return null;
    }

    // –°–∫–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    const scoredProviders = availableProviders.map(provider => ({
      provider,
      score: this.calculateProviderScore(provider, options)
    }));

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É (–±–æ–ª—å—à–µ = –ª—É—á—à–µ)
    scoredProviders.sort((a, b) => b.score - a.score);

    this.logger.debug('üéØ –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:', {
      scores: scoredProviders.map(sp => ({
        name: sp.provider.name,
        score: sp.score.toFixed(2)
      }))
    });

    return scoredProviders[0].provider;
  }

  private isProviderAvailable(provider: AIProvider, options: RequestOptions): boolean {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ capability
    if (options.capability && !provider.capabilities.includes(options.capability)) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
    if (options.maxTokens && options.maxTokens > provider.maxTokens) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limits
    const rateLimitCheck = intelligentCache.checkRateLimit(
      provider.name,
      'requests',
      provider.rateLimits.requestsPerMinute,
      60000 // 1 –º–∏–Ω—É—Ç–∞
    );

    return rateLimitCheck.then(result => result.allowed);
  }

  // =================== CIRCUIT BREAKER ===================

  private checkCircuitBreaker(providerName: string): boolean {
    const breaker = this.circuitBreakers.get(providerName);
    if (!breaker) return true;

    const now = new Date();

    switch (breaker.state) {
      case 'closed':
        return true;

      case 'open':
        if (breaker.nextAttempt && now >= breaker.nextAttempt) {
          breaker.state = 'half-open';
          breaker.successCount = 0;
          this.logger.info(`üîì Circuit breaker –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ half-open: ${providerName}`);
          return true;
        }
        return false;

      case 'half-open':
        return true;

      default:
        return false;
    }
  }

  private updateCircuitBreaker(providerName: string, success: boolean): void {
    const breaker = this.circuitBreakers.get(providerName);
    if (!breaker) return;

    if (success) {
      if (breaker.state === 'half-open') {
        breaker.successCount++;
        if (breaker.successCount >= 3) {
          breaker.state = 'closed';
          breaker.failures = 0;
          breaker.lastFailure = null;
          this.logger.info(`‚úÖ Circuit breaker –∑–∞–∫—Ä—ã—Ç: ${providerName}`);
        }
      } else if (breaker.state === 'closed') {
        breaker.failures = Math.max(0, breaker.failures - 1);
      }
    } else {
      breaker.failures++;
      breaker.lastFailure = new Date();

      if (breaker.state === 'closed' && breaker.failures >= 5) {
        breaker.state = 'open';
        breaker.nextAttempt = new Date(Date.now() + 60000); // 1 –º–∏–Ω—É—Ç–∞
        this.logger.warn(`üö´ Circuit breaker –æ—Ç–∫—Ä—ã—Ç: ${providerName}`);
      } else if (breaker.state === 'half-open') {
        breaker.state = 'open';
        breaker.nextAttempt = new Date(Date.now() + 120000); // 2 –º–∏–Ω—É—Ç—ã
        this.logger.warn(`üö´ Circuit breaker —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç: ${providerName}`);
      }
    }
  }

  // =================== RETRY LOGIC ===================

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å —É–º–Ω–æ–π retry –ª–æ–≥–∏–∫–æ–π
   */
  private async executeWithRetry(
    provider: AIProvider, 
    options: RequestOptions, 
    requestId: string
  ): Promise<AIResponse> {
    const maxRetries = options.retries ?? this.retryConfig.maxRetries;
    let lastError: Error;
    let attempt = 0;

    while (attempt <= maxRetries) {
      try {
        const startTime = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limits –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        const rateLimitCheck = await intelligentCache.checkRateLimit(
          provider.name,
          'requests',
          provider.rateLimits.requestsPerMinute,
          60000
        );

        if (!rateLimitCheck.allowed) {
          throw new Error(`Rate limit exceeded for ${provider.name}. Reset at ${new Date(rateLimitCheck.resetTime)}`);
        }

        this.logger.debug(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxRetries + 1} –¥–ª—è ${provider.name}`, {
          requestId,
          remaining: rateLimitCheck.remaining
        });

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        const result = await this.executeProviderRequest(provider, options, requestId);
        
        const latency = Date.now() - startTime;
        const cost = this.calculateCost(provider, result.tokensUsed);

        // –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        this.updateCircuitBreaker(provider.name, true);
        provider.successCount++;
        
        const response: AIResponse = {
          content: result.content,
          provider: provider.name,
          tokensUsed: result.tokensUsed,
          latency,
          cost,
          cached: false,
          retryCount: attempt,
          metadata: result.metadata
        };

        if (attempt > 0) {
          this.logger.info(`‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω —Å ${attempt + 1} –ø–æ–ø—ã—Ç–∫–∏`, {
            requestId,
            provider: provider.name
          });
        }

        return response;

      } catch (error) {
        lastError = error as Error;
        attempt++;
        
        const errorType = this.classifyError(error);
        const isRetryable = this.isRetryableError(errorType);
        
        this.logger.warn(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞ –¥–ª—è ${provider.name}:`, {
          requestId,
          errorType,
          isRetryable,
          error: error.message
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º circuit breaker
        this.updateCircuitBreaker(provider.name, false);
        provider.errorCount++;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
        if (!isRetryable || attempt > maxRetries) {
          break;
        }

        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        const delay = this.calculateRetryDelay(attempt, errorType);
        if (delay > 0) {
          this.logger.debug(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`);
          await this.sleep(delay);
        }
      }
    }

    throw lastError;
  }

  private async executeProviderRequest(
    provider: AIProvider, 
    options: RequestOptions, 
    requestId: string
  ): Promise<{ content: string; tokensUsed: number; metadata?: any }> {
    const timeout = options.timeout || 30000;
    
    // –°–æ–∑–¥–∞–µ–º promise —Å timeout
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Request timeout')), timeout);
    });

    // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç capability
    let providerPromise: Promise<any>;
    
    switch (options.capability) {
      case 'code':
        providerPromise = provider.service.generateCode(options.prompt);
        break;
      case 'creative':
        providerPromise = provider.service.generateCreative?.(options.prompt) || 
                         provider.service.generateCompletion(options.prompt);
        break;
      case 'analysis':
        providerPromise = provider.service.generateAnalysis?.(options.prompt) || 
                         provider.service.generateCompletion(options.prompt);
        break;
      default:
        providerPromise = provider.service.generateCompletion(options.prompt);
        break;
    }

    const result = await Promise.race([providerPromise, timeoutPromise]);
    
    return {
      content: result.content || result.text || result,
      tokensUsed: result.tokensUsed || this.estimateTokens(options.prompt + (result.content || result)),
      metadata: result.metadata || {}
    };
  }

  private classifyError(error: any): string {
    const errorMessage = error.message || error.toString();
    
    for (const [type, pattern] of this.errorTypePatterns) {
      if (pattern.test(errorMessage)) {
        return type;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã
    if (error.status) {
      if (error.status >= 500) return 'server_error';
      if (error.status === 429) return 'rate_limit';
      if (error.status === 401 || error.status === 403) return 'authentication';
      if (error.status === 404) return 'model_error';
    }
    
    return 'unknown_error';
  }

  private isRetryableError(errorType: string): boolean {
    return this.retryConfig.retryableErrors.includes(errorType);
  }

  private calculateRetryDelay(attempt: number, errorType: string): number {
    let baseDelay = this.retryConfig.baseDelay;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è rate limit
    if (errorType === 'rate_limit') {
      baseDelay *= 2;
    }
    
    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    let delay = baseDelay * Math.pow(this.retryConfig.backoffMultiplier, attempt - 1);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    delay = Math.min(delay, this.retryConfig.maxDelay);
    
    // –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è thundering herd
    if (this.retryConfig.jitterEnabled) {
      delay += Math.random() * 1000;
    }
    
    return Math.floor(delay);
  }

  // =================== CACHING ===================

  private async checkCache(options: RequestOptions): Promise<AIResponse | null> {
    if (options.cacheOptions?.enabled === false) {
      return null;
    }

    try {
      const cacheKey = this.generateCacheKey(options);
      const cached = await intelligentCache.get<AIResponse>(cacheKey);
      
      if (cached) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–µ—à–∞
        this.monitoring.performance.cacheHitRate = 
          (this.monitoring.requests.cached + 1) / (this.monitoring.requests.total + 1);
        
        return cached;
      }
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–µ—à–∞:', error);
    }

    return null;
  }

  private async cacheResponse(options: RequestOptions, response: AIResponse): Promise<void> {
    if (options.cacheOptions?.enabled === false) {
      return;
    }

    try {
      const cacheKey = this.generateCacheKey(options);
      const ttl = options.cacheOptions?.ttl || 3600; // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      await intelligentCache.set(cacheKey, response, {
        ttl,
        tags: ['ai-response', response.provider, ...(options.cacheOptions?.tags || [])],
        priority: this.getPriorityCacheScore(options.priority)
      });
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  }

  private generateCacheKey(options: RequestOptions): string {
    const hash = require('crypto')
      .createHash('md5')
      .update(JSON.stringify({
        prompt: options.prompt,
        capability: options.capability,
        maxTokens: options.maxTokens,
        temperature: options.temperature
      }))
      .digest('hex');
    
    return `ai:${options.capability || 'completion'}:${hash}`;
  }

  private getPriorityCacheScore(priority?: string): number {
    switch (priority) {
      case 'critical': return 5;
      case 'high': return 4;
      case 'medium': return 3;
      case 'low': return 2;
      default: return 3;
    }
  }

  // =================== FALLBACK LOGIC ===================

  private async tryFallbackProviders(
    options: RequestOptions, 
    requestId: string, 
    originalError: Error
  ): Promise<AIResponse> {
    this.logger.info(`üîÑ –ü—Ä–æ–±—É–µ–º fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è ${requestId}`);
    
    for (const fallbackName of options.fallbackProviders || []) {
      const fallbackProvider = this.providers.get(fallbackName);
      
      if (!fallbackProvider) {
        this.logger.warn(`‚ö†Ô∏è Fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fallbackName}`);
        continue;
      }
      
      if (!this.checkCircuitBreaker(fallbackName)) {
        this.logger.warn(`üö´ Fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (circuit breaker): ${fallbackName}`);
        continue;
      }
      
      try {
        this.logger.info(`üîÑ –ü—Ä–æ–±—É–µ–º fallback: ${fallbackName}`);
        
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ retry –¥–ª—è fallback
        const fallbackOptions = {
          ...options,
          retries: Math.max(1, (options.retries || this.retryConfig.maxRetries) - 1)
        };
        
        const response = await this.executeWithRetry(fallbackProvider, fallbackOptions, requestId);
        
        this.logger.info(`‚úÖ Fallback —É—Å–ø–µ—à–µ–Ω: ${fallbackName}`);
        return response;
        
      } catch (fallbackError) {
        this.logger.warn(`‚ùå Fallback –Ω–µ—É–¥–∞—á–µ–Ω: ${fallbackName}`, fallbackError);
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –±—Ä–æ—Å–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    throw originalError;
  }

  // =================== MONITORING & METRICS ===================

  private updateMetrics(providerName: string, response: AIResponse, startTime: number): void {
    const responseTime = Date.now() - startTime;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    this.performanceWindow.push(responseTime);
    if (this.performanceWindow.length > 100) {
      this.performanceWindow.shift();
    }
    
    this.monitoring.performance.avgResponseTime = 
      this.performanceWindow.reduce((a, b) => a + b, 0) / this.performanceWindow.length;
    
    // P95 latency
    const sorted = [...this.performanceWindow].sort((a, b) => a - b);
    const p95Index = Math.floor(sorted.length * 0.95);
    this.monitoring.performance.p95ResponseTime = sorted[p95Index] || 0;
    
    // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if (!this.monitoring.providers[providerName]) {
      this.monitoring.providers[providerName] = {
        requests: 0,
        errors: 0,
        avgLatency: 0,
        totalCost: 0,
        tokensUsed: 0,
        reliability: 1
      };
    }
    
    const providerStats = this.monitoring.providers[providerName];
    providerStats.requests++;
    providerStats.totalCost += response.cost;
    providerStats.tokensUsed += response.tokensUsed;
    providerStats.avgLatency = (providerStats.avgLatency * (providerStats.requests - 1) + response.latency) / providerStats.requests;
    providerStats.reliability = (providerStats.requests - providerStats.errors) / providerStats.requests;
    
    // –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã
    this.monitoring.costs.total += response.cost;
    if (!this.monitoring.costs.byProvider[providerName]) {
      this.monitoring.costs.byProvider[providerName] = 0;
    }
    this.monitoring.costs.byProvider[providerName] += response.cost;
  }

  private recordError(error: any, requestId: string): void {
    const errorType = this.classifyError(error);
    
    if (!this.monitoring.errors[errorType]) {
      this.monitoring.errors[errorType] = {
        count: 0,
        lastOccurrence: new Date(),
        examples: []
      };
    }
    
    const errorStats = this.monitoring.errors[errorType];
    errorStats.count++;
    errorStats.lastOccurrence = new Date();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫ (–º–∞–∫—Å–∏–º—É–º 5)
    const errorMessage = error.message || error.toString();
    if (errorStats.examples.length < 5) {
      errorStats.examples.push(`${requestId}: ${errorMessage}`);
    }
    
    this.emit('error', {
      type: errorType,
      message: errorMessage,
      requestId,
      timestamp: new Date()
    });
  }

  // =================== HEALTH CHECKING ===================

  private startHealthChecking(): void {
    this.healthCheckInterval = setInterval(async () => {
      await this.performHealthCheck();
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  private async performHealthCheck(): Promise<void> {
    this.logger.debug('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...');
    
    for (const [name, provider] of this.providers) {
      try {
        const startTime = Date.now();
        
        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        await provider.service.generateCompletion('ping', { maxTokens: 1 });
        
        const latency = Date.now() - startTime;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è
        provider.healthScore = Math.min(100, provider.healthScore + 1);
        provider.latency = (provider.latency * 0.9) + (latency * 0.1); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        
        this.logger.debug(`‚úÖ ${name} –∑–¥–æ—Ä–æ–≤ (${provider.healthScore}/100, ${latency}ms)`);
        
      } catch (error) {
        provider.healthScore = Math.max(0, provider.healthScore - 10);
        provider.lastError = new Date();
        
        this.logger.warn(`‚ö†Ô∏è ${name} –Ω–µ–∑–¥–æ—Ä–æ–≤ (${provider.healthScore}/100):`, error.message);
      }
    }
  }

  private startPerformanceTracking(): void {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.emit('metrics', this.getMetrics());
    }, 5 * 60 * 1000);
  }

  // =================== UTILITY METHODS ===================

  private generateRequestId(): string {
    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private calculateCost(provider: AIProvider, tokensUsed: number): number {
    return provider.costPerToken * tokensUsed;
  }

  private estimateCost(options: RequestOptions): number {
    const estimatedTokens = this.estimateTokens(options.prompt);
    const averageCost = Array.from(this.providers.values())
      .reduce((sum, p) => sum + p.costPerToken, 0) / this.providers.size;
    
    return averageCost * estimatedTokens;
  }

  private estimateTokens(text: string): number {
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: ~4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    return Math.ceil(text.length / 4);
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // =================== PUBLIC API ===================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  getMetrics(): MonitoringData {
    return JSON.parse(JSON.stringify(this.monitoring));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   */
  getProvidersStatus(): { [key: string]: any } {
    const status: { [key: string]: any } = {};
    
    for (const [name, provider] of this.providers) {
      const breaker = this.circuitBreakers.get(name);
      
      status[name] = {
        name: provider.name,
        healthScore: provider.healthScore,
        reliability: provider.reliability,
        latency: provider.latency,
        circuitBreakerState: breaker?.state || 'unknown',
        successCount: provider.successCount,
        errorCount: provider.errorCount,
        lastError: provider.lastError,
        rateLimits: provider.rateLimits,
        capabilities: provider.capabilities
      };
    }
    
    return status;
  }

  /**
   * –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ circuit breaker
   */
  resetCircuitBreaker(providerName: string): boolean {
    const breaker = this.circuitBreakers.get(providerName);
    if (!breaker) return false;
    
    breaker.state = 'closed';
    breaker.failures = 0;
    breaker.lastFailure = null;
    breaker.successCount = 0;
    breaker.nextAttempt = null;
    
    this.logger.info(`üîß Circuit breaker —Å–±—Ä–æ—à–µ–Ω –≤—Ä—É—á–Ω—É—é: ${providerName}`);
    return true;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ AI –æ—Ç–≤–µ—Ç–æ–≤
   */
  async clearCache(tags?: string[]): Promise<number> {
    if (tags && tags.length > 0) {
      let cleared = 0;
      for (const tag of tags) {
        cleared += await intelligentCache.clearByTag(tag);
      }
      return cleared;
    } else {
      await intelligentCache.clearByTag('ai-response');
      return 1; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞
   */
  async close(): Promise<void> {
    if (this.healthCheckInterval) {
      clearInterval(this.healthCheckInterval);
    }
    
    this.logger.info('ü§ñ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π AI —Ä–æ—É—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // =================== NEW METHODS ===================

  public async generateCode(prompt: string, systemPrompt?: string): Promise<AIResponse> {
    return this.routeRequest('generateCode', [prompt, systemPrompt]);
  }

  public async generateGameDesign(prompt: string): Promise<AIResponse> {
    return this.routeRequest('generateGameDesign', [prompt]);
  }

  public async generatePhaserScene(sceneName: string, mechanics: string[], gameDesign: any): Promise<AIResponse> {
    return this.routeRequest('generatePhaserScene', [sceneName, mechanics, gameDesign]);
  }

  public async generateYandexIntegration(features: string[]): Promise<AIResponse> {
    return this.routeRequest('generateYandexIntegration', [features]);
  }

  private async routeRequest(method: string, args: any[]): Promise<AIResponse> {
    const requestId = `${method}-${Date.now()}-${Math.random()}`;
    const startTime = Date.now();

    this.logger.debug(`üöÄ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId}: ${method}`, { args: args.length });

    // –°–æ–∑–¥–∞–µ–º promise –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    return new Promise(async (resolve, reject) => {
      this.requestQueue.set(requestId, {
        resolve,
        reject,
        retryCount: 0,
        startTime
      });

      try {
        const result = await this.executeWithFailover(method, args, requestId);
        this.requestQueue.delete(requestId);
        resolve(result);
      } catch (error) {
        this.requestQueue.delete(requestId);
        reject(error);
      }
    });
  }

  private async executeWithFailover(method: string, args: any[], requestId: string): Promise<AIResponse> {
    let lastError: Error | null = null;
    const availableServices = await this.getAvailableServices();

    if (availableServices.length === 0) {
      throw new AIServiceError('–í—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'router', {
        requestId,
        method,
        availableServices: 0
      });
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    for (let attempt = 0; attempt < this.config.retryAttempts; attempt++) {
      for (const serviceName of availableServices) {
        try {
          this.logger.debug(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${this.config.retryAttempts} —á–µ—Ä–µ–∑ ${serviceName}`, {
            requestId,
            method
          });

          const service = this.providers.get(serviceName);
          if (!service || !service[method]) {
            throw new Error(`–ú–µ—Ç–æ–¥ ${method} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å–æ–º ${serviceName}`);
          }

          // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
          const result = await this.executeWithTimeout(
            service[method].bind(service),
            args,
            this.config.timeoutMs
          );

          // –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
          const duration = Date.now() - this.requestQueue.get(requestId)!.startTime;
          this.logger.info(`‚úÖ –ó–∞–ø—Ä–æ—Å ${requestId} –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ ${serviceName}`, {
            duration,
            method,
            tokensUsed: result.tokensUsed
          });

          this.emit('router:request-completed', {
            requestId,
            serviceName,
            method,
            duration,
            success: true
          });

          return result;

        } catch (error) {
          lastError = error instanceof Error ? error : new Error(String(error));
          
          this.logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${serviceName}:`, {
            requestId,
            method,
            attempt: attempt + 1,
            error: lastError.message
          });

          this.emit('router:request-failed', {
            requestId,
            serviceName,
            method,
            attempt: attempt + 1,
            error: lastError.message
          });

          // –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ—Ä–≤–∏—Å—É
          if (this.isCriticalError(lastError)) {
            break;
          }
        }
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
      if (attempt < this.config.retryAttempts - 1) {
        const delay = Math.min(1000 * Math.pow(2, attempt), 5000); // Exponential backoff
        await this.delay(delay);
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    const finalError = new AIServiceError(
      `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å ${method} –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤`,
      'router',
      {
        requestId,
        method,
        lastError: lastError?.message,
        attemptsExhausted: this.config.retryAttempts,
        availableServices: availableServices.length
      }
    );

    this.emit('router:request-exhausted', {
      requestId,
      method,
      error: finalError.message,
      availableServices
    });

    throw finalError;
  }

  private async getAvailableServices(): Promise<string[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ—Ç health monitor
      const activeService = await aiHealthMonitor.getActiveService();
      const healthData = await aiHealthMonitor.getHealthData() as any[];
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –∑–¥–æ—Ä–æ–≤—å—é
      const sortedServices = healthData
        .filter(service => service.status === 'healthy' || service.status === 'degraded')
        .sort((a, b) => {
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π
          if (a.serviceName === activeService) return -1;
          if (b.serviceName === activeService) return 1;
          
          // –ó–∞—Ç–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–¥–æ—Ä–æ–≤—å—è
          if (a.status === 'healthy' && b.status !== 'healthy') return -1;
          if (b.status === 'healthy' && a.status !== 'healthy') return 1;
          
          // –ó–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
          return a.responseTime - b.responseTime;
        })
        .map(service => service.serviceName);

      this.logger.debug('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:', {
        activeService,
        sortedServices,
        totalAvailable: sortedServices.length
      });

      return sortedServices;
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
      
      // Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      return this.config.preferredServices.filter(name => this.providers.has(name));
    }
  }

  private async executeWithTimeout<T>(
    fn: (...args: any[]) => Promise<T>,
    args: any[],
    timeoutMs: number
  ): Promise<T> {
    return new Promise((resolve, reject) => {
      const timeoutId = setTimeout(() => {
        reject(new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (${timeoutMs}ms)`));
      }, timeoutMs);

      fn(...args)
        .then(result => {
          clearTimeout(timeoutId);
          resolve(result);
        })
        .catch(error => {
          clearTimeout(timeoutId);
          reject(error);
        });
    });
  }

  private isCriticalError(error: Error): boolean {
    const criticalErrors = [
      'API key',
      'authentication',
      'unauthorized',
      'quota exceeded',
      'rate limit',
      'service unavailable'
    ];

    const errorMessage = error.message.toLowerCase();
    return criticalErrors.some(critical => errorMessage.includes(critical));
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

/**
 * –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–≥—Ä—É–∑–∫–∏
 */
class LoadBalancer {
  public distributeLoad(providers: AIProvider[], request: AITaskRequest): AIProvider[] {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∫–∞—á–µ—Å—Ç–≤—É
    return providers.sort((a, b) => {
      const aScore = (100 - a.status.currentLoad) + a.capabilities[0]?.quality || 0;
      const bScore = (100 - b.status.currentLoad) + b.capabilities[0]?.quality || 0;
      return bScore - aScore;
    });
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */
class HealthChecker {
  public async checkProvider(provider: AIProvider): Promise<void> {
    const startTime = Date.now();
    
    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å
      if ('generateCode' in provider.service) {
        await provider.service.generateCode('Test prompt for health check');
      }
      
      const responseTime = Date.now() - startTime;
      provider.status.responseTime = responseTime;
      provider.status.lastCheck = new Date();
      
    } catch (error) {
      throw new Error(`Health check failed: ${error.message}`);
    }
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
class ContextAnalyzer {
  public async analyze(request: AITaskRequest): Promise<any> {
    const analysis = {
      complexity: this.estimateComplexity(request.prompt),
      domain: this.identifyDomain(request.prompt),
      urgency: request.requirements?.optimization === 'speed' ? 'high' : 'normal',
      qualityRequirement: request.requirements?.optimization === 'quality' ? 'high' : 'normal'
    };

    return analysis;
  }

  private estimateComplexity(prompt: string): 'low' | 'medium' | 'high' {
    if (prompt.length < 100) return 'low';
    if (prompt.length < 500) return 'medium';
    return 'high';
  }

  private identifyDomain(prompt: string): string {
    const gameKeywords = ['–∏–≥—Ä–∞', 'game', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä', '–∞—Ä–∫–∞–¥–∞', '–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞'];
    const codeKeywords = ['–∫–æ–¥', 'code', 'function', 'class', 'javascript'];
    
    const lowerPrompt = prompt.toLowerCase();
    
    if (gameKeywords.some(keyword => lowerPrompt.includes(keyword))) {
      return 'gaming';
    }
    
    if (codeKeywords.some(keyword => lowerPrompt.includes(keyword))) {
      return 'programming';
    }
    
    return 'general';
  }
}

/**
 * –¢—Ä–µ–∫–µ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏
 */
class CostTracker {
  private dailyCosts = new Map<string, number>();

  public trackCost(providerName: string, cost: number): void {
    const today = new Date().toDateString();
    const key = `${providerName}:${today}`;
    
    const currentCost = this.dailyCosts.get(key) || 0;
    this.dailyCosts.set(key, currentCost + cost);
  }

  public getDailyCost(providerName: string): number {
    const today = new Date().toDateString();
    const key = `${providerName}:${today}`;
    return this.dailyCosts.get(key) || 0;
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const intelligentAIRouter = new IntelligentAIRouter();
export default intelligentAIRouter; 
import { EventEmitter } from 'events';
import { LoggerService } from '../logger';
import { IntelligentAIRouter } from './intelligentRouter';

interface PromptAnalysis {
  originalPrompt: string;
  expandedPrompt: string;
  userIntent: UserIntent;
  gameClassification: GameClassification;
  complexity: PromptComplexity;
  missingElements: string[];
  suggestedEnhancements: string[];
  confidenceScore: number;
}

interface UserIntent {
  primaryGoal: 'create_game' | 'learn_development' | 'prototype_idea' | 'experiment' | 'commercial_project';
  experience: 'beginner' | 'intermediate' | 'advanced' | 'professional';
  urgency: 'low' | 'medium' | 'high';
  context: string;
  emotionalTone: string;
}

interface GameClassification {
  genre: string;
  subGenre?: string;
  targetAudience: string;
  complexity: 'simple' | 'medium' | 'complex' | 'enterprise';
  estimatedPlaytime: string;
  monetizationSuggestions: string[];
  technicalRequirements: string[];
}

interface PromptComplexity {
  level: 'basic' | 'intermediate' | 'advanced' | 'expert';
  missingDetails: string[];
  overComplications: string[];
  clarificationNeeded: string[];
}

interface EnhancedPrompt {
  main: string;
  technical: string;
  creative: string;
  aiSpecific: { [provider: string]: string };
}

export class SmartPromptEngine extends EventEmitter {
  private logger: LoggerService;
  private aiRouter: IntelligentAIRouter;
  private genreDatabase: Map<string, any> = new Map();
  private intentPatterns: Map<string, RegExp[]> = new Map();
  private templateLibrary: Map<string, string> = new Map();
  private userHistory: Map<string, any[]> = new Map();

  constructor(aiRouter: IntelligentAIRouter) {
    super();
    this.logger = new LoggerService();
    this.aiRouter = aiRouter;
    this.initializeGenreDatabase();
    this.initializeIntentPatterns();
    this.initializeTemplateLibrary();
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
   */
  public async analyzeAndEnhancePrompt(
    prompt: string,
    userId?: string,
    context?: any
  ): Promise<PromptAnalysis> {
    try {
      this.logger.info(`üß† –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞: "${prompt.slice(0, 100)}..."`);

      // –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞
      const userIntent = await this.analyzeUserIntent(prompt, userId);
      const gameClassification = await this.classifyGameRequest(prompt);
      const complexity = this.analyzeComplexity(prompt);

      // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
      const expandedPrompt = await this.expandPrompt(prompt, userIntent, gameClassification, context);

      // –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const missingElements = this.identifyMissingElements(prompt, gameClassification);
      
      // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
      const suggestedEnhancements = await this.generateEnhancements(
        prompt, 
        userIntent, 
        gameClassification,
        missingElements
      );

      // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ
      const confidenceScore = this.calculateConfidenceScore(
        prompt, 
        userIntent, 
        gameClassification, 
        complexity
      );

      const analysis: PromptAnalysis = {
        originalPrompt: prompt,
        expandedPrompt,
        userIntent,
        gameClassification,
        complexity,
        missingElements,
        suggestedEnhancements,
        confidenceScore
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userId) {
        this.updateUserHistory(userId, analysis);
      }

      this.emit('prompt:analyzed', {
        userId,
        analysis,
        improvements: suggestedEnhancements.length
      });

      this.logger.info(`‚úÖ –ü—Ä–æ–º–ø—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(confidenceScore * 100)}%`);

      return analysis;

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º–ø—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async analyzeUserIntent(prompt: string, userId?: string): Promise<UserIntent> {
    const lowerPrompt = prompt.toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å
    let primaryGoal: UserIntent['primaryGoal'] = 'create_game';
    
    if (this.matchesPatterns(lowerPrompt, 'learn')) {
      primaryGoal = 'learn_development';
    } else if (this.matchesPatterns(lowerPrompt, 'prototype')) {
      primaryGoal = 'prototype_idea';
    } else if (this.matchesPatterns(lowerPrompt, 'experiment')) {
      primaryGoal = 'experiment';
    } else if (this.matchesPatterns(lowerPrompt, 'commercial')) {
      primaryGoal = 'commercial_project';
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
    let experience: UserIntent['experience'] = 'beginner';
    
    if (this.matchesPatterns(lowerPrompt, 'advanced')) {
      experience = 'advanced';
    } else if (this.matchesPatterns(lowerPrompt, 'professional')) {
      experience = 'professional';
    } else if (this.matchesPatterns(lowerPrompt, 'intermediate')) {
      experience = 'intermediate';
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å
    let urgency: UserIntent['urgency'] = 'medium';
    
    if (this.matchesPatterns(lowerPrompt, 'urgent')) {
      urgency = 'high';
    } else if (this.matchesPatterns(lowerPrompt, 'relaxed')) {
      urgency = 'low';
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
    const emotionalTone = this.analyzeEmotionalTone(prompt);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const context = this.extractContext(prompt);

    return {
      primaryGoal,
      experience,
      urgency,
      context,
      emotionalTone
    };
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   */
  private async classifyGameRequest(prompt: string): Promise<GameClassification> {
    const lowerPrompt = prompt.toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–∞–Ω—Ä
    let genre = 'platformer'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let subGenre: string | undefined;
    
    for (const [genreName, genreData] of this.genreDatabase) {
      if (genreData.keywords.some((keyword: string) => lowerPrompt.includes(keyword))) {
        genre = genreName;
        // –ò—â–µ–º –ø–æ–¥–∂–∞–Ω—Ä
        if (genreData.subGenres) {
          for (const [subName, subData] of Object.entries(genreData.subGenres)) {
            if ((subData as any).keywords.some((keyword: string) => lowerPrompt.includes(keyword))) {
              subGenre = subName;
              break;
            }
          }
        }
        break;
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
    let targetAudience = 'everyone';
    
    if (this.matchesPatterns(lowerPrompt, 'children')) {
      targetAudience = 'children';
    } else if (this.matchesPatterns(lowerPrompt, 'adults')) {
      targetAudience = 'adults';
    } else if (this.matchesPatterns(lowerPrompt, 'teenagers')) {
      targetAudience = 'teenagers';
    }

    // –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    let complexity: GameClassification['complexity'] = 'medium';
    
    if (this.matchesPatterns(lowerPrompt, 'simple')) {
      complexity = 'simple';
    } else if (this.matchesPatterns(lowerPrompt, 'complex')) {
      complexity = 'complex';
    } else if (this.matchesPatterns(lowerPrompt, 'enterprise')) {
      complexity = 'enterprise';
    }

    // –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
    const estimatedPlaytime = this.estimatePlaytime(prompt, genre, complexity);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é
    const monetizationSuggestions = this.suggestMonetization(genre, targetAudience, complexity);
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    const technicalRequirements = this.determineTechnicalRequirements(genre, complexity);

    return {
      genre,
      subGenre,
      targetAudience,
      complexity,
      estimatedPlaytime,
      monetizationSuggestions,
      technicalRequirements
    };
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  private async expandPrompt(
    prompt: string,
    userIntent: UserIntent,
    gameClassification: GameClassification,
    context?: any
  ): Promise<string> {
    const genreData = this.genreDatabase.get(gameClassification.genre);
    
    let expandedPrompt = prompt;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∂–∞–Ω—Ä–∞
    if (genreData) {
      expandedPrompt += `\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∂–∞–Ω—Ä–∞ ${gameClassification.genre}:`;
      expandedPrompt += `\n–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏: ${genreData.coreMechanics.join(', ')}`;
      expandedPrompt += `\n–¢–∏–ø–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${genreData.commonElements.join(', ')}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    expandedPrompt += `\n\n–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${gameClassification.targetAudience}`;
    expandedPrompt += `\n–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${gameClassification.complexity}`;
    expandedPrompt += `\n–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã: ${gameClassification.estimatedPlaytime}`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if (gameClassification.technicalRequirements.length > 0) {
      expandedPrompt += `\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:`;
      expandedPrompt += `\n${gameClassification.technicalRequirements.join('\n')}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userIntent.experience !== 'beginner') {
      expandedPrompt += `\n\n–£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: ${userIntent.experience}`;
      expandedPrompt += '\n–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∏.';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    if (gameClassification.monetizationSuggestions.length > 0) {
      expandedPrompt += `\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏:`;
      expandedPrompt += `\n${gameClassification.monetizationSuggestions.join('\n')}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    expandedPrompt += '\n\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ø–Ω–¥–µ–∫—Å –ò–≥—Ä—ã:';
    expandedPrompt += '\n- –†–∞–∑–º–µ—Ä –∏–≥—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 20MB';
    expandedPrompt += '\n- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    expandedPrompt += '\n- –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥)';
    expandedPrompt += '\n- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Yandex Games SDK';

    return expandedPrompt;
  }

  /**
   * –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ
   */
  private identifyMissingElements(prompt: string, classification: GameClassification): string[] {
    const missing: string[] = [];
    const lowerPrompt = prompt.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã
    const essentialElements = [
      { name: '–ø–µ—Ä—Å–æ–Ω–∞–∂', keywords: ['–ø–µ—Ä—Å–æ–Ω–∞–∂', '–≥–µ—Ä–æ–π', '–∏–≥—Ä–æ–∫', 'character', 'player'] },
      { name: '—Ü–µ–ª—å –∏–≥—Ä—ã', keywords: ['—Ü–µ–ª—å', '–∑–∞–¥–∞—á–∞', '–ø–æ–±–µ–¥–∞', 'goal', 'objective'] },
      { name: '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', keywords: ['—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–∫–æ–Ω—Ç—Ä–æ–ª—å', '–∫–Ω–æ–ø–∫–∏', 'control', 'input'] },
      { name: '–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è', keywords: ['–≤—Ä–∞–≥–∏', '–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è', '–≤—ã–∑–æ–≤—ã', 'enemies', 'obstacles'] },
      { name: '–ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è', keywords: ['—É—Ä–æ–≤–Ω–∏', '–ø—Ä–æ–≥—Ä–µ—Å—Å', '—Ä–∞–∑–≤–∏—Ç–∏–µ', 'levels', 'progression'] },
      { name: '–≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å', keywords: ['—Å—Ç–∏–ª—å', '–≥—Ä–∞—Ñ–∏–∫–∞', '–¥–∏–∑–∞–π–Ω', 'art', 'visual'] }
    ];

    for (const element of essentialElements) {
      if (!element.keywords.some(keyword => lowerPrompt.includes(keyword))) {
        missing.push(element.name);
      }
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∂–∞–Ω—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
    const genreData = this.genreDatabase.get(classification.genre);
    if (genreData && genreData.requiredElements) {
      for (const requiredElement of genreData.requiredElements) {
        if (!lowerPrompt.includes(requiredElement.toLowerCase())) {
          missing.push(requiredElement);
        }
      }
    }

    return missing;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
   */
  private async generateEnhancements(
    prompt: string,
    userIntent: UserIntent,
    classification: GameClassification,
    missingElements: string[]
  ): Promise<string[]> {
    const enhancements: string[] = [];

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (missingElements.includes('–ø–µ—Ä—Å–æ–Ω–∞–∂')) {
      enhancements.push('–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –µ–≥–æ –≤–Ω–µ—à–Ω–æ—Å—Ç—å, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä');
    }

    if (missingElements.includes('—Ü–µ–ª—å –∏–≥—Ä—ã')) {
      enhancements.push('–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å –∏–≥—Ä—ã: —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–æ—Å—Ç–∏—á—å –∏–≥—Ä–æ–∫?');
    }

    if (missingElements.includes('—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')) {
      enhancements.push('–£—Ç–æ—á–Ω–∏—Ç–µ —Å—Ö–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏/–∂–µ—Å—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?');
    }

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–∞
    const genreData = this.genreDatabase.get(classification.genre);
    if (genreData && genreData.suggestions) {
      enhancements.push(...genreData.suggestions);
    }

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userIntent.experience === 'beginner') {
      enhancements.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤');
      enhancements.push('–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ—â–µ –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫');
    } else if (userIntent.experience === 'advanced') {
      enhancements.push('–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ—Ç–∞–≥–µ–π–º–ø–ª–µ—è');
      enhancements.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —Å–∫—Ä—ã—Ç—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤');
    }

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
    if (classification.monetizationSuggestions.length > 0) {
      enhancements.push('–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–≥—Ä—ã (–º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏, –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏)');
      enhancements.push('–î–æ–±–∞–≤—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ (–∫–æ—Å–º–µ—Ç–∏–∫–∞, –±—É—Å—Ç–µ—Ä—ã)');
    }

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    enhancements.push('–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤');
    enhancements.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏');
    enhancements.push('–í–∫–ª—é—á–∏—Ç–µ –∑–≤—É–∫–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è');

    return enhancements;
  }

  /**
   * –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é AI –º–æ–¥–µ–ª—å
   */
  public adaptPromptForAI(
    analysis: PromptAnalysis,
    aiProvider: 'openai' | 'claude' | 'deepseek',
    taskType: 'game_design' | 'code_generation' | 'image_generation'
  ): string {
    let adaptedPrompt = analysis.expandedPrompt;

    switch (aiProvider) {
      case 'openai':
        adaptedPrompt = this.adaptForOpenAI(adaptedPrompt, taskType);
        break;
      case 'claude':
        adaptedPrompt = this.adaptForClaude(adaptedPrompt, taskType);
        break;
      case 'deepseek':
        adaptedPrompt = this.adaptForDeepSeek(adaptedPrompt, taskType);
        break;
    }

    return adaptedPrompt;
  }

  /**
   * –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è OpenAI
   */
  private adaptForOpenAI(prompt: string, taskType: string): string {
    let adapted = prompt;

    // OpenAI –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —á–µ—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    adapted = `–ó–∞–¥–∞—á–∞: ${taskType}\n\n${adapted}`;
    
    if (taskType === 'image_generation') {
      adapted += '\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:';
      adapted += '\n- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è';
      adapted += '\n- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–≤–æ–º—É —Å—Ç–∏–ª—é';
      adapted += '\n- –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ü–≤–µ—Ç–∞ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è';
    }

    return adapted;
  }

  /**
   * –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è Claude
   */
  private adaptForClaude(prompt: string, taskType: string): string {
    let adapted = prompt;

    // Claude —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
    adapted = `–ö–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–µ–π–º–¥–∏–∑–∞–π–Ω—É, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞—á—É: ${taskType}\n\n${adapted}`;
    adapted += '\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á—Ç–∏—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã.';

    return adapted;
  }

  /**
   * –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è DeepSeek
   */
  private adaptForDeepSeek(prompt: string, taskType: string): string {
    let adapted = prompt;

    // DeepSeek —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    if (taskType === 'code_generation') {
      adapted = `–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –∏–≥—Ä—ã\n\n${adapted}`;
      adapted += '\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:';
      adapted += '\n- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JavaScript/TypeScript';
      adapted += '\n- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥';
      adapted += '\n- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º';
    }

    return adapted;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
   */
  private initializeGenreDatabase(): void {
    this.genreDatabase.set('platformer', {
      keywords: ['–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä', '–ø—Ä—ã–∂–∫–∏', '–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è', '—É—Ä–æ–≤–Ω–∏', 'platformer', 'jump'],
      coreMechanics: ['–ø—Ä—ã–∂–∫–∏', '–±–µ–≥', '—Å–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤', '–∏–∑–±–µ–≥–∞–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π'],
      commonElements: ['–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', '–≤—Ä–∞–≥–∏', '–º–æ–Ω–µ—Ç—ã', '–∂–∏–∑–Ω–∏', '—Ñ–∏–Ω–∏—à'],
      requiredElements: ['—Å–∏—Å—Ç–µ–º–∞ –ø—Ä—ã–∂–∫–æ–≤', '–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã'],
      suggestions: [
        '–î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º (–¥–≤–∏–∂—É—â–∏–µ—Å—è, –∏—Å—á–µ–∑–∞—é—â–∏–µ, –ø—Ä—É–∂–∏–Ω—è—â–∏–µ)',
        '–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤—Ä–∞–≥–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º',
        '–í–∫–ª—é—á–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —Å–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—á–∫–æ–≤'
      ]
    });

    this.genreDatabase.set('puzzle', {
      keywords: ['–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞', '–ª–æ–≥–∏–∫–∞', '–º—ã—à–ª–µ–Ω–∏–µ', 'puzzle', 'brain'],
      coreMechanics: ['–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', '—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      commonElements: ['–±–ª–æ–∫–∏', '—Ü–≤–µ—Ç–∞', '—Ñ–æ—Ä–º—ã', '–≤—Ä–µ–º—è', '—Ö–æ–¥—ã'],
      requiredElements: ['–ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã', '—Å–∏—Å—Ç–µ–º–∞ –ø–æ–±–µ–¥—ã'],
      suggestions: [
        '–†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π',
        '–î–æ–±–∞–≤—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤',
        '–í–∫–ª—é—á–∏—Ç–µ —Ç–∞–π–º–µ—Ä –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è'
      ]
    });

    this.genreDatabase.set('arcade', {
      keywords: ['–∞—Ä–∫–∞–¥–∞', '–±—ã—Å—Ç—Ä–æ', '—Ä–µ—Ñ–ª–µ–∫—Å—ã', '–æ—á–∫–∏', 'arcade', 'action'],
      coreMechanics: ['–±—ã—Å—Ç—Ä—ã–µ —Ä–µ–∞–∫—Ü–∏–∏', '–Ω–∞–±–æ—Ä –æ—á–∫–æ–≤', '—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏'],
      commonElements: ['—Å—á–µ—Ç—á–∏–∫ –æ—á–∫–æ–≤', '–∂–∏–∑–Ω–∏', '–±–æ–Ω—É—Å—ã', '–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è'],
      requiredElements: ['—Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤', '–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è'],
      suggestions: [
        '–î–æ–±–∞–≤—å—Ç–µ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º',
        '–í–∫–ª—é—á–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ power-ups',
        '–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
      ]
    });

    this.logger.info(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.genreDatabase.size} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∂–∞–Ω—Ä–æ–≤`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
   */
  private initializeIntentPatterns(): void {
    this.intentPatterns.set('learn', [
      /–Ω–∞—É—á–∏(—Ç—å)?—Å—è?/i,
      /–∏–∑—É—á–∏(—Ç—å)?/i,
      /learn/i,
      /tutorial/i,
      /–∫–∞–∫\s+—Å–¥–µ–ª–∞—Ç—å/i
    ]);

    this.intentPatterns.set('prototype', [
      /–ø—Ä–æ—Ç–æ—Ç–∏–ø/i,
      /–±—ã—Å—Ç—Ä–æ/i,
      /prototype/i,
      /mvp/i,
      /—Ç–µ—Å—Ç/i
    ]);

    this.intentPatterns.set('experiment', [
      /—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç/i,
      /–ø–æ–ø—Ä–æ–±–æ–≤/i,
      /experiment/i,
      /try/i,
      /–∏–¥–µ—è/i
    ]);

    this.intentPatterns.set('commercial', [
      /–∫–æ–º–º–µ—Ä—á–µ—Å–∫/i,
      /–ø—Ä–æ–¥–∞—Ç—å/i,
      /–∑–∞—Ä–∞–±–æ—Ç/i,
      /commercial/i,
      /monetize/i
    ]);

    this.intentPatterns.set('advanced', [
      /—Å–ª–æ–∂–Ω/i,
      /–ø—Ä–æ–¥–≤–∏–Ω—É—Ç/i,
      /advanced/i,
      /professional/i,
      /enterprise/i
    ]);

    this.intentPatterns.set('urgent', [
      /—Å—Ä–æ—á–Ω–æ/i,
      /–±—ã—Å—Ç—Ä–æ/i,
      /urgent/i,
      /asap/i,
      /deadline/i
    ]);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
   */
  private initializeTemplateLibrary(): void {
    this.templateLibrary.set('basic_game', `
–°–æ–∑–¥–∞–π –∏–≥—Ä—É —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {title}
- –ñ–∞–Ω—Ä: {genre}
- –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {audience}
- –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏: {mechanics}
- –í–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å: {style}
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: –Ø–Ω–¥–µ–∫—Å –ò–≥—Ä—ã (HTML5)
    `);

    this.templateLibrary.set('character_description', `
–û–ø–∏—à–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä—ã:
- –ò–º—è –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç—å
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
- –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è
- –ú–æ—Ç–∏–≤–∞—Ü–∏—è
- –°—Ç–∏–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏: {style}
    `);

    this.templateLibrary.set('level_design', `
–°–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω —É—Ä–æ–≤–Ω—è –¥–ª—è –∏–≥—Ä—ã –∂–∞–Ω—Ä–∞ {genre}:
- –¢–µ–º–∞ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —É—Ä–æ–≤–Ω—è
- –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤ –∏ –±–æ–Ω—É—Å–æ–≤
- –£—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
- –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty}
    `);
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  private matchesPatterns(text: string, patternKey: string): boolean {
    const patterns = this.intentPatterns.get(patternKey);
    return patterns ? patterns.some(pattern => pattern.test(text)) : false;
  }

  private analyzeEmotionalTone(prompt: string): string {
    const lowerPrompt = prompt.toLowerCase();
    
    if (lowerPrompt.includes('–≤–µ—Å–µ–ª') || lowerPrompt.includes('fun')) return '–≤–µ—Å–µ–ª—ã–π';
    if (lowerPrompt.includes('—Å–µ—Ä—å–µ–∑') || lowerPrompt.includes('serious')) return '—Å–µ—Ä—å–µ–∑–Ω—ã–π';
    if (lowerPrompt.includes('–º—Ä–∞—á–Ω') || lowerPrompt.includes('dark')) return '–º—Ä–∞—á–Ω—ã–π';
    if (lowerPrompt.includes('–ª–µ–≥–∫') || lowerPrompt.includes('casual')) return '–ª–µ–≥–∫–∏–π';
    
    return '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π';
  }

  private extractContext(prompt: string): string {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
    const contexts = [];
    
    if (prompt.includes('–¥–ª—è –¥–µ—Ç–µ–π')) contexts.push('–¥–µ—Ç—Å–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è');
    if (prompt.includes('–º–æ–±–∏–ª—å–Ω')) contexts.push('–º–æ–±–∏–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞');
    if (prompt.includes('–±—ã—Å—Ç—Ä')) contexts.push('–±—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞');
    if (prompt.includes('–æ–±—É—á–∞—é—â')) contexts.push('–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
    
    return contexts.join(', ') || '–æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç';
  }

  private estimatePlaytime(prompt: string, genre: string, complexity: string): string {
    if (prompt.includes('–±—ã—Å—Ç—Ä') || genre === 'arcade') return '5-15 –º–∏–Ω—É—Ç';
    if (complexity === 'simple') return '10-30 –º–∏–Ω—É—Ç';
    if (complexity === 'complex') return '30-60 –º–∏–Ω—É—Ç';
    return '15-45 –º–∏–Ω—É—Ç';
  }

  private suggestMonetization(genre: string, audience: string, complexity: string): string[] {
    const suggestions = [];
    
    if (audience === 'children') {
      suggestions.push('–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏');
      suggestions.push('–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞');
    } else {
      suggestions.push('–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–∞—é—â–∞—è —Ä–µ–∫–ª–∞–º–∞');
      suggestions.push('–ú–µ–∂—É—Ä–æ–≤–Ω–µ–≤—ã–µ –±–∞–Ω–Ω–µ—Ä—ã');
    }
    
    if (complexity !== 'simple') {
      suggestions.push('–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏');
      suggestions.push('–ü—Ä–µ–º–∏—É–º —É—Ä–æ–≤–Ω–∏');
    }
    
    return suggestions;
  }

  private determineTechnicalRequirements(genre: string, complexity: string): string[] {
    const requirements = [
      'HTML5 Canvas –∏–ª–∏ WebGL',
      '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
      '–°–µ–Ω—Å–æ—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
    ];
    
    if (genre === 'arcade') {
      requirements.push('–í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (60 FPS)');
    }
    
    if (complexity === 'complex') {
      requirements.push('–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
      requirements.push('–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    }
    
    return requirements;
  }

  private analyzeComplexity(prompt: string): PromptComplexity {
    const wordCount = prompt.split(' ').length;
    const hasDetails = /\b(–º–µ—Ö–∞–Ω–∏–∫|–ø—Ä–∞–≤–∏–ª|—Å–∏—Å—Ç–µ–º|—É—Ä–æ–≤–Ω|–ø–µ—Ä—Å–æ–Ω–∞–∂)\b/i.test(prompt);
    
    let level: PromptComplexity['level'] = 'basic';
    
    if (wordCount > 100 && hasDetails) level = 'advanced';
    else if (wordCount > 50 || hasDetails) level = 'intermediate';
    
    return {
      level,
      missingDetails: [],
      overComplications: [],
      clarificationNeeded: []
    };
  }

  private calculateConfidenceScore(
    prompt: string,
    userIntent: UserIntent,
    gameClassification: GameClassification,
    complexity: PromptComplexity
  ): number {
    let score = 0.5; // –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    
    // –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω—É –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é
    if (prompt.length > 100) score += 0.2;
    if (prompt.length > 300) score += 0.1;
    
    // –ë–æ–Ω—É—Å –∑–∞ —è—Å–Ω–æ—Å—Ç—å –∂–∞–Ω—Ä–∞
    if (gameClassification.genre !== 'platformer') score += 0.1; // –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∂–∞–Ω—Ä
    
    // –ë–æ–Ω—É—Å –∑–∞ —É–∫–∞–∑–∞–Ω–∏–µ –æ–ø—ã—Ç–∞
    if (userIntent.experience !== 'beginner') score += 0.1;
    
    return Math.min(1.0, score);
  }

  private updateUserHistory(userId: string, analysis: PromptAnalysis): void {
    if (!this.userHistory.has(userId)) {
      this.userHistory.set(userId, []);
    }
    
    const history = this.userHistory.get(userId)!;
    history.push({
      timestamp: new Date(),
      analysis: analysis,
      genre: analysis.gameClassification.genre
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (history.length > 10) {
      history.shift();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
   */
  public getPersonalizedSuggestions(userId: string): string[] {
    const history = this.userHistory.get(userId);
    if (!history || history.length === 0) return [];

    const suggestions = [];
    const recentGenres = history.slice(-3).map(h => h.genre);
    const favoriteGenre = this.getMostFrequent(recentGenres);

    if (favoriteGenre) {
      suggestions.push(`–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∂–∞–Ω—Ä–∞ ${favoriteGenre}`);
    }

    return suggestions;
  }

  private getMostFrequent(array: string[]): string | null {
    if (array.length === 0) return null;
    
    const frequency = array.reduce((acc, item) => {
      acc[item] = (acc[item] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    return Object.keys(frequency).reduce((a, b) => frequency[a] > frequency[b] ? a : b);
  }
} 
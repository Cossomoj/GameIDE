import OpenAI from 'openai';
import config from '@/config';
import { LoggerService } from '@/services/logger';
import { AssetGenerationResult } from '@/types';
import { AIServiceError, QuotaExceededError } from '@/middleware/errorHandler';
import sharp from 'sharp';

export class OpenAIService {
  private client: OpenAI;
  private logger: LoggerService;
  private requestCount: number = 0;
  private lastResetTime: number = Date.now();

  constructor() {
    this.logger = new LoggerService();

    if (!config.ai.openai.apiKey) {
      throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    this.client = new OpenAI({
      apiKey: config.ai.openai.apiKey,
    });
  }

  public async generateImage(
    prompt: string, 
    style: string = 'pixel art',
    size: '1024x1024' | '1792x1024' | '1024x1792' = '1024x1024'
  ): Promise<AssetGenerationResult> {
    const startTime = Date.now();

    try {
      this.checkRateLimit();

      const enhancedPrompt = this.enhanceImagePrompt(prompt, style);
      
      this.logger.aiRequest('openai', 'dall-e-3', enhancedPrompt.length);

      const response = await this.client.images.generate({
        model: 'dall-e-3',
        prompt: enhancedPrompt,
        n: 1,
        size,
        quality: 'standard',
        response_format: 'b64_json',
      });

      const duration = Date.now() - startTime;
      this.logger.aiResponse('openai', 'dall-e-3', 1, duration);

      if (!response.data[0]?.b64_json) {
        throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OpenAI');
      }

      const imageBuffer = Buffer.from(response.data[0].b64_json, 'base64');
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const optimizedBuffer = await this.optimizeImage(imageBuffer);
      
      return {
        type: 'image',
        data: optimizedBuffer,
        metadata: {
          size: optimizedBuffer.length,
          dimensions: this.parseDimensions(size),
          format: 'png',
        },
      };

    } catch (error: any) {
      const duration = Date.now() - startTime;
      this.logger.aiError('openai', { error: error.message, duration });

      if (error.status === 429) {
        throw new QuotaExceededError('–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ OpenAI API', 'openai');
      }

      if (error.status === 401) {
        throw new AIServiceError('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI', 'openai', error);
      }

      throw new AIServiceError(
        `–û—à–∏–±–∫–∞ OpenAI API: ${error.message}`,
        'openai',
        error
      );
    }
  }

  public async generateSprite(
    description: string,
    style: string = 'pixel art',
    dimensions: { width: number; height: number } = { width: 64, height: 64 }
  ): Promise<AssetGenerationResult> {
    const prompt = `
    ${description}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–ø—Ä–∞–π—Ç—É:
    - –†–∞–∑–º–µ—Ä: ${dimensions.width}x${dimensions.height} –ø–∏–∫—Å–µ–ª–µ–π
    - –°—Ç–∏–ª—å: ${style}
    - –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    - –ß–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã
    - –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
    - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–≥—Ä—ã
    `;

    const result = await this.generateImage(prompt, style, '1024x1024');
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö dimensions
    const resizedBuffer = await sharp(result.data)
      .resize(dimensions.width, dimensions.height, {
        fit: 'contain',
        background: { r: 0, g: 0, b: 0, alpha: 0 }
      })
      .png()
      .toBuffer();

    return {
      ...result,
      data: resizedBuffer,
      metadata: {
        ...result.metadata,
        size: resizedBuffer.length,
        dimensions,
      },
    };
  }

  public async generateBackground(
    description: string,
    style: string = 'cartoon',
    size: '1792x1024' | '1024x1792' = '1792x1024'
  ): Promise<AssetGenerationResult> {
    const prompt = `
    ${description}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ–Ω—É:
    - –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã
    - –°—Ç–∏–ª—å: ${style}
    - –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    - –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    - –ë–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    - –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π –∏ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    `;

    return this.generateImage(prompt, style, size);
  }

  public async generateUIElement(
    elementType: string,
    style: string = 'modern',
    description?: string
  ): Promise<AssetGenerationResult> {
    const prompt = `
    UI —ç–ª–µ–º–µ–Ω—Ç: ${elementType}
    ${description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${description}` : ''}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –°—Ç–∏–ª—å: ${style}
    - –ß–µ—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
    - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    - –Ø—Ä–∫–∏–µ, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
    - –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    - –í–µ–∫—Ç–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
    `;

    return this.generateImage(prompt, style, '1024x1024');
  }

  public async generateSpriteSheet(
    sprites: Array<{ name: string; description: string }>,
    style: string = 'pixel art',
    tileSize: { width: number; height: number } = { width: 64, height: 64 }
  ): Promise<AssetGenerationResult> {
    const descriptions = sprites.map(s => `${s.name}: ${s.description}`).join('\n');
    
    const prompt = `
    –°–ø—Ä–∞–π—Ç-–ª–∏—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:
    ${descriptions}
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –°—Ç–∏–ª—å: ${style}
    - –ö–∞–∂–¥—ã–π —Å–ø—Ä–∞–π—Ç ${tileSize.width}x${tileSize.height} –ø–∏–∫—Å–µ–ª–µ–π
    - –ê–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Å–µ—Ç–∫–∞
    - –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    - –û–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    - –ß–µ—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É —Å–ø—Ä–∞–π—Ç–∞–º–∏
    `;

    return this.generateImage(prompt, style, '1024x1024');
  }

  // –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
  public async generateSound(
    description: string,
    duration: number = 1000,
    type: 'sfx' | 'music' = 'sfx'
  ): Promise<AssetGenerationResult> {
    this.logger.info(`üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–∞: "${description}" (${type}, ${duration}ms)`);
    
    try {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–≤—É–∫–∞
      const soundType = this.analyzeSoundDescription(description, type);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–≤—É–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      let audioBuffer: Buffer;
      
      switch (soundType) {
        case 'jump':
          audioBuffer = this.generateJumpSound(duration);
          break;
        case 'coin':
          audioBuffer = this.generateCoinSound(duration);
          break;
        case 'explosion':
          audioBuffer = this.generateExplosionSound(duration);
          break;
        case 'laser':
          audioBuffer = this.generateLaserSound(duration);
          break;
        case 'powerup':
          audioBuffer = this.generatePowerUpSound(duration);
          break;
        case 'hit':
          audioBuffer = this.generateHitSound(duration);
          break;
        case 'menu':
          audioBuffer = this.generateMenuSound(duration);
          break;
        case 'background':
          audioBuffer = this.generateBackgroundMusic(duration);
          break;
        case 'victory':
          audioBuffer = this.generateVictorySound(duration);
          break;
        case 'defeat':
          audioBuffer = this.generateDefeatSound(duration);
          break;
        default:
          audioBuffer = this.generateGenericSound(duration, soundType);
      }
      
      this.logger.info(`‚úÖ –ó–≤—É–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${audioBuffer.length} bytes`);
      
      return {
        type: 'audio',
        data: audioBuffer,
        metadata: {
          size: audioBuffer.length,
          format: 'wav',
          duration,
          soundType,
          description
        },
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–≤—É–∫–∞', { error, description, type, duration });
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫
      const fallbackBuffer = this.generateGenericSound(duration, 'beep');
      return {
        type: 'audio',
        data: fallbackBuffer,
        metadata: {
          size: fallbackBuffer.length,
          format: 'wav',
          duration,
          soundType: 'fallback'
        },
      };
    }
  }

  private analyzeSoundDescription(description: string, type: 'sfx' | 'music'): string {
    const desc = description.toLowerCase();
    
    // –ó–≤—É–∫–∏ –ø—Ä—ã–∂–∫–∞
    if (desc.includes('jump') || desc.includes('–ø—Ä—ã–∂–æ–∫') || desc.includes('hop')) {
      return 'jump';
    }
    
    // –ó–≤—É–∫–∏ –º–æ–Ω–µ—Ç/–æ—á–∫–æ–≤
    if (desc.includes('coin') || desc.includes('–º–æ–Ω–µ—Ç–∞') || desc.includes('collect') || desc.includes('pickup')) {
      return 'coin';
    }
    
    // –í–∑—Ä—ã–≤—ã
    if (desc.includes('explosion') || desc.includes('–≤–∑—Ä—ã–≤') || desc.includes('boom') || desc.includes('blast')) {
      return 'explosion';
    }
    
    // –õ–∞–∑–µ—Ä—ã/–≤—ã—Å—Ç—Ä–µ–ª—ã
    if (desc.includes('laser') || desc.includes('–ª–∞–∑–µ—Ä') || desc.includes('shoot') || desc.includes('–≤—ã—Å—Ç—Ä–µ–ª')) {
      return 'laser';
    }
    
    // –£—Å–∏–ª–µ–Ω–∏—è
    if (desc.includes('powerup') || desc.includes('power') || desc.includes('—É—Å–∏–ª–µ–Ω–∏–µ') || desc.includes('–±–æ–Ω—É—Å')) {
      return 'powerup';
    }
    
    // –£–¥–∞—Ä—ã
    if (desc.includes('hit') || desc.includes('—É–¥–∞—Ä') || desc.includes('damage') || desc.includes('—É—Ä–æ–Ω')) {
      return 'hit';
    }
    
    // –ú–µ–Ω—é
    if (desc.includes('menu') || desc.includes('–º–µ–Ω—é') || desc.includes('click') || desc.includes('button')) {
      return 'menu';
    }
    
    // –ü–æ–±–µ–¥–∞
    if (desc.includes('victory') || desc.includes('–ø–æ–±–µ–¥–∞') || desc.includes('win') || desc.includes('success')) {
      return 'victory';
    }
    
    // –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
    if (desc.includes('defeat') || desc.includes('–ø–æ—Ä–∞–∂–µ–Ω–∏–µ') || desc.includes('lose') || desc.includes('death')) {
      return 'defeat';
    }
    
    // –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
    if (type === 'music' || desc.includes('background') || desc.includes('—Ñ–æ–Ω') || desc.includes('theme')) {
      return 'background';
    }
    
    return 'generic';
  }

  private generateJumpSound(duration: number): Buffer {
    const sampleRate = 44100;
    const samples = Math.floor((duration / 1000) * sampleRate);
    const buffer = this.createWAVHeader(samples);
    
    // –ó–≤—É–∫ –ø—Ä—ã–∂–∫–∞: –±—ã—Å—Ç—Ä–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã
    for (let i = 0; i < samples; i++) {
      const progress = i / samples;
      const frequency = 200 + progress * 400; // 200Hz -> 600Hz
      const amplitude = Math.exp(-progress * 5) * 0.3; // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
      const sample = Math.sin(2 * Math.PI * frequency * i / sampleRate) * amplitude;
      const intSample = Math.round(sample * 32767);
      buffer.writeInt16LE(intSample, 44 + i * 2);
    }
    
    return buffer;
  }

  private generateCoinSound(duration: number): Buffer {
    const sampleRate = 44100;
    const samples = Math.floor((duration / 1000) * sampleRate);
    const buffer = this.createWAVHeader(samples);
    
    // –ó–≤—É–∫ –º–æ–Ω–µ—Ç—ã: –¥–≤–µ –±—ã—Å—Ç—Ä—ã–µ –Ω–æ—Ç—ã
    for (let i = 0; i < samples; i++) {
      const progress = i / samples;
      const frequency = progress < 0.3 ? 800 : 1200; // –î–≤–µ –Ω–æ—Ç—ã
      const amplitude = Math.exp(-progress * 3) * 0.4;
      const sample = Math.sin(2 * Math.PI * frequency * i / sampleRate) * amplitude;
      const intSample = Math.round(sample * 32767);
      buffer.writeInt16LE(intSample, 44 + i * 2);
    }
    
    return buffer;
  }

  private generateExplosionSound(duration: number): Buffer {
    const sampleRate = 44100;
    const samples = Math.floor((duration / 1000) * sampleRate);
    const buffer = this.createWAVHeader(samples);
    
    // –ó–≤—É–∫ –≤–∑—Ä—ã–≤–∞: –±–µ–ª—ã–π —à—É–º —Å –Ω–∏–∑–∫–∏–º–∏ —á–∞—Å—Ç–æ—Ç–∞–º–∏
    for (let i = 0; i < samples; i++) {
      const progress = i / samples;
      const amplitude = Math.exp(-progress * 2) * 0.6;
      
      // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –Ω–∏–∑–∫—É—é —á–∞—Å—Ç–æ—Ç—É –∏ —à—É–º
      const lowFreq = Math.sin(2 * Math.PI * 60 * i / sampleRate) * 0.7;
      const noise = (Math.random() - 0.5) * 0.5;
      const sample = (lowFreq + noise) * amplitude;
      
      const intSample = Math.round(sample * 32767);
      buffer.writeInt16LE(intSample, 44 + i * 2);
    }
    
    return buffer;
  }

  private generateLaserSound(duration: number): Buffer {
    const sampleRate = 44100;
    const samples = Math.floor((duration / 1000) * sampleRate);
    const buffer = this.createWAVHeader(samples);
    
    // –ó–≤—É–∫ –ª–∞–∑–µ—Ä–∞: –≤—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å –º–æ–¥—É–ª—è—Ü–∏–µ–π
    for (let i = 0; i < samples; i++) {
      const progress = i / samples;
      const baseFreq = 1500;
      const modulation = Math.sin(2 * Math.PI * 20 * i / sampleRate) * 200;
      const frequency = baseFreq + modulation;
      const amplitude = Math.exp(-progress * 4) * 0.4;
      const sample = Math.sin(2 * Math.PI * frequency * i / sampleRate) * amplitude;
      const intSample = Math.round(sample * 32767);
      buffer.writeInt16LE(intSample, 44 + i * 2);
    }
    
    return buffer;
  }

  private generatePowerUpSound(duration: number): Buffer {
    const sampleRate = 44100;
    const samples = Math.floor((duration / 1000) * sampleRate);
    const buffer = this.createWAVHeader(samples);
    
    // –ó–≤—É–∫ —É—Å–∏–ª–µ–Ω–∏—è: –≤–æ—Å—Ö–æ–¥—è—â–∏–µ –∞–∫–∫–æ—Ä–¥—ã
    const frequencies = [261, 329, 392, 523]; // C, E, G, C (–¥–æ –º–∞–∂–æ—Ä)
    
    for (let i = 0; i < samples; i++) {
      const progress = i / samples;
      let sample = 0;
      
      // –ò–≥—Ä–∞–µ–º –∞–∫–∫–æ—Ä–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ—Ç—ã
      frequencies.forEach((freq, index) => {
        const noteStart = index * 0.2;
        if (progress >= noteStart) {
          const noteProgress = (progress - noteStart) / (1 - noteStart);
          const amplitude = Math.exp(-noteProgress * 2) * 0.15;
          sample += Math.sin(2 * Math.PI * freq * i / sampleRate) * amplitude;
        }
      });
      
      const intSample = Math.round(sample * 32767);
      buffer.writeInt16LE(intSample, 44 + i * 2);
    }
    
    return buffer;
  }

  private generateHitSound(duration: number): Buffer {
    const sampleRate = 44100;
    const samples = Math.floor((duration / 1000) * sampleRate);
    const buffer = this.createWAVHeader(samples);
    
    // –ó–≤—É–∫ —É–¥–∞—Ä–∞: —Ä–µ–∑–∫–∏–π –Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π –∏–º–ø—É–ª—å—Å
    for (let i = 0; i < samples; i++) {
      const progress = i / samples;
      const amplitude = Math.exp(-progress * 8) * 0.7;
      
      // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –Ω–∏–∑–∫—É—é —á–∞—Å—Ç–æ—Ç—É –∏ –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º
      const lowFreq = Math.sin(2 * Math.PI * 120 * i / sampleRate);
      const click = i < samples * 0.1 ? (Math.random() - 0.5) * 0.3 : 0;
      const sample = (lowFreq + click) * amplitude;
      
      const intSample = Math.round(sample * 32767);
      buffer.writeInt16LE(intSample, 44 + i * 2);
    }
    
    return buffer;
  }

  private generateMenuSound(duration: number): Buffer {
    const sampleRate = 44100;
    const samples = Math.floor((duration / 1000) * sampleRate);
    const buffer = this.createWAVHeader(samples);
    
    // –ó–≤—É–∫ –º–µ–Ω—é: –∫–æ—Ä–æ—Ç–∫–∏–π —á–∏—Å—Ç—ã–π —Ç–æ–Ω
    for (let i = 0; i < samples; i++) {
      const progress = i / samples;
      const frequency = 800;
      const amplitude = progress < 0.1 ? progress * 10 * 0.3 : 
                      progress > 0.8 ? (1 - progress) * 5 * 0.3 : 0.3;
      const sample = Math.sin(2 * Math.PI * frequency * i / sampleRate) * amplitude;
      const intSample = Math.round(sample * 32767);
      buffer.writeInt16LE(intSample, 44 + i * 2);
    }
    
    return buffer;
  }

  private generateBackgroundMusic(duration: number): Buffer {
    const sampleRate = 44100;
    const samples = Math.floor((duration / 1000) * sampleRate);
    const buffer = this.createWAVHeader(samples);
    
    // –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞: –ø—Ä–æ—Å—Ç–∞—è –º–µ–ª–æ–¥–∏—è
    const melody = [261, 294, 329, 349, 392, 440, 493, 523]; // C major scale
    
    for (let i = 0; i < samples; i++) {
      const progress = i / samples;
      const noteIndex = Math.floor(progress * melody.length);
      const frequency = melody[noteIndex] || melody[0];
      
      // –ú—è–≥–∫–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞ –¥–ª—è —Ñ–æ–Ω–∞
      const amplitude = 0.1 * (1 + Math.sin(2 * Math.PI * 0.5 * i / sampleRate) * 0.1);
      const sample = Math.sin(2 * Math.PI * frequency * i / sampleRate) * amplitude;
      const intSample = Math.round(sample * 32767);
      buffer.writeInt16LE(intSample, 44 + i * 2);
    }
    
    return buffer;
  }

  private generateVictorySound(duration: number): Buffer {
    const sampleRate = 44100;
    const samples = Math.floor((duration / 1000) * sampleRate);
    const buffer = this.createWAVHeader(samples);
    
    // –ó–≤—É–∫ –ø–æ–±–µ–¥—ã: —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const victoryMelody = [523, 659, 784, 1047]; // C, E, G, C (octave)
    
    for (let i = 0; i < samples; i++) {
      const progress = i / samples;
      let sample = 0;
      
      victoryMelody.forEach((freq, index) => {
        const noteStart = index * 0.25;
        const noteEnd = (index + 1) * 0.25;
        
        if (progress >= noteStart && progress < noteEnd) {
          const noteProgress = (progress - noteStart) / 0.25;
          const amplitude = Math.sin(Math.PI * noteProgress) * 0.2;
          sample += Math.sin(2 * Math.PI * freq * i / sampleRate) * amplitude;
        }
      });
      
      const intSample = Math.round(sample * 32767);
      buffer.writeInt16LE(intSample, 44 + i * 2);
    }
    
    return buffer;
  }

  private generateDefeatSound(duration: number): Buffer {
    const sampleRate = 44100;
    const samples = Math.floor((duration / 1000) * sampleRate);
    const buffer = this.createWAVHeader(samples);
    
    // –ó–≤—É–∫ –ø–æ—Ä–∞–∂–µ–Ω–∏—è: –Ω–∏—Å—Ö–æ–¥—è—â–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    for (let i = 0; i < samples; i++) {
      const progress = i / samples;
      const frequency = 400 - progress * 200; // 400Hz -> 200Hz
      const amplitude = 0.3;
      const sample = Math.sin(2 * Math.PI * frequency * i / sampleRate) * amplitude;
      const intSample = Math.round(sample * 32767);
      buffer.writeInt16LE(intSample, 44 + i * 2);
    }
    
    return buffer;
  }

  private generateGenericSound(duration: number, type: string): Buffer {
    const sampleRate = 44100;
    const samples = Math.floor((duration / 1000) * sampleRate);
    const buffer = this.createWAVHeader(samples);
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–≤—É–∫: –ø—Ä–æ—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª
    const frequency = 440; // –õ—è –ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã
    
    for (let i = 0; i < samples; i++) {
      const progress = i / samples;
      const amplitude = Math.sin(Math.PI * progress) * 0.3; // –ü–ª–∞–≤–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –∏ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
      const sample = Math.sin(2 * Math.PI * frequency * i / sampleRate) * amplitude;
      const intSample = Math.round(sample * 32767);
      buffer.writeInt16LE(intSample, 44 + i * 2);
    }
    
    return buffer;
  }

  private createWAVHeader(samples: number): Buffer {
    const buffer = Buffer.alloc(44 + samples * 2);
    const sampleRate = 44100;
    
    // WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
    buffer.write('RIFF', 0);
    buffer.writeUInt32LE(36 + samples * 2, 4);
    buffer.write('WAVE', 8);
    buffer.write('fmt ', 12);
    buffer.writeUInt32LE(16, 16);
    buffer.writeUInt16LE(1, 20); // PCM format
    buffer.writeUInt16LE(1, 22); // Mono
    buffer.writeUInt32LE(sampleRate, 24);
    buffer.writeUInt32LE(sampleRate * 2, 28);
    buffer.writeUInt16LE(2, 32);
    buffer.writeUInt16LE(16, 34); // 16-bit
    buffer.write('data', 36);
    buffer.writeUInt32LE(samples * 2, 40);
    
    return buffer;
  }

  private generateDummyAudio(duration: number): Buffer {
    // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–≤—É–∫–∞ –≤–º–µ—Å—Ç–æ —Ç–∏—à–∏–Ω—ã
    return this.generateGenericSound(duration, 'beep');
  }

  private enhanceImagePrompt(prompt: string, style: string): string {
    const styleEnhancements = {
      'pixel art': 'pixel art style, 8-bit, retro gaming, sharp pixels, limited color palette',
      'cartoon': 'cartoon style, bright colors, smooth lines, playful, family-friendly',
      'realistic': 'realistic style, detailed, high quality, professional',
      'minimalist': 'minimalist style, clean lines, simple shapes, modern',
      'fantasy': 'fantasy style, magical, mystical, vibrant colors, detailed',
    };

    const enhancement = styleEnhancements[style as keyof typeof styleEnhancements] || style;
    
    return `${prompt}. ${enhancement}. High quality, game asset, transparent background where appropriate.`;
  }

  private async optimizeImage(imageBuffer: Buffer): Promise<Buffer> {
    try {
      return await sharp(imageBuffer)
        .png({
          quality: Math.round(config.optimization.imageCompression * 100),
          compressionLevel: 9,
        })
        .toBuffer();
    } catch (error) {
      this.logger.warn('–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return imageBuffer;
    }
  }

  private parseDimensions(size: string): { width: number; height: number } {
    const [width, height] = size.split('x').map(Number);
    return { width, height };
  }

  private checkRateLimit(): void {
    const now = Date.now();
    const hourInMs = 60 * 60 * 1000;
    
    if (now - this.lastResetTime > hourInMs) {
      this.requestCount = 0;
      this.lastResetTime = now;
    }
    
    // –õ–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π OpenAI (–ø—Ä–∏–º–µ—Ä–Ω–æ 50 –≤ —á–∞—Å –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞)
    if (this.requestCount > 50) {
      throw new QuotaExceededError('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ OpenAI API', 'openai');
    }
    
    this.requestCount++;
  }

  public getUsageStats(): { requests: number, resetTime: Date } {
    return {
      requests: this.requestCount,
      resetTime: new Date(this.lastResetTime + 60 * 60 * 1000)
    };
  }
} 
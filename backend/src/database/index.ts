// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ SQLite3
// TODO: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ PostgreSQL –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å SQLite3

import { LoggerService } from '@/services/logger';
import { GameEntity, GenerationStatus } from '@/types';

const logger = new LoggerService();

// –ü—Ä–æ—Å—Ç–æ–µ in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockGames: GameEntity[] = [];
let gameIdCounter = 1;

export async function setupDatabase(): Promise<any> {
  try {
    logger.info('üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ (in-memory)');
    logger.warn('‚ö†Ô∏è SQLite3 –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mock storage');
    
    return {
      status: 'connected',
      type: 'mock',
      games: mockGames
    };
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

export async function createGame(gameData: Partial<GameEntity>): Promise<GameEntity> {
  const game: GameEntity = {
    id: (gameIdCounter++).toString(),
    title: gameData.title || 'Untitled Game',
    description: gameData.description || '',
    genre: gameData.genre || 'arcade',
    status: gameData.status || GenerationStatus.PENDING,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    config: gameData.config || {},
    progress: 0,
    ...gameData
  };
  
  mockGames.push(game);
  logger.info(`‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ (mock): ${game.id} - ${game.title}`);
  
  return game;
}

export async function getGameById(id: string): Promise<GameEntity | null> {
  const game = mockGames.find(g => g.id === id);
  if (game) {
    logger.info(`üìÑ –ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞ (mock): ${id}`);
  } else {
    logger.warn(`‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (mock): ${id}`);
  }
  return game || null;
}

export async function getAllGames(): Promise<GameEntity[]> {
  logger.info(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä (mock): ${mockGames.length} –∏–≥—Ä`);
  return [...mockGames];
}

export async function updateGame(id: string, updates: Partial<GameEntity>): Promise<GameEntity | null> {
  const gameIndex = mockGames.findIndex(g => g.id === id);
  if (gameIndex === -1) {
    logger.warn(`‚ùå –ò–≥—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (mock): ${id}`);
    return null;
  }
  
  mockGames[gameIndex] = {
    ...mockGames[gameIndex],
    ...updates,
    updatedAt: new Date().toISOString()
  };
  
  logger.info(`‚úÖ –ò–≥—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (mock): ${id}`);
  return mockGames[gameIndex];
}

export async function deleteGame(id: string): Promise<boolean> {
  const gameIndex = mockGames.findIndex(g => g.id === id);
  if (gameIndex === -1) {
    logger.warn(`‚ùå –ò–≥—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (mock): ${id}`);
    return false;
  }
  
  mockGames.splice(gameIndex, 1);
  logger.info(`üóëÔ∏è –ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ (mock): ${id}`);
  return true;
}

export async function getGamesByStatus(status: GenerationStatus): Promise<GameEntity[]> {
  const games = mockGames.filter(g => g.status === status);
  logger.info(`üîç –ò–≥—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É ${status} (mock): ${games.length} –∏–≥—Ä`);
  return games;
}

export async function updateGameProgress(id: string, progress: number): Promise<boolean> {
  const game = mockGames.find(g => g.id === id);
  if (!game) {
    logger.warn(`‚ùå –ò–≥—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (mock): ${id}`);
    return false;
  }
  
  game.progress = progress;
  game.updatedAt = new Date().toISOString();
  
  logger.info(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω (mock): ${id} -> ${progress}%`);
  return true;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
export * from '@/types';

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è GameDAO –∫–ª–∞—Å—Å–∞
export class GameDAO {
  async createGame(gameData: Omit<GameEntity, 'createdAt' | 'updatedAt'>): Promise<GameEntity> {
    return await createGame(gameData);
  }

  async getGameById(id: string): Promise<GameEntity> {
    const game = await getGameById(id);
    if (!game) {
      throw new Error(`–ò–≥—Ä–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    return game;
  }

  async updateGame(id: string, updates: Partial<GameEntity>): Promise<GameEntity> {
    const game = await updateGame(id, updates);
    if (!game) {
      throw new Error(`–ò–≥—Ä–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    return game;
  }

  async getGames(
    limit: number = 50,
    offset: number = 0,
    status?: GenerationStatus
  ): Promise<{ games: GameEntity[]; total: number }> {
    let games = await getAllGames();
    
    if (status) {
      games = games.filter(g => g.status === status);
    }

    const total = games.length;
    const paginatedGames = games.slice(offset, offset + limit);

    return { games: paginatedGames, total };
  }

  async deleteGame(id: string): Promise<void> {
    const success = await deleteGame(id);
    if (!success) {
      throw new Error(`–ò–≥—Ä–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
  }

  async addLog(gameId: string, level: string, message: string, step?: string, metadata?: any): Promise<void> {
    logger.info(`üìù –õ–æ–≥ –∏–≥—Ä—ã ${gameId} [${level}]: ${message}`, { step, metadata });
  }

  async getGameLogs(gameId: string): Promise<any[]> {
    logger.info(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–≥—Ä—ã (mock): ${gameId}`);
    return [
      {
        id: 1,
        game_id: gameId,
        level: 'info',
        message: '–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ (mock)',
        step: 'initialization',
        metadata: null,
        created_at: new Date()
      }
    ];
  }
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è StatisticsDAO
export class StatisticsDAO {
  async updateDailyStats(): Promise<void> {
    logger.info('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (mock)');
  }

  async getStatistics(days: number = 30): Promise<any[]> {
    logger.info(`üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ ${days} –¥–Ω–µ–π (mock)`);
    return [
      {
        date: new Date().toISOString().split('T')[0],
        total_games: mockGames.length,
        successful_games: mockGames.filter(g => g.status === GenerationStatus.COMPLETED).length,
        failed_games: mockGames.filter(g => g.status === GenerationStatus.FAILED).length,
        total_size: 0
      }
    ];
  }

  async getOverallStats(): Promise<any> {
    logger.info('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (mock)');
    return {
      total_games: mockGames.length,
      successful_games: mockGames.filter(g => g.status === GenerationStatus.COMPLETED).length,
      failed_games: mockGames.filter(g => g.status === GenerationStatus.FAILED).length,
      processing_games: mockGames.filter(g => g.status === GenerationStatus.PROCESSING).length,
      queued_games: mockGames.filter(g => g.status === GenerationStatus.PENDING).length,
      avg_size: 0,
      total_size: 0
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
export async function closeDatabase(): Promise<void> {
  logger.info('üîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞ (mock)');
} 
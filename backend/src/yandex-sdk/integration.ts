import { GameDesign } from '@/types';

export interface YandexSDKConfig {
  leaderboards?: boolean;
  payments?: boolean;
  advertising?: {
    rewarded?: boolean;
    interstitial?: boolean;
    banner?: boolean;
    sticky?: boolean;
  };
  shortcut?: boolean;
  rateApp?: boolean;
  social?: boolean;
  localization?: boolean;
  analytics?: boolean;
  achievements?: boolean;
}

export interface LocalizationConfig {
  supportedLanguages: string[];
  fallbackLanguage: string;
  translations: { [lang: string]: { [key: string]: string } };
}

export interface AnalyticsConfig {
  metrikaId?: string;
  trackingEvents: string[];
  customEvents: { [key: string]: any };
}

export interface AchievementConfig {
  id: string;
  name: string;
  description: string;
  icon: string;
  points: number;
  condition?: (gameState: any) => boolean;
  progress?: {
    current: number;
    target: number;
  };
  hidden?: boolean;
}

export class YandexSDKIntegrator {
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Yandex Games SDK
   */
  public static generateSDKIntegration(config: YandexSDKConfig): string {
    return `
// Yandex Games SDK Advanced Integration
class YandexGamesSDK {
    constructor() {
        this.ysdk = null;
        this.player = null;
        this.leaderboards = null;
        this.payments = null;
        this.initialized = false;
        this.features = ${JSON.stringify(config, null, 8)};
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.gameState = {
            isPaused: false,
            isFullscreen: false,
            quality: 'high',
            volume: 1.0
        };
        
        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        this.analytics = {
            sessionStart: Date.now(),
            events: [],
            metrics: {}
        };
        
        // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
        this.localization = new LocalizationSystem();
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.achievements = new AchievementSystem();
        
        // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        this.deviceInfo = null;
        
        // –†–µ–∫–ª–∞–º–∞
        this.adState = {
            bannerVisible: false,
            lastInterstitial: 0,
            interstitialCooldown: 180000, // 3 –º–∏–Ω—É—Ç—ã
            rewardedCooldown: 30000 // 30 —Å–µ–∫—É–Ω–¥
        };
    }

    /**
     * –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
     */
    async init() {
        try {
            console.log('üéÆ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π Yandex Games SDK –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SDK
            if (typeof YaGames === 'undefined') {
                console.warn('‚ö†Ô∏è Yandex Games SDK –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫ fallback —Ä–µ–∂–∏–º–∞');
                this.initializeFallback();
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SDK —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            this.ysdk = await YaGames.init({
                orientation: {
                    value: 'landscape',
                    lock: true
                },
                adv: {
                    onAdvClose: () => this.handleAdClose(),
                    onAdvError: (error) => this.handleAdError(error)
                }
            });

            console.log('‚úÖ Yandex Games SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            this.deviceInfo = this.ysdk.deviceInfo;
            console.log('üì± –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', this.deviceInfo.type);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await this.initializePlayer();
            await this.initializeEnvironment();
            
            ${config.leaderboards ? 'await this.initializeLeaderboards();' : ''}
            ${config.payments ? 'await this.initializePayments();' : ''}
            ${config.localization ? 'await this.initializeLocalization();' : ''}
            ${config.analytics ? 'await this.initializeAnalytics();' : ''}
            ${config.achievements ? 'await this.initializeAchievements();' : ''}
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
            this.setupResponsiveDesign();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            this.setupPerformanceOptimization();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º sticky –±–∞–Ω–Ω–µ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
            ${config.advertising?.sticky ? 'this.showStickyBanner();' : ''}

            this.initialized = true;
            console.log('üöÄ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã Yandex Games –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ');
            
            // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            this.gameReady();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Yandex Games SDK:', error);
            this.initializeFallback();
        }
    }

    /**
     * Fallback —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     */
    initializeFallback() {
        console.log('üîß –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏');
        this.initialized = true;
        this.deviceInfo = {
            type: 'desktop',
            isMobile: () => false,
            isDesktop: () => true,
            isTablet: () => false,
            isTV: () => false
        };
        this.player = {
            getName: () => '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            getPhoto: () => '',
            getUniqueID: () => 'dev_player_id',
            getMode: () => 'lite',
            getData: () => Promise.resolve({}),
            setData: () => Promise.resolve(),
            getStats: () => Promise.resolve({}),
            setStats: () => Promise.resolve(),
            incrementStats: () => Promise.resolve()
        };
        
        // –≠–º—É–ª—è—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
        this.environment = {
            i18n: { lang: 'ru', tld: 'ru' },
            app: { id: 'dev_app' },
            payload: ''
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
     */
    async initializePlayer() {
        try {
            this.player = await this.ysdk.getPlayer({
                scopes: false
            });
            console.log('üë§ –ò–≥—Ä–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', this.player.getName());
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
     */
    async initializeEnvironment() {
        try {
            this.environment = this.ysdk.environment;
            console.log('üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ:', {
                —è–∑—ã–∫: this.environment.i18n.lang,
                –¥–æ–º–µ–Ω: this.environment.i18n.tld,
                –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: this.environment.app.id
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è:', error);
        }
    }

    ${this.generateLocalizationMethods()}
    ${this.generateLeaderboardMethods()}
    ${this.generatePaymentMethods()}
    ${this.generateAdvertisingMethods()}
    ${this.generateAchievementMethods()}
    ${this.generateAnalyticsMethods()}
    ${this.generatePerformanceMethods()}
    ${this.generateResponsiveMethods()}
    ${this.generateSocialMethods()}

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ SDK
     */
    isReady() {
        return this.initialized;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ
     */
    getPlayerInfo() {
        if (!this.player) return null;
        
        return {
            name: this.player.getName(),
            photo: this.player.getPhoto('medium'),
            id: this.player.getUniqueID(),
            isAuthorized: this.player.getMode() !== 'lite'
        };
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
     */
    async savePlayerData(data, immediate = true) {
        if (!this.player) return false;
        
        try {
            await this.player.setData(data, immediate);
            console.log('üíæ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            this.trackEvent('player_data_saved', { size: JSON.stringify(data).length });
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
     */
    async loadPlayerData(keys) {
        if (!this.player) return {};
        
        try {
            const data = await this.player.getData(keys);
            console.log('üìÇ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            this.trackEvent('player_data_loaded');
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            return {};
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã –∏–≥—Ä—ã
     */
    setupGamePauseHandling() {
        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ –≤–∫–ª–∞–¥–∫–∏
            document.addEventListener('visibilitychange', () => {
                if (document.hidden) {
                    this.pauseGame();
                } else {
                    this.resumeGame();
                }
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
            window.addEventListener('blur', () => this.pauseGame());
            window.addEventListener('focus', () => this.resumeGame());

        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—É–∑—ã:', error);
        }
    }

    /**
     * –ü–∞—É–∑–∞ –∏–≥—Ä—ã
     */
    pauseGame() {
        this.gameState.isPaused = true;
        this.trackEvent('game_paused');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä—É –æ –ø–∞—É–∑–µ
        if (window.gameInstance && window.gameInstance.pause) {
            window.gameInstance.pause();
        }
        
        console.log('‚è∏Ô∏è –ò–≥—Ä–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É');
    }

    /**
     * –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
     */
    resumeGame() {
        this.gameState.isPaused = false;
        this.trackEvent('game_resumed');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä—É –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if (window.gameInstance && window.gameInstance.resume) {
            window.gameInstance.resume();
        }
        
        console.log('‚ñ∂Ô∏è –ò–≥—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }

    /**
     * –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫–∞–∑—É –∏–≥—Ä—ã
     */
    gameReady() {
        try {
            if (this.ysdk && this.ysdk.features.LoadingAPI) {
                this.ysdk.features.LoadingAPI.ready();
                console.log('üéÆ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–∫–∞–∑—É');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ–∫–ª–∞–º—ã
     */
    handleAdClose() {
        this.resumeGame();
        console.log('üì∫ –†–µ–∫–ª–∞–º–∞ –∑–∞–∫—Ä—ã—Ç–∞, –∏–≥—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–µ–∫–ª–∞–º—ã
     */
    handleAdError(error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∫–ª–∞–º—ã:', error);
        this.resumeGame();
        this.trackEvent('ad_error', { error: error.toString() });
    }
}

${this.generateLocalizationSystem()}
${this.generateAchievementSystem()}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SDK
window.yandexGamesSDK = new YandexGamesSDK();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    await window.yandexGamesSDK.init();
});
`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  private static generateLocalizationMethods(): string {
    return `
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async initializeLocalization() {
        try {
            await this.localization.init(this.ysdk);
            console.log('üåê –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —è–∑—ã–∫–∞:', this.localization.currentLanguage);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
     */
    getText(key, params = {}) {
        return this.localization.get(key, params);
    }

    /**
     * –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
     */
    getPlural(key, count) {
        return this.localization.plural(key, count);
    }

    /**
     * –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
     */
    async changeLanguage(lang) {
        await this.localization.changeLanguage(lang);
        this.trackEvent('language_changed', { language: lang });
    }`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤
   */
  private static generateLeaderboardMethods(): string {
    return `
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤
     */
    async initializeLeaderboards() {
        try {
            this.leaderboards = await this.ysdk.getLeaderboards();
            console.log('üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤:', error);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    async submitScore(leaderboardName, score, metadata = {}) {
        if (!this.leaderboards) {
            console.warn('‚ö†Ô∏è –õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            return false;
        }

        try {
            const extraData = {
                timestamp: Date.now(),
                gameVersion: window.gameInstance?.version || '1.0.0',
                ...metadata
            };

            await this.leaderboards.setLeaderboardScore(
                leaderboardName, 
                score,
                JSON.stringify(extraData)
            );

            console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', { leaderboardName, score });
            this.trackEvent('score_submitted', { leaderboardName, score });
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    async getLeaderboard(name, options = {}) {
        if (!this.leaderboards) return null;

        try {
            const result = await this.leaderboards.getLeaderboardEntries(name, {
                quantityTop: options.top || 10,
                includeUser: options.includeUser !== false,
                quantityAround: options.around || 5
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            result.entries = result.entries.map(entry => ({
                ...entry,
                metadata: entry.extraData ? JSON.parse(entry.extraData) : {}
            }));

            this.trackEvent('leaderboard_viewed', { leaderboard: name });
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     */
    async getPlayerRank(leaderboardName) {
        if (!this.leaderboards) return null;

        try {
            const entry = await this.leaderboards.getLeaderboardPlayerEntry(leaderboardName);
            return entry ? entry.rank : null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–Ω–≥–∞:', error);
            return null;
        }
    }`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã –ø–ª–∞—Ç–µ–∂–µ–π
   */
  private static generatePaymentMethods(): string {
    return `
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
     */
    async initializePayments() {
        try {
            this.payments = await this.ysdk.getPayments({ signed: true });
            console.log('üí≥ –ü–ª–∞—Ç–µ–∂–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
     */
    async getCatalog() {
        if (!this.payments) return [];

        try {
            const catalog = await this.payments.getCatalog();
            console.log('üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω:', catalog.length, '—Ç–æ–≤–∞—Ä–æ–≤');
            this.trackEvent('catalog_loaded', { itemCount: catalog.length });
            return catalog;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
            return [];
        }
    }

    /**
     * –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
     */
    async purchaseItem(productId, developerPayload = {}) {
        if (!this.payments) {
            console.warn('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            return false;
        }

        try {
            this.trackEvent('purchase_initiated', { productId });

            const purchase = await this.payments.purchase({
                id: productId,
                developerPayload: JSON.stringify({
                    timestamp: Date.now(),
                    userId: this.player?.getUniqueID(),
                    ...developerPayload
                })
            });

            console.log('üí∞ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞:', purchase);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –∏–≥—Ä–µ
            if (window.gameInstance && window.gameInstance.processPurchase) {
                window.gameInstance.processPurchase(purchase);
            }

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
            await this.payments.consumePurchase(purchase.purchaseToken);
            
            this.trackEvent('purchase_completed', { 
                productId, 
                purchaseToken: purchase.purchaseToken 
            });
            
            return purchase;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', error);
            this.trackEvent('purchase_failed', { productId, error: error.toString() });
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫
     */
    async getPurchases() {
        if (!this.payments) return [];

        try {
            const purchases = await this.payments.getPurchases();
            console.log('üßæ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏:', purchases.length);
            return purchases;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫:', error);
            return [];
        }
    }`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã —Ä–µ–∫–ª–∞–º—ã
   */
  private static generateAdvertisingMethods(): string {
    return `
    /**
     * –ü–æ–∫–∞–∑ sticky-–±–∞–Ω–Ω–µ—Ä–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)
     */
    showStickyBanner() {
        if (!this.ysdk) return false;

        try {
            this.ysdk.adv.showBannerAdv();
            this.adState.bannerVisible = true;
            console.log('üì∞ Sticky-–±–∞–Ω–Ω–µ—Ä –ø–æ–∫–∞–∑–∞–Ω');
            this.trackEvent('banner_shown', { type: 'sticky' });
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∞–Ω–Ω–µ—Ä–∞:', error);
            return false;
        }
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ sticky-–±–∞–Ω–Ω–µ—Ä–∞
     */
    hideStickyBanner() {
        if (!this.ysdk) return false;

        try {
            this.ysdk.adv.hideBannerAdv();
            this.adState.bannerVisible = false;
            console.log('üì∞ Sticky-–±–∞–Ω–Ω–µ—Ä —Å–∫—Ä—ã—Ç');
            this.trackEvent('banner_hidden', { type: 'sticky' });
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –±–∞–Ω–Ω–µ—Ä–∞:', error);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –º–µ–∂—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã
     */
    canShowInterstitial() {
        const now = Date.now();
        const timeSinceLastAd = now - this.adState.lastInterstitial;
        return timeSinceLastAd >= this.adState.interstitialCooldown;
    }

    /**
     * –ü–æ–∫–∞–∑ –º–µ–∂—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã
     */
    async showInterstitialAd(placement = 'game_pause') {
        if (!this.ysdk) return false;

        if (!this.canShowInterstitial()) {
            console.log('‚è∞ –ú–µ–∂—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –≤ –∫—É–ª–¥–∞—É–Ω–µ');
            return false;
        }

        try {
            this.pauseGame();
            this.trackEvent('interstitial_requested', { placement });

            await this.ysdk.adv.showFullscreenAdv({
                callbacks: {
                    onOpen: () => {
                        console.log('üì∫ –ú–µ–∂—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞');
                        this.trackEvent('interstitial_opened', { placement });
                    },
                    onClose: (wasShown) => {
                        console.log('üì∫ –ú–µ–∂—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –∑–∞–∫—Ä—ã—Ç–∞, –ø–æ–∫–∞–∑–∞–Ω–∞:', wasShown);
                        this.adState.lastInterstitial = Date.now();
                        this.resumeGame();
                        this.trackEvent('interstitial_closed', { placement, wasShown });
                    },
                    onError: (error) => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –º–µ–∂—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã:', error);
                        this.resumeGame();
                        this.trackEvent('interstitial_error', { placement, error: error.toString() });
                    }
                }
            });

            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–∂—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã:', error);
            this.resumeGame();
            return false;
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º
     */
    async showRewardedVideo(placement = 'extra_life', rewardCallback = null) {
        if (!this.ysdk) return false;

        try {
            this.pauseGame();
            this.trackEvent('rewarded_requested', { placement });

            await this.ysdk.adv.showRewardedVideo({
                callbacks: {
                    onOpen: () => {
                        console.log('üéÅ –†–µ–∫–ª–∞–º–∞ —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç–∞');
                        this.trackEvent('rewarded_opened', { placement });
                    },
                    onRewarded: () => {
                        console.log('üéÅ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞');
                        this.trackEvent('rewarded_completed', { placement });
                        
                        if (rewardCallback) {
                            rewardCallback();
                        } else if (window.gameInstance && window.gameInstance.addReward) {
                            window.gameInstance.addReward();
                        }
                    },
                    onClose: () => {
                        console.log('üéÅ –†–µ–∫–ª–∞–º–∞ —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫—Ä—ã—Ç–∞');
                        this.resumeGame();
                        this.trackEvent('rewarded_closed', { placement });
                    },
                    onError: (error) => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∫–ª–∞–º—ã —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º:', error);
                        this.resumeGame();
                        this.trackEvent('rewarded_error', { placement, error: error.toString() });
                    }
                }
            });

            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º:', error);
            this.resumeGame();
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–ª–∞–º—ã
     */
    async getAdStatus() {
        if (!this.ysdk) return { available: false };

        try {
            const status = await this.ysdk.adv.getAdvStatus();
            return status;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–ª–∞–º—ã:', error);
            return { available: false };
        }
    }`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  private static generateAchievementMethods(): string {
    return `
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    async initializeAchievements() {
        try {
            await this.achievements.init(this.player);
            console.log('üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    async unlockAchievement(achievementId) {
        return await this.achievements.unlock(achievementId);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    async updateAchievementProgress(achievementId, value) {
        return await this.achievements.updateProgress(achievementId, value);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    getAchievements() {
        return this.achievements.getAll();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    getUnlockedAchievements() {
        return this.achievements.getUnlocked();
    }`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  private static generateAnalyticsMethods(): string {
    return `
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    async initializeAnalytics() {
        try {
            console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            this.trackEvent('game_started', {
                language: this.environment?.i18n?.lang,
                platform: this.deviceInfo?.type,
                timestamp: Date.now()
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        }
    }

    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
     */
    trackEvent(eventName, parameters = {}) {
        try {
            const event = {
                name: eventName,
                timestamp: Date.now(),
                sessionTime: Date.now() - this.analytics.sessionStart,
                ...parameters
            };

            this.analytics.events.push(event);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if (window.ym && this.analytics.metrikaId) {
                window.ym(this.analytics.metrikaId, 'reachGoal', eventName, parameters);
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Yandex Games –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∞
            if (this.ysdk && this.ysdk.metrica) {
                this.ysdk.metrica.hit(eventName, parameters);
            }

            console.log(\`üìä –°–æ–±—ã—Ç–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: \${eventName}\`, parameters);
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        }
    }

    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
     */
    trackGameEvent(eventType, data = {}) {
        const gameEvents = {
            level_start: (data) => this.trackEvent('level_start', { level: data.level }),
            level_complete: (data) => this.trackEvent('level_complete', { 
                level: data.level, 
                score: data.score, 
                time: data.time 
            }),
            game_over: (data) => this.trackEvent('game_over', { 
                score: data.score, 
                level: data.level, 
                reason: data.reason 
            }),
            purchase: (data) => this.trackEvent('purchase', { 
                product_id: data.productId, 
                price: data.price 
            }),
            tutorial_step: (data) => this.trackEvent('tutorial_step', { 
                step: data.step, 
                completed: data.completed 
            })
        };

        if (gameEvents[eventType]) {
            gameEvents[eventType](data);
        } else {
            this.trackEvent(eventType, data);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–µ—Å—Å–∏–∏
     */
    getSessionMetrics() {
        return {
            duration: Date.now() - this.analytics.sessionStart,
            events: this.analytics.events.length,
            achievements: this.achievements.getUnlocked().length,
            lastEvent: this.analytics.events[this.analytics.events.length - 1]
        };
    }`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
   */
  private static generatePerformanceMethods(): string {
    return `
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    setupPerformanceOptimization() {
        try {
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            this.gameState.quality = this.detectOptimalQuality();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FPS
            this.setupFPSMonitoring();
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
            this.setupMemoryManagement();
            
            console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:', this.gameState.quality);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
     */
    detectOptimalQuality() {
        if (!this.deviceInfo) return 'medium';

        // –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        if (this.deviceInfo.isMobile()) {
            return 'low';
        }

        // –ü–ª–∞–Ω—à–µ—Ç—ã - —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        if (this.deviceInfo.isTablet()) {
            return 'medium';
        }

        // –¢–í - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        if (this.deviceInfo.isTV()) {
            return 'high';
        }

        // –î–µ—Å–∫—Ç–æ–ø - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        const canvas = document.createElement('canvas');
        const gl = canvas.getContext('webgl');
        
        if (!gl) return 'low';
        
        const renderer = gl.getParameter(gl.RENDERER);
        const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
        
        if (maxTextureSize >= 4096 && !renderer.includes('Mali')) {
            return 'high';
        } else if (maxTextureSize >= 2048) {
            return 'medium';
        }
        
        return 'low';
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FPS
     */
    setupFPSMonitoring() {
        let lastTime = performance.now();
        let frameCount = 0;
        let fps = 60;

        const measureFPS = (currentTime) => {
            frameCount++;
            
            if (currentTime - lastTime >= 1000) {
                fps = frameCount;
                frameCount = 0;
                lastTime = currentTime;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                this.adjustQualityBasedOnPerformance(fps);
            }
            
            requestAnimationFrame(measureFPS);
        };

        requestAnimationFrame(measureFPS);
    }

    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    adjustQualityBasedOnPerformance(currentFPS) {
        const targetFPS = 30;
        
        if (currentFPS < targetFPS - 5 && this.gameState.quality !== 'low') {
            this.decreaseQuality();
        } else if (currentFPS > targetFPS + 10 && this.gameState.quality !== 'high') {
            this.increaseQuality();
        }
    }

    /**
     * –ü–æ–Ω–∏–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
     */
    decreaseQuality() {
        const qualities = ['high', 'medium', 'low'];
        const currentIndex = qualities.indexOf(this.gameState.quality);
        
        if (currentIndex < qualities.length - 1) {
            this.gameState.quality = qualities[currentIndex + 1];
            this.applyQualitySettings();
            console.log('üìâ –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–Ω–∏–∂–µ–Ω–æ –¥–æ:', this.gameState.quality);
            this.trackEvent('quality_decreased', { quality: this.gameState.quality });
        }
    }

    /**
     * –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
     */
    increaseQuality() {
        const qualities = ['high', 'medium', 'low'];
        const currentIndex = qualities.indexOf(this.gameState.quality);
        
        if (currentIndex > 0) {
            this.gameState.quality = qualities[currentIndex - 1];
            this.applyQualitySettings();
            console.log('üìà –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–≤—ã—à–µ–Ω–æ –¥–æ:', this.gameState.quality);
            this.trackEvent('quality_increased', { quality: this.gameState.quality });
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞
     */
    applyQualitySettings() {
        if (window.gameInstance && window.gameInstance.setQuality) {
            window.gameInstance.setQuality(this.gameState.quality);
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
     */
    setupMemoryManagement() {
        // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.cleanupMemory();
        }, 300000);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
     */
    cleanupMemory() {
        try {
            if (window.gameInstance && window.gameInstance.cleanup) {
                window.gameInstance.cleanup();
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if (window.gc) {
                window.gc();
            }
            
            console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏:', error);
        }
    }`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  private static generateResponsiveMethods(): string {
    return `
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
     */
    setupResponsiveDesign() {
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            this.updateScreenSize();
            
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            window.addEventListener('resize', () => this.updateScreenSize());
            
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
            window.addEventListener('orientationchange', () => {
                setTimeout(() => this.updateScreenSize(), 100);
            });
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (this.deviceInfo.isMobile()) {
                this.setupMobileControls();
            }
            
            console.log('üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
     */
    updateScreenSize() {
        const width = window.innerWidth;
        const height = window.innerHeight;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        if (window.gameInstance && window.gameInstance.resize) {
            window.gameInstance.resize(width, height);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        document.documentElement.style.setProperty('--screen-width', width + 'px');
        document.documentElement.style.setProperty('--screen-height', height + 'px');
        
        this.trackEvent('screen_resized', { width, height });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    setupMobileControls() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        const viewport = document.querySelector('meta[name="viewport"]');
        if (viewport) {
            viewport.setAttribute('content', 
                'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'
            );
        }

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        document.body.style.userSelect = 'none';
        document.body.style.webkitUserSelect = 'none';
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        document.addEventListener('contextmenu', (e) => e.preventDefault());
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∫–∞—Å–∞–Ω–∏—è—Ö –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
        const gameContainer = document.getElementById('game') || document.body;
        gameContainer.addEventListener('touchmove', (e) => e.preventDefault(), { passive: false });
        
        console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    getOrientation() {
        if (screen.orientation) {
            return screen.orientation.angle === 0 || screen.orientation.angle === 180 ? 'portrait' : 'landscape';
        }
        
        return window.innerWidth > window.innerHeight ? 'landscape' : 'portrait';
    }

    /**
     * –ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    async requestFullscreen() {
        if (!this.ysdk) return false;

        try {
            await this.ysdk.screen.fullscreen.request();
            this.gameState.isFullscreen = true;
            this.trackEvent('fullscreen_requested');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', error);
            return false;
        }
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    async exitFullscreen() {
        if (!this.ysdk) return false;

        try {
            await this.ysdk.screen.fullscreen.exit();
            this.gameState.isFullscreen = false;
            this.trackEvent('fullscreen_exited');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', error);
            return false;
        }
    }`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  private static generateSocialMethods(): string {
    return `
    /**
     * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    async shareScore(score, message = '') {
        try {
            const shareText = message || \`–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏–≥—Ä–µ: \${score} –æ—á–∫–æ–≤! –ü–æ–ø—Ä–æ–±—É–π –æ–±—ã–≥—Ä–∞—Ç—å –º–µ–Ω—è!\`;
            
            if (this.ysdk && this.ysdk.clipboard) {
                await this.ysdk.clipboard.writeText(shareText);
                console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            } else if (navigator.clipboard) {
                await navigator.clipboard.writeText(shareText);
                console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            }
            
            this.trackEvent('score_shared', { score });
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
            return false;
        }
    }

    /**
     * –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π
     */
    async inviteFriends(message = '') {
        try {
            const inviteText = message || '–ü–æ–ø—Ä–æ–±—É–π —ç—Ç—É –∫–ª–∞—Å—Å–Ω—É—é –∏–≥—Ä—É!';
            
            if (this.ysdk && this.ysdk.clipboard) {
                await this.ysdk.clipboard.writeText(inviteText);
            } else if (navigator.clipboard) {
                await navigator.clipboard.writeText(inviteText);
            }
            
            console.log('üìã –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            this.trackEvent('friends_invited');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:', error);
            return false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —è—Ä–ª—ã–∫–∞ –∏–≥—Ä—ã
     */
    async createShortcut() {
        if (!this.ysdk) return false;

        try {
            await this.ysdk.shortcut.requestShortcut();
            console.log('üîó –Ø—Ä–ª—ã–∫ —Å–æ–∑–¥–∞–Ω');
            this.trackEvent('shortcut_created');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è—Ä–ª—ã–∫–∞:', error);
            return false;
        }
    }

    /**
     * –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –∏–≥—Ä—ã
     */
    async requestRating() {
        if (!this.ysdk) return false;

        try {
            await this.ysdk.feedback.requestReview();
            console.log('‚≠ê –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            this.trackEvent('rating_requested');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫–∏:', error);
            return false;
        }
    }`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  private static generateLocalizationSystem(): string {
    return `
// –°–∏—Å—Ç–µ–º–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
class LocalizationSystem {
    constructor() {
        this.supportedLanguages = ['ru', 'en', 'tr', 'uk', 'be', 'kz'];
        this.currentLanguage = 'en';
        this.translations = {};
        this.fallbackLanguage = 'en';
        this.pluralRules = {};
    }
    
    async init(ysdk) {
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userLang = ysdk?.environment?.i18n?.lang || 'en';
        this.currentLanguage = this.supportedLanguages.includes(userLang) ? userLang : this.fallbackLanguage;
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        await this.loadLanguage(this.currentLanguage);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ fallback —è–∑—ã–∫–∞
        if (this.currentLanguage !== this.fallbackLanguage) {
            await this.loadLanguage(this.fallbackLanguage);
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
        this.setupPluralRules();
    }
    
    async loadLanguage(lang) {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
            this.translations[lang] = this.getBuiltInTranslations(lang);
        } catch (error) {
            console.error(\`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–∞ \${lang}:\`, error);
        }
    }
    
    getBuiltInTranslations(lang) {
        const translations = {
            ru: {
                'game.start': '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É',
                'game.pause': '–ü–∞—É–∑–∞',
                'game.resume': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                'game.over': '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞',
                'game.score': '–û—á–∫–∏: {score}',
                'game.level': '–£—Ä–æ–≤–µ–Ω—å {level}',
                'game.lives': {
                    one: '{count} –∂–∏–∑–Ω—å',
                    few: '{count} –∂–∏–∑–Ω–∏',
                    many: '{count} –∂–∏–∑–Ω–µ–π'
                },
                'ad.reward': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É –∑–∞ –Ω–∞–≥—Ä–∞–¥—É',
                'leaderboard.title': '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤',
                'achievement.unlocked': '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
                'settings.sound': '–ó–≤—É–∫',
                'settings.music': '–ú—É–∑—ã–∫–∞'
            },
            en: {
                'game.start': 'Start Game',
                'game.pause': 'Pause',
                'game.resume': 'Resume',
                'game.over': 'Game Over',
                'game.score': 'Score: {score}',
                'game.level': 'Level {level}',
                'game.lives': {
                    one: '{count} life',
                    other: '{count} lives'
                },
                'ad.reward': 'Watch ad for reward',
                'leaderboard.title': 'Leaderboard',
                'achievement.unlocked': 'Achievement unlocked!',
                'settings.sound': 'Sound',
                'settings.music': 'Music'
            },
            tr: {
                'game.start': 'Oyunu Ba≈ülat',
                'game.pause': 'Duraklat',
                'game.resume': 'Devam Et',
                'game.over': 'Oyun Bitti',
                'game.score': 'Puan: {score}',
                'game.level': 'Seviye {level}',
                'game.lives': {
                    other: '{count} can'
                },
                'ad.reward': '√ñd√ºl i√ßin reklam izle',
                'leaderboard.title': 'Lider Tablosu',
                'achievement.unlocked': 'Ba≈üarƒ±m kilidi a√ßƒ±ldƒ±!',
                'settings.sound': 'Ses',
                'settings.music': 'M√ºzik'
            }
        };
        
        return translations[lang] || translations.en;
    }
    
    get(key, params = {}) {
        const keys = key.split('.');
        let translation = this.translations[this.currentLanguage];
        
        // –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º
        for (const k of keys) {
            translation = translation?.[k];
            if (!translation) break;
        }
        
        // Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        if (!translation && this.currentLanguage !== this.fallbackLanguage) {
            translation = this.translations[this.fallbackLanguage];
            for (const k of keys) {
                translation = translation?.[k];
                if (!translation) break;
            }
        }
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        if (!translation) {
            console.warn(\`–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: \${key}\`);
            return key;
        }
        
        // –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        return this.interpolate(translation, params);
    }
    
    interpolate(str, params) {
        if (typeof str !== 'string') return str;
        
        return str.replace(/\\{(\\w+)\\}/g, (match, param) => {
            return params[param] !== undefined ? params[param] : match;
        });
    }
    
    plural(key, count) {
        const rule = this.pluralRules[this.currentLanguage];
        const form = rule ? rule(count) : 'other';
        
        const pluralKey = \`\${key}.\${form}\`;
        return this.get(pluralKey, { count });
    }
    
    setupPluralRules() {
        // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
        this.pluralRules.ru = (n) => {
            if (n % 10 === 1 && n % 100 !== 11) return 'one';
            if ([2, 3, 4].includes(n % 10) && ![12, 13, 14].includes(n % 100)) return 'few';
            return 'many';
        };
        
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
        this.pluralRules.en = (n) => n === 1 ? 'one' : 'other';
        
        // –¢—É—Ä–µ—Ü–∫–∏–π —è–∑—ã–∫
        this.pluralRules.tr = (n) => 'other';
    }
    
    async changeLanguage(lang) {
        if (!this.supportedLanguages.includes(lang)) {
            console.error(\`–Ø–∑—ã–∫ \${lang} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\`);
            return;
        }
        
        if (!this.translations[lang]) {
            await this.loadLanguage(lang);
        }
        
        this.currentLanguage = lang;
        this.updateUI();
    }
    
    updateUI() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º data-i18n
        document.querySelectorAll('[data-i18n]').forEach(element => {
            const key = element.getAttribute('data-i18n');
            element.textContent = this.get(key);
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ placeholder
        document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
            const key = element.getAttribute('data-i18n-placeholder');
            element.placeholder = this.get(key);
        });
    }
}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  private static generateAchievementSystem(): string {
    return `
// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
class AchievementSystem {
    constructor() {
        this.achievements = this.defineAchievements();
        this.unlockedAchievements = new Set();
        this.progress = {};
        this.player = null;
    }
    
    async init(player) {
        this.player = player;
        await this.loadProgress();
    }
    
    defineAchievements() {
        return {
            FIRST_WIN: {
                id: 'first_win',
                name: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞',
                description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∏–≥—Ä—É',
                icon: 'üèÜ',
                points: 10
            },
            SCORE_1000: {
                id: 'score_1000',
                name: '–¢—ã—Å—è—á–Ω–∏–∫',
                description: '–ù–∞–±–µ—Ä–∏—Ç–µ 1000 –æ—á–∫–æ–≤',
                icon: 'üíØ',
                points: 20,
                progress: { current: 0, target: 1000 }
            },
            PLAY_10_GAMES: {
                id: 'play_10_games',
                name: '–ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π –∏–≥—Ä–æ–∫',
                description: '–°—ã–≥—Ä–∞–π—Ç–µ 10 –∏–≥—Ä',
                icon: 'üéÆ',
                points: 30,
                progress: { current: 0, target: 10 }
            },
            SPEEDRUN: {
                id: 'speedrun',
                name: '–°–ø–∏–¥—Ä–∞–Ω–Ω–µ—Ä',
                description: '–ü—Ä–æ–π–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥',
                icon: '‚ö°',
                points: 50,
                condition: (gameState) => gameState.levelTime <= 30
            }
        };
    }
    
    async loadProgress() {
        if (!this.player) return;
        
        try {
            const stats = await this.player.getStats(['achievements', 'achievementProgress']);
            this.unlockedAchievements = new Set(stats.achievements || []);
            this.progress = stats.achievementProgress || {};
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        }
    }
    
    async unlock(achievementId) {
        const achievement = this.achievements[achievementId];
        if (!achievement || this.unlockedAchievements.has(achievementId)) {
            return false;
        }
        
        this.unlockedAchievements.add(achievementId);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        await this.saveProgress();
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification(achievement);
        
        // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
        if (this.player) {
            await this.player.incrementStats({ achievementPoints: achievement.points });
        }
        
        return true;
    }
    
    async updateProgress(achievementId, value) {
        const achievement = this.achievements[achievementId];
        if (!achievement || !achievement.progress || this.unlockedAchievements.has(achievementId)) {
            return;
        }
        
        this.progress[achievementId] = Math.min(value, achievement.progress.target);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (this.progress[achievementId] >= achievement.progress.target) {
            await this.unlock(achievementId);
        } else {
            await this.saveProgress();
        }
    }
    
    async saveProgress() {
        if (!this.player) return;
        
        try {
            await this.player.setStats({
                achievements: Array.from(this.unlockedAchievements),
                achievementProgress: this.progress
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        }
    }
    
    showNotification(achievement) {
        // –°–æ–∑–¥–∞–Ω–∏–µ UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = 'achievement-notification';
        notification.innerHTML = \`
            <div class="achievement-icon">\${achievement.icon}</div>
            <div class="achievement-info">
                <div class="achievement-name">\${achievement.name}</div>
                <div class="achievement-description">\${achievement.description}</div>
                <div class="achievement-points">+\${achievement.points} –æ—á–∫–æ–≤</div>
            </div>
        \`;
        
        // –°—Ç–∏–ª–∏
        notification.style.cssText = \`
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            z-index: 10000;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.5s ease;
            max-width: 300px;
            font-family: system-ui;
        \`;
        
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => notification.remove(), 500);
        }, 4000);
    }
    
    getAll() {
        return Object.values(this.achievements);
    }
    
    getUnlocked() {
        return Array.from(this.unlockedAchievements).map(id => this.achievements[id]);
    }
    
    getProgress(achievementId) {
        const achievement = this.achievements[achievementId];
        if (!achievement || !achievement.progress) return null;
        
        return {
            current: this.progress[achievementId] || 0,
            target: achievement.progress.target,
            percentage: Math.round(((this.progress[achievementId] || 0) / achievement.progress.target) * 100)
        };
    }
}`;
  }

  /**
   * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π SDK –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∏–≥—Ä—ã
   */
  public static integrateIntoGame(gameCode: string, config: YandexSDKConfig): string {
    const sdkIntegration = this.generateSDKIntegration(config);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π SDK –≤ HTML
    const sdkScript = `
    <!-- Yandex Games SDK v2.0 Enhanced Integration -->
    <script src="https://yandex.ru/games/sdk/v2"></script>
    <style>
        .achievement-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            z-index: 10000;
            display: flex;
            align-items: center;
            gap: 10px;
            font-family: system-ui;
        }
        
        .achievement-icon {
            font-size: 24px;
        }
        
        .achievement-info {
            flex: 1;
        }
        
        .achievement-name {
            font-weight: bold;
            margin-bottom: 4px;
        }
        
        .achievement-description {
            font-size: 14px;
            opacity: 0.9;
            margin-bottom: 4px;
        }
        
        .achievement-points {
            font-size: 12px;
            opacity: 0.8;
        }

        /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        @media (max-width: 768px) {
            .achievement-notification {
                top: 10px;
                right: 10px;
                left: 10px;
                max-width: none;
            }
        }
    </style>
    <script>
        ${sdkIntegration}
    </script>`;

    // –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ body –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –Ω–∏–º
    if (gameCode.includes('</body>')) {
      return gameCode.replace('</body>', `${sdkScript}\n</body>`);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–∞ body, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
      return gameCode + sdkScript;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é SDK –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∑–∞–π–Ω–∞ –∏–≥—Ä—ã
   */
  public static createSDKConfig(gameDesign: GameDesign): YandexSDKConfig {
    const config: YandexSDKConfig = {
      leaderboards: true,      // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
      localization: true,      // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
      analytics: true,         // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      achievements: true,      // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      advertising: {
        rewarded: true,        // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∫–ª–∞–º—É —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º
        interstitial: true,    // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –º–µ–∂—Å—Ç—Ä–∞–Ω–∏—á–Ω—É—é —Ä–µ–∫–ª–∞–º—É
        banner: false,         // –û–±—ã—á–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã –æ—Ç–∫–ª—é—á–∞–µ–º
        sticky: true           // –í–∫–ª—é—á–∞–µ–º sticky-–±–∞–Ω–Ω–µ—Ä—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)
      },
      shortcut: true,          // –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —è—Ä–ª—ã–∫
      rateApp: true,           // –í—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–∏–º –æ—Ü–µ–Ω–∏—Ç—å
      social: true             // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    };

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
    if (gameDesign.monetization && gameDesign.monetization.length > 0) {
      gameDesign.monetization.forEach(monetization => {
        switch (monetization) {
          case 'purchases':
            config.payments = true;
            break;
          case 'rewarded_ads':
            config.advertising!.rewarded = true;
            break;
          case 'interstitial_ads':
            config.advertising!.interstitial = true;
            break;
          case 'banner_ads':
            config.advertising!.banner = true;
            break;
        }
      });
    }

    return config;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SDK
   */
  public static generateGameHTML(gameTitle: string, config: YandexSDKConfig): string {
    return `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>${gameTitle}</title>
    <meta name="description" content="${gameTitle} - HTML5 –∏–≥—Ä–∞ –¥–ª—è Yandex Games">
    <meta name="keywords" content="–∏–≥—Ä–∞, HTML5, Yandex Games">
    
    <!-- –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ -->
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: system-ui, -apple-system, sans-serif;
            background: #000;
            color: #fff;
            overflow: hidden;
            user-select: none;
            -webkit-user-select: none;
        }
        
        #game {
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        #ui-overlay {
            position: fixed;
            top: 10px;
            left: 10px;
            z-index: 1000;
            color: white;
            font-size: 18px;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.7);
        }
        
        .mobile-controls {
            position: fixed;
            bottom: 20px;
            width: 100%;
            display: none;
            justify-content: space-between;
            padding: 0 20px;
            z-index: 1000;
        }
        
        .control-button {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            color: white;
            font-size: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            touch-action: manipulation;
            user-select: none;
        }
        
        @media (max-width: 768px) {
            .mobile-controls {
                display: flex;
            }
        }
    </style>
</head>
<body>
    <div id="game"></div>
    
    <!-- UI –æ–≤–µ—Ä–ª–µ–π -->
    <div id="ui-overlay">
        –°—á—ë—Ç: <span id="score-value">0</span><br>
        –ñ–∏–∑–Ω–∏: <span id="lives-value">3</span>
    </div>
    
    <!-- –ú–æ–±–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
    <div class="mobile-controls">
        <div class="control-button" id="left-btn">‚Üê</div>
        <div class="control-button" id="jump-btn">‚Üë</div>
        <div class="control-button" id="right-btn">‚Üí</div>
    </div>
    
    <!-- Phaser 3 -->
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.70.0/dist/phaser.min.js"></script>
    
    <!-- –ò–≥—Ä–æ–≤–æ–π –∫–æ–¥ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –∑–¥–µ—Å—å -->
    
</body>
</html>`;
  }
} 
import { Router } from 'express';
import { RealTimeQualityMonitoring } from '../services/realTimeQualityMonitoring';
import { LoggerService } from '../services/logger';
import { validateRequest } from '../middleware/validation';
import { z } from 'zod';

const router = Router();
const logger = new LoggerService();

// Singleton instance of quality monitoring
let qualityMonitor: RealTimeQualityMonitoring | null = null;

// Get or create quality monitoring instance
const getQualityMonitor = (): RealTimeQualityMonitoring => {
  if (!qualityMonitor) {
    qualityMonitor = new RealTimeQualityMonitoring();
  }
  return qualityMonitor;
};

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const addMetricSchema = z.object({
  type: z.enum(['game_generation', 'asset_generation', 'code_quality', 'performance']),
  subType: z.string().optional(),
  qualityScore: z.number().min(0).max(100),
  details: z.object({
    technicalScore: z.number().min(0).max(100).optional(),
    aestheticScore: z.number().min(0).max(100).optional(),
    gameRelevanceScore: z.number().min(0).max(100).optional(),
    performanceScore: z.number().min(0).max(100).optional(),
    codeQuality: z.number().min(0).max(100).optional(),
    issues: z.array(z.string()),
    recommendations: z.array(z.string())
  }),
  metadata: z.object({
    gameId: z.string().optional(),
    assetId: z.string().optional(),
    generationTime: z.number().min(0),
    aiModel: z.string(),
    promptLength: z.number().optional(),
    retryCount: z.number().optional()
  })
});

const setThresholdsSchema = z.object({
  critical: z.number().min(0).max(100).optional(),
  high: z.number().min(0).max(100).optional(),
  medium: z.number().min(0).max(100).optional(),
  low: z.number().min(0).max(100).optional()
});

const getTrendsSchema = z.object({
  timeWindow: z.enum(['5m', '15m', '1h', '6h', '24h']).default('1h')
});

const getAlertsSchema = z.object({
  limit: z.number().min(1).max(1000).default(50),
  severity: z.enum(['low', 'medium', 'high', 'critical']).optional()
});

/**
 * POST /api/quality-monitoring/metrics
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
 */
router.post('/metrics', validateRequest(addMetricSchema), async (req, res) => {
  try {
    const metricData = req.body;
    
    logger.info(`üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: ${metricData.type} - ${metricData.qualityScore}/100`);

    const monitor = getQualityMonitor();
    monitor.addQualityMetric(metricData);

    res.json({
      success: true,
      message: '–ú–µ—Ç—Ä–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
      timestamp: new Date()
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏',
      details: error.message
    });
  }
});

/**
 * GET /api/quality-monitoring/stats
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
router.get('/stats', async (req, res) => {
  try {
    const monitor = getQualityMonitor();
    const stats = monitor.getMonitoringStats();
    
    res.json({
      success: true,
      data: stats,
      timestamp: new Date()
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      details: error.message
    });
  }
});

/**
 * POST /api/quality-monitoring/thresholds
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
 */
router.post('/thresholds', validateRequest(setThresholdsSchema), async (req, res) => {
  try {
    const thresholds = req.body;
    
    logger.info('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞:', thresholds);

    const monitor = getQualityMonitor();
    monitor.setQualityThresholds(thresholds);

    res.json({
      success: true,
      message: '–ü–æ—Ä–æ–≥–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      thresholds,
      timestamp: new Date()
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–æ–≤',
      details: error.message
    });
  }
});

/**
 * GET /api/quality-monitoring/trends
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
 */
router.get('/trends', async (req, res) => {
  try {
    const { timeWindow = '1h' } = req.query;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
    const validWindows = ['5m', '15m', '1h', '6h', '24h'];
    if (!validWindows.includes(timeWindow as string)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ',
        validWindows
      });
    }

    const monitor = getQualityMonitor();
    const trends = monitor['calculateQualityTrends'](timeWindow as string);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map –≤ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è JSON
    const trendsForJson = {
      ...trends,
      issueFrequency: Object.fromEntries(trends.issueFrequency)
    };

    res.json({
      success: true,
      data: trendsForJson,
      timeWindow,
      timestamp: new Date()
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤',
      details: error.message
    });
  }
});

/**
 * GET /api/quality-monitoring/alerts
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
 */
router.get('/alerts', async (req, res) => {
  try {
    const { limit = 50, severity } = req.query;
    
    const monitor = getQualityMonitor();
    const stats = monitor.getMonitoringStats();
    
    let alerts = stats.recentAlerts || [];
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    if (severity) {
      alerts = alerts.filter((alert: any) => alert.severity === severity);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const limitNum = Math.min(parseInt(limit as string) || 50, 1000);
    alerts = alerts.slice(0, limitNum);

    res.json({
      success: true,
      data: {
        alerts,
        count: alerts.length,
        filters: { limit: limitNum, severity }
      },
      timestamp: new Date()
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤',
      details: error.message
    });
  }
});

/**
 * POST /api/quality-monitoring/cleanup
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
router.post('/cleanup', async (req, res) => {
  try {
    const { maxAge = 24 } = req.body; // —á–∞—Å—ã
    
    const maxAgeMs = maxAge * 60 * 60 * 1000;
    
    logger.info(`üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ ${maxAge} —á–∞—Å–æ–≤`);

    const monitor = getQualityMonitor();
    monitor.cleanupOldData(maxAgeMs);

    res.json({
      success: true,
      message: `–î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ ${maxAge} —á–∞—Å–æ–≤ –æ—á–∏—â–µ–Ω—ã`,
      maxAge,
      timestamp: new Date()
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
      details: error.message
    });
  }
});

/**
 * POST /api/quality-monitoring/simulate
 * –°–∏–º—É–ª—è—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 */
router.post('/simulate', async (req, res) => {
  try {
    const { count = 10, type = 'asset_generation' } = req.body;
    
    logger.info(`üé≠ –°–∏–º—É–ª—è—Ü–∏—è ${count} –º–µ—Ç—Ä–∏–∫ —Ç–∏–ø–∞ ${type}`);

    const monitor = getQualityMonitor();
    
    for (let i = 0; i < count; i++) {
      const qualityScore = 30 + Math.random() * 70; // 30-100
      const generationTime = 1000 + Math.random() * 15000; // 1-16 —Å–µ–∫—É–Ω–¥
      
      const metric = {
        type: type as 'game_generation' | 'asset_generation' | 'code_quality' | 'performance',
        subType: type === 'asset_generation' ? ['sprite', 'background', 'ui'][Math.floor(Math.random() * 3)] : undefined,
        qualityScore: Math.round(qualityScore),
        details: {
          technicalScore: Math.round(qualityScore + (Math.random() - 0.5) * 20),
          aestheticScore: Math.round(qualityScore + (Math.random() - 0.5) * 15),
          gameRelevanceScore: Math.round(qualityScore + (Math.random() - 0.5) * 10),
          issues: qualityScore < 60 ? ['–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ', '–ü—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π'] : [],
          recommendations: qualityScore < 60 ? ['–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'] : []
        },
        metadata: {
          gameId: `game_${Math.floor(Math.random() * 100)}`,
          assetId: type === 'asset_generation' ? `asset_${Math.floor(Math.random() * 1000)}` : undefined,
          generationTime: Math.round(generationTime),
          aiModel: ['openai', 'claude', 'deepseek'][Math.floor(Math.random() * 3)],
          promptLength: 50 + Math.random() * 200,
          retryCount: qualityScore < 50 ? Math.floor(Math.random() * 3) : 0
        }
      };
      
      monitor.addQualityMetric(metric);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–µ—Ç—Ä–∏–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    res.json({
      success: true,
      message: `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫`,
      count,
      type,
      timestamp: new Date()
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏',
      details: error.message
    });
  }
});

/**
 * GET /api/quality-monitoring/dashboard-data
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
router.get('/dashboard-data', async (req, res) => {
  try {
    const { timeWindow = '1h' } = req.query;
    
    const monitor = getQualityMonitor();
    const stats = monitor.getMonitoringStats();
    const trends = monitor['calculateQualityTrends'](timeWindow as string);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
    const dashboardData = {
      stats: {
        ...stats,
        uptime: Date.now() - stats.uptime.getTime()
      },
      trends: {
        ...trends,
        issueFrequency: Object.fromEntries(trends.issueFrequency)
      },
      recentAlerts: stats.recentAlerts?.slice(0, 10) || [],
      healthStatus: stats.averageQuality >= 80 ? 'excellent' : 
                   stats.averageQuality >= 60 ? 'good' :
                   stats.averageQuality >= 40 ? 'warning' : 'critical'
    };

    res.json({
      success: true,
      data: dashboardData,
      timestamp: new Date()
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞',
      details: error.message
    });
  }
});

/**
 * POST /api/quality-monitoring/bulk-metrics
 * –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
 */
router.post('/bulk-metrics', async (req, res) => {
  try {
    const { metrics } = req.body;
    
    if (!Array.isArray(metrics)) {
      return res.status(400).json({
        success: false,
        error: '–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'
      });
    }

    logger.info(`üìä –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ${metrics.length} –º–µ—Ç—Ä–∏–∫`);

    const monitor = getQualityMonitor();
    let successCount = 0;
    const errors = [];

    for (const [index, metricData] of metrics.entries()) {
      try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
        const validatedMetric = addMetricSchema.parse(metricData);
        monitor.addQualityMetric(validatedMetric);
        successCount++;
      } catch (error) {
        errors.push({
          index,
          error: error.message,
          metric: metricData
        });
      }
    }

    res.json({
      success: true,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${metrics.length} –º–µ—Ç—Ä–∏–∫`,
      results: {
        total: metrics.length,
        successful: successCount,
        failed: errors.length,
        errors: errors.slice(0, 10) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
      },
      timestamp: new Date()
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫',
      details: error.message
    });
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket
export const initializeQualityMonitoringWebSocket = (io: any) => {
  const monitor = getQualityMonitor();
  monitor.initializeWebSocket(io);
  logger.info('üì° WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
export const getQualityMonitoringInstance = () => getQualityMonitor();

export default router; 
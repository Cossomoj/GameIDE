import { Router, Request, Response } from 'express';
import { EnhancedAssetGeneration } from '../services/enhancedAssetGeneration';
import { LoggerService } from '../services/logger';
import { asyncHandler } from '../middleware/asyncHandler';
import multer from 'multer';
import path from 'path';

const router = Router();
const logger = new LoggerService();
const enhancedAssetGen = new EnhancedAssetGeneration();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–ª—è regeneration)
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
    }
  }
});

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–ø—Ä–∞–π—Ç–∞
 * POST /api/enhanced-assets/sprite
 */
router.post('/sprite', asyncHandler(async (req: Request, res: Response) => {
  const { description, style = 'pixel art', dimensions = { width: 64, height: 64 }, config } = req.body;
  
  if (!description) {
    return res.status(400).json({
      success: false,
      error: 'Description is required'
    });
  }

  try {
    logger.info(`üé® API –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ø—Ä–∞–π—Ç–∞: "${description}"`);
    
    const result = await enhancedAssetGen.generateHighQualitySprite(
      description,
      style,
      dimensions,
      config
    );
    
    res.json({
      success: true,
      data: {
        asset: {
          data: result.asset.data.toString('base64'),
          metadata: result.asset.metadata
        },
        qualityMetrics: result.qualityMetrics,
        attemptsMade: result.attemptsMade,
        generationLog: result.generationLog
      }
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø—Ä–∞–π—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to generate sprite',
      message: error.message
    });
  }
}));

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞
 * POST /api/enhanced-assets/background
 */
router.post('/background', asyncHandler(async (req: Request, res: Response) => {
  const { description, style = 'cartoon', size = '1792x1024', config } = req.body;
  
  if (!description) {
    return res.status(400).json({
      success: false,
      error: 'Description is required'
    });
  }

  try {
    logger.info(`üñºÔ∏è API –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ–æ–Ω–∞: "${description}"`);
    
    const result = await enhancedAssetGen.generateHighQualityBackground(
      description,
      style,
      size,
      config
    );
    
    res.json({
      success: true,
      data: {
        asset: {
          data: result.asset.data.toString('base64'),
          metadata: result.asset.metadata
        },
        qualityMetrics: result.qualityMetrics,
        attemptsMade: result.attemptsMade,
        generationLog: result.generationLog
      }
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ–Ω–∞:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to generate background',
      message: error.message
    });
  }
}));

/**
 * –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å—Å–µ—Ç–æ–≤
 * POST /api/enhanced-assets/batch
 */
router.post('/batch', asyncHandler(async (req: Request, res: Response) => {
  const { requests } = req.body;
  
  if (!requests || !Array.isArray(requests)) {
    return res.status(400).json({
      success: false,
      error: 'Requests array is required'
    });
  }

  try {
    logger.info(`üì¶ API –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞–∫–µ—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ${requests.length} –∞—Å—Å–µ—Ç–æ–≤`);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è WebSocket (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    const progressUpdates: any[] = [];
    
    enhancedAssetGen.on('batch:progress', (progress) => {
      progressUpdates.push({
        timestamp: new Date(),
        ...progress
      });
    });
    
    const results = await enhancedAssetGen.generateAssetBatch(requests);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è JSON –æ—Ç–≤–µ—Ç–∞
    const responseData: any[] = [];
    
    for (const [description, result] of results.entries()) {
      responseData.push({
        description,
        asset: {
          data: result.asset.data.toString('base64'),
          metadata: result.asset.metadata
        },
        qualityMetrics: result.qualityMetrics
      });
    }
    
    res.json({
      success: true,
      data: {
        results: responseData,
        totalGenerated: results.size,
        progressUpdates
      }
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to generate asset batch',
      message: error.message
    });
  }
}));

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * GET /api/enhanced-assets/quality-stats
 */
router.get('/quality-stats', asyncHandler(async (req: Request, res: Response) => {
  try {
    const stats = enhancedAssetGen.getQualityStatistics();
    
    res.json({
      success: true,
      data: stats
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get quality statistics'
    });
  }
}));

/**
 * –ü—Ä–µ–≤—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è –∞—Å—Å–µ—Ç–∞
 * POST /api/enhanced-assets/style-preview
 */
router.post('/style-preview', asyncHandler(async (req: Request, res: Response) => {
  const { description, styles = ['pixel art', 'cartoon', 'realistic', 'minimalist'] } = req.body;
  
  if (!description) {
    return res.status(400).json({
      success: false,
      error: 'Description is required'
    });
  }

  try {
    logger.info(`üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é —Å—Ç–∏–ª–µ–π –¥–ª—è: "${description}"`);
    
    const previews = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ–≤—å—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∏–ª—è
    for (const style of styles) {
      try {
        const result = await enhancedAssetGen.generateHighQualitySprite(
          description,
          style,
          { width: 128, height: 128 }, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é
          {
            maxAttempts: 1, // –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–≤—å—é
            minQualityThreshold: 60,
            improvementStrategy: 'iterative'
          }
        );
        
        previews.push({
          style,
          asset: {
            data: result.asset.data.toString('base64'),
            metadata: result.asset.metadata
          },
          qualityScore: result.qualityMetrics.overallScore
        });
        
      } catch (error) {
        logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é –¥–ª—è —Å—Ç–∏–ª—è ${style}:`, error);
        previews.push({
          style,
          error: error.message,
          qualityScore: 0
        });
      }
    }
    
    res.json({
      success: true,
      data: {
        description,
        previews,
        totalStyles: styles.length,
        successfulPreviews: previews.filter(p => !p.error).length
      }
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é —Å—Ç–∏–ª–µ–π:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to generate style previews',
      message: error.message
    });
  }
}));

/**
 * –£–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞—Å—Å–µ—Ç–∞
 * POST /api/enhanced-assets/improve
 */
router.post('/improve', upload.single('image'), asyncHandler(async (req: Request, res: Response) => {
  const { description, style, targetQuality = 85 } = req.body;
  const imageFile = req.file;
  
  if (!imageFile) {
    return res.status(400).json({
      success: false,
      error: 'Image file is required'
    });
  }

  if (!description) {
    return res.status(400).json({
      success: false,
      error: 'Description is required'
    });
  }

  try {
    logger.info(`üîß –£–ª—É—á—à–µ–Ω–∏–µ –∞—Å—Å–µ—Ç–∞: "${description}"`);
    
    // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    // –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ
    
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –∫–∞—á–µ—Å—Ç–≤—É
    const result = await enhancedAssetGen.generateHighQualitySprite(
      `Improved version of: ${description}`,
      style || 'pixel art',
      { width: 128, height: 128 },
      {
        maxAttempts: 3,
        minQualityThreshold: targetQuality,
        improvementStrategy: 'iterative'
      }
    );
    
    res.json({
      success: true,
      data: {
        originalSize: imageFile.size,
        improvedAsset: {
          data: result.asset.data.toString('base64'),
          metadata: result.asset.metadata
        },
        qualityMetrics: result.qualityMetrics,
        improvementLog: result.generationLog
      }
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∞—Å—Å–µ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to improve asset',
      message: error.message
    });
  }
}));

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
 * POST /api/enhanced-assets/recommendations
 */
router.post('/recommendations', asyncHandler(async (req: Request, res: Response) => {
  const { assetType, style, targetPlatform = 'yandex_games', description } = req.body;
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫
    const recommendations = {
      general: [
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏',
        '–ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π –≤ —Å–ø—Ä–∞–π—Ç–∞—Ö –º–∞–ª–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞',
        '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –≤–æ –≤—Å–µ—Ö –∞—Å—Å–µ—Ç–∞—Ö –∏–≥—Ä—ã'
      ],
      styleSpecific: {},
      platformSpecific: {},
      qualityTips: []
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é
    switch (style?.toLowerCase()) {
      case 'pixel art':
        recommendations.styleSpecific = {
          style: 'pixel art',
          tips: [
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤ (8-16 —Ü–≤–µ—Ç–æ–≤)',
            '–ò–∑–±–µ–≥–∞–π—Ç–µ anti-aliasing –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–π —á–µ—Ç–∫–æ—Å—Ç–∏',
            '–î–µ–ª–∞–π—Ç–µ –∫–æ–Ω—Ç—É—Ä—ã —Ç–æ–ª—â–∏–Ω–æ–π –≤ 1 –ø–∏–∫—Å–µ–ª—å',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∏–∑–µ—Ä–∏–Ω–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤'
          ]
        };
        break;
      case 'cartoon':
        recommendations.styleSpecific = {
          style: 'cartoon',
          tips: [
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Ä–∫–∏–µ, –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞',
            '–î–æ–±–∞–≤—å—Ç–µ —á–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã (outline)',
            '–î–µ–ª–∞–π—Ç–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ—Å—Ç—ã–º–∏ –∏ —É–∑–Ω–∞–≤–∞–µ–º—ã–º–∏',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏'
          ]
        };
        break;
      case 'realistic':
        recommendations.styleSpecific = {
          style: 'realistic',
          tips: [
            '–î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ',
            '–°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏',
            '–î–æ–±–∞–≤—å—Ç–µ –≥–ª—É–±–∏–Ω—É —á–µ—Ä–µ–∑ –∑–∞—Ç–µ–Ω–µ–Ω–∏–µ'
          ]
        };
        break;
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if (targetPlatform === 'yandex_games') {
      recommendations.platformSpecific = {
        platform: 'Yandex Games',
        tips: [
          '–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (PNG, JPEG)',
          '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤',
          '–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ 20MB –Ω–∞ –≤—Å—é –∏–≥—Ä—É'
        ]
      };
    }

    // –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    recommendations.qualityTips = [
      '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∞—Å—Å–µ—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö —ç–∫—Ä–∞–Ω–∞',
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏',
      '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏',
      '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤ –æ—Å–≤–µ—â–µ–Ω–∏–∏'
    ];

    res.json({
      success: true,
      data: recommendations
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get recommendations'
    });
  }
}));

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—Å—Å–µ—Ç–∞
 * POST /api/enhanced-assets/analyze
 */
router.post('/analyze', upload.single('image'), asyncHandler(async (req: Request, res: Response) => {
  const { description, style, assetType = 'sprite' } = req.body;
  const imageFile = req.file;
  
  if (!imageFile) {
    return res.status(400).json({
      success: false,
      error: 'Image file is required'
    });
  }

  try {
    logger.info(`üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—Å—Å–µ—Ç–∞: "${description || 'unnamed'}"`);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π AssetGenerationResult –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const assetResult = {
      type: 'image' as const,
      data: imageFile.buffer,
      metadata: {
        size: imageFile.size,
        format: path.extname(imageFile.originalname).substring(1),
        filename: imageFile.originalname
      }
    };
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø—É–±–ª–∏—á–Ω—ã–º)
    // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    const analysis = {
      fileSize: imageFile.size,
      format: path.extname(imageFile.originalname).substring(1),
      isOptimized: imageFile.size < 100 * 1024, // < 100KB —Å—á–∏—Ç–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
      recommendations: []
    };

    if (imageFile.size > 500 * 1024) {
      analysis.recommendations.push('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–∂–∞—Ç–∏–µ');
    }

    if (!['png', 'jpg', 'jpeg', 'webp'].includes(analysis.format.toLowerCase())) {
      analysis.recommendations.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PNG –∏–ª–∏ JPEG —Ñ–æ—Ä–º–∞—Ç');
    }

    res.json({
      success: true,
      data: {
        originalFile: {
          name: imageFile.originalname,
          size: imageFile.size,
          format: analysis.format
        },
        analysis,
        suggestions: analysis.recommendations
      }
    });
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—Å—Å–µ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to analyze asset',
      message: error.message
    });
  }
}));

export default router; 
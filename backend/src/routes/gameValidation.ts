import express from 'express';
import path from 'path';
import { YandexGamesValidator, ValidationResult } from '../services/gameValidation';
import { LoggerService } from '../services/logger';
import { rateLimitMiddleware } from '../middleware/rateLimiter';
import { validateRequest } from '../middleware/validation';

const router = express.Router();
const validator = new YandexGamesValidator();
const logger = new LoggerService();

/**
 * POST /api/validation/full
 * –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–≥—Ä—ã
 */
router.post('/full', 
  rateLimitMiddleware({ windowMs: 15 * 60 * 1000, max: 10 }), // 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 15 –º–∏–Ω—É—Ç
  validateRequest({
    body: {
      gameId: { type: 'string', required: true },
      gamePath: { type: 'string', required: true }
    }
  }),
  async (req, res) => {
    try {
      const { gameId, gamePath } = req.body;
      
      logger.info(`üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–≥—Ä—ã: ${gameId}`);
      const startTime = Date.now();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ –∏–≥—Ä–µ
      const resolvedPath = path.resolve(gamePath);
      if (!resolvedPath.startsWith(process.cwd())) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ –∏–≥—Ä–µ'
        });
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
      const result: ValidationResult = await validator.validateGame(resolvedPath);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      const report = validator.generateValidationReport(result);
      
      const duration = Date.now() - startTime;
      logger.info(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}ms. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.isValid ? 'PASSED' : 'FAILED'}`);

      res.json({
        success: true,
        data: {
          gameId,
          validation: result,
          report,
          timestamp: new Date().toISOString(),
          duration
        }
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–≥—Ä—ã',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }
);

/**
 * POST /api/validation/quick
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
 */
router.post('/quick',
  rateLimitMiddleware({ windowMs: 5 * 60 * 1000, max: 30 }), // 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 5 –º–∏–Ω—É—Ç
  validateRequest({
    body: {
      gameId: { type: 'string', required: true },
      gamePath: { type: 'string', required: true }
    }
  }),
  async (req, res) => {
    try {
      const { gameId, gamePath } = req.body;
      
      logger.info(`‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä—ã: ${gameId}`);
      const startTime = Date.now();

      const resolvedPath = path.resolve(gamePath);
      if (!resolvedPath.startsWith(process.cwd())) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ –∏–≥—Ä–µ'
        });
      }

      const isValid = await validator.quickValidation(resolvedPath);
      const duration = Date.now() - startTime;

      logger.info(`‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}ms. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${isValid ? 'PASSED' : 'FAILED'}`);

      res.json({
        success: true,
        data: {
          gameId,
          isValid,
          timestamp: new Date().toISOString(),
          duration
        }
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }
);

/**
 * POST /api/validation/structure
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
 */
router.post('/structure',
  rateLimitMiddleware({ windowMs: 5 * 60 * 1000, max: 50 }),
  validateRequest({
    body: {
      gameId: { type: 'string', required: true },
      gamePath: { type: 'string', required: true }
    }
  }),
  async (req, res) => {
    try {
      const { gameId, gamePath } = req.body;
      
      const resolvedPath = path.resolve(gamePath);
      if (!resolvedPath.startsWith(process.cwd())) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ –∏–≥—Ä–µ'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const result = await validator.validateGame(resolvedPath);
      
      res.json({
        success: true,
        data: {
          gameId,
          structure: result.structure,
          size: result.size,
          timestamp: new Date().toISOString()
        }
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }
);

/**
 * POST /api/validation/sdk
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Yandex SDK
 */
router.post('/sdk',
  rateLimitMiddleware({ windowMs: 5 * 60 * 1000, max: 50 }),
  validateRequest({
    body: {
      gameId: { type: 'string', required: true },
      gamePath: { type: 'string', required: true }
    }
  }),
  async (req, res) => {
    try {
      const { gameId, gamePath } = req.body;
      
      const resolvedPath = path.resolve(gamePath);
      if (!resolvedPath.startsWith(process.cwd())) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ –∏–≥—Ä–µ'
        });
      }

      const result = await validator.validateGame(resolvedPath);
      
      res.json({
        success: true,
        data: {
          gameId,
          sdk: result.sdk,
          timestamp: new Date().toISOString()
        }
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SDK:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SDK',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }
);

/**
 * POST /api/validation/performance
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
router.post('/performance',
  rateLimitMiddleware({ windowMs: 10 * 60 * 1000, max: 20 }),
  validateRequest({
    body: {
      gameId: { type: 'string', required: true },
      gamePath: { type: 'string', required: true }
    }
  }),
  async (req, res) => {
    try {
      const { gameId, gamePath } = req.body;
      
      const resolvedPath = path.resolve(gamePath);
      if (!resolvedPath.startsWith(process.cwd())) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ –∏–≥—Ä–µ'
        });
      }

      const result = await validator.validateGame(resolvedPath);
      
      res.json({
        success: true,
        data: {
          gameId,
          performance: result.performance,
          size: result.size,
          warnings: result.warnings.filter(w => w.category === 'performance'),
          timestamp: new Date().toISOString()
        }
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }
);

/**
 * GET /api/validation/requirements
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è Yandex Games
 */
router.get('/requirements', (req, res) => {
  const requirements = {
    critical: [
      {
        id: 'index_html',
        name: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π index.html',
        description: '–§–∞–π–ª index.html –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä–Ω–µ –∏–≥—Ä—ã',
        category: 'structure'
      },
      {
        id: 'size_limit',
        name: '–õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞',
        description: '–†–∞–∑–º–µ—Ä –∏–≥—Ä—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100MB',
        category: 'size'
      },
      {
        id: 'sdk_v2',
        name: 'Yandex Games SDK v2',
        description: '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK –≤–µ—Ä—Å–∏–∏ 2.0+',
        category: 'sdk'
      },
      {
        id: 'sdk_init',
        name: '–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
        description: 'SDK –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å YaGames.init()',
        category: 'sdk'
      },
      {
        id: 'language_detection',
        name: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞',
        description: '–ò–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ysdk.environment.i18n.lang',
        category: 'sdk'
      },
      {
        id: 'lifecycle_handling',
        name: '–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª',
        description: '–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–≥—Ä—ã',
        category: 'sdk'
      }
    ],
    recommended: [
      {
        id: 'interstitial_ads',
        name: '–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
        description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å interstitial —Ä–µ–∫–ª–∞–º–æ–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)',
        category: 'ads'
      },
      {
        id: 'rewarded_ads',
        name: '–†–µ–∫–ª–∞–º–∞ —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ–º',
        description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å rewarded video —Ä–µ–∫–ª–∞–º–æ–π',
        category: 'ads'
      },
      {
        id: 'sticky_banner',
        name: 'Sticky –±–∞–Ω–Ω–µ—Ä',
        description: '–ü–æ–∫–∞–∑ sticky –±–∞–Ω–Ω–µ—Ä–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏',
        category: 'ads'
      },
      {
        id: 'leaderboards',
        name: '–õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã',
        description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ysdk.getLeaderboards()',
        category: 'social'
      },
      {
        id: 'achievements',
        name: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
        description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ API –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
        category: 'social'
      },
      {
        id: 'mobile_support',
        name: '–ú–æ–±–∏–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        description: '–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
        category: 'accessibility'
      },
      {
        id: 'multi_language',
        name: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∏',
        description: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ, –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ —Ç—É—Ä–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–æ–≤',
        category: 'localization'
      }
    ],
    performance: [
      {
        id: 'asset_optimization',
        name: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞—Å—Å–µ—Ç–æ–≤',
        description: '–°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤',
        category: 'performance'
      },
      {
        id: 'code_minification',
        name: '–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞',
        description: '–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JavaScript –∏ CSS —Ñ–∞–π–ª–æ–≤',
        category: 'performance'
      },
      {
        id: 'loading_optimization',
        name: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏',
        description: '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
        category: 'performance'
      }
    ],
    security: [
      {
        id: 'csp_headers',
        name: 'Content Security Policy',
        description: '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ CSP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        category: 'security'
      },
      {
        id: 'safe_file_types',
        name: '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤',
        description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤',
        category: 'security'
      },
      {
        id: 'https_usage',
        name: 'HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
        description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
        category: 'security'
      }
    ]
  };

  res.json({
    success: true,
    data: requirements
  });
});

/**
 * GET /api/validation/limits
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
 */
router.get('/limits', (req, res) => {
  const limits = {
    size: {
      max: '100MB',
      recommended: '50MB',
      description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–≥—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏'
    },
    files: {
      maxCount: 1000,
      allowedTypes: [
        '.html', '.js', '.css', '.json',
        '.png', '.jpg', '.jpeg', '.webp', '.svg',
        '.wav', '.mp3', '.ogg', '.m4a',
        '.woff', '.woff2', '.ttf', '.otf'
      ],
      forbiddenNames: [
        'node_modules', '.git', '.env', 'config.json',
        'server.js', 'package.json', 'webpack.config.js'
      ]
    },
    performance: {
      maxLoadTime: '10s',
      targetFPS: '30+',
      maxMemory: '256MB'
    },
    ads: {
      interstitialLimit: 3,
      interstitialCooldown: '3min',
      rewardedCooldown: '30s'
    },
    structure: {
      requiredFiles: ['index.html'],
      recommendedStructure: {
        '/': '–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å index.html',
        '/assets/': '–ê—Å—Å–µ—Ç—ã –∏–≥—Ä—ã (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–≤—É–∫–∏)',
        '/js/': 'JavaScript —Ñ–∞–π–ª—ã',
        '/css/': 'CSS —Å—Ç–∏–ª–∏'
      }
    }
  };

  res.json({
    success: true,
    data: limits
  });
});

/**
 * POST /api/validation/batch
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
 */
router.post('/batch',
  rateLimitMiddleware({ windowMs: 30 * 60 * 1000, max: 5 }), // 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 30 –º–∏–Ω—É—Ç
  validateRequest({
    body: {
      games: { 
        type: 'array', 
        required: true,
        items: {
          gameId: { type: 'string', required: true },
          gamePath: { type: 'string', required: true }
        }
      }
    }
  }),
  async (req, res) => {
    try {
      const { games } = req.body;
      
      if (games.length > 10) {
        return res.status(400).json({
          success: false,
          error: '–ú–∞–∫—Å–∏–º—É–º 10 –∏–≥—Ä –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å'
        });
      }

      logger.info(`üîç –ù–∞—á–∞–ª–æ batch –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ${games.length} –∏–≥—Ä`);
      const startTime = Date.now();

      const results = [];
      for (const { gameId, gamePath } of games) {
        try {
          const resolvedPath = path.resolve(gamePath);
          if (!resolvedPath.startsWith(process.cwd())) {
            results.push({
              gameId,
              success: false,
              error: '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ –∏–≥—Ä–µ'
            });
            continue;
          }

          const result = await validator.validateGame(resolvedPath);
          results.push({
            gameId,
            success: true,
            validation: result,
            summary: {
              isValid: result.isValid,
              errorsCount: result.errors.length,
              warningsCount: result.warnings.length,
              size: result.size
            }
          });

        } catch (error) {
          results.push({
            gameId,
            success: false,
            error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
          });
        }
      }

      const duration = Date.now() - startTime;
      logger.info(`‚úÖ Batch –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}ms`);

      res.json({
        success: true,
        data: {
          results,
          summary: {
            total: games.length,
            passed: results.filter(r => r.success && r.validation?.isValid).length,
            failed: results.filter(r => !r.success || !r.validation?.isValid).length
          },
          timestamp: new Date().toISOString(),
          duration
        }
      });

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ batch –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ batch –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  }
);

/**
 * GET /api/validation/health
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
router.get('/health', (req, res) => {
  res.json({
    success: true,
    data: {
      service: 'Game Validation Service',
      status: 'healthy',
      version: '1.0.0',
      features: [
        'full-validation',
        'quick-validation', 
        'structure-check',
        'sdk-validation',
        'performance-check',
        'batch-validation'
      ],
      limits: {
        maxGameSize: '100MB',
        maxBatchSize: 10,
        supportedFileTypes: ['.html', '.js', '.css', '.png', '.jpg', '.wav', '.mp3']
      },
      timestamp: new Date().toISOString()
    }
  });
});

export default router; 
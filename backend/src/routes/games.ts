import { Router, Request, Response } from 'express';
import { body, param, query } from 'express-validator';
import { v4 as uuidv4 } from 'uuid';
import path from 'path';
import fs from 'fs/promises';
import { asyncHandler } from '@/middleware/errorHandler';
import { validateRequest } from '@/middleware/validation';
import { GameDAO } from '@/database';
import { QueueService } from '@/services/queue';
import { LoggerService } from '@/services/logger';
import { GamePromptForm, GenerationRequest } from '@/types';
import config from '@/config';

const router = Router();
const gameDAO = new GameDAO();
const queueService = new QueueService();
const logger = new LoggerService();

// POST /api/games - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
router.post(
  '/',
  [
    body('title')
      .notEmpty()
      .withMessage('–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
      .isLength({ min: 3, max: 100 })
      .withMessage('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'),
    
    body('genre')
      .notEmpty()
      .withMessage('–ñ–∞–Ω—Ä –∏–≥—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
      .isIn(['platformer', 'arcade', 'puzzle', 'rpg', 'strategy', 'shooter', 'racing', 'adventure'])
      .withMessage('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∂–∞–Ω—Ä –∏–≥—Ä—ã'),
    
    body('description')
      .notEmpty()
      .withMessage('–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
      .isLength({ min: 10, max: 1000 })
      .withMessage('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤'),
    
    body('artStyle')
      .optional()
      .isIn(['pixel art', 'cartoon', 'realistic', 'minimalist', 'fantasy'])
      .withMessage('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–∏'),
    
    body('targetAudience')
      .optional()
      .isIn(['children', 'teens', 'adults', 'family'])
      .withMessage('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è'),
    
    body('monetization')
      .optional()
      .isArray()
      .withMessage('–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'),
    
    body('options.quality')
      .optional()
      .isIn(['fast', 'balanced', 'high'])
      .withMessage('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'),
    
    body('options.optimization')
      .optional()
      .isIn(['size', 'performance'])
      .withMessage('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'),
  ],
  validateRequest,
  asyncHandler(async (req: Request, res: Response) => {
    const gameId = uuidv4();
    const prompt: GamePromptForm = req.body;
    const options = req.body.options || {};

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    const generationRequest: GenerationRequest = {
      id: gameId,
      prompt,
      options: {
        quality: options.quality || 'balanced',
        optimization: options.optimization || 'size',
        targetPlatform: 'yandex_games',
      },
      status: 'queued',
      createdAt: new Date(),
      updatedAt: new Date(),
      progress: 0,
      currentStep: '–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      logs: [],
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await gameDAO.createGame({
      id: gameId,
      title: prompt.title,
      description: prompt.description,
      prompt: JSON.stringify(prompt),
      gameDesign: null,
      status: 'queued',
      progress: 0,
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    await queueService.addGameGenerationJob(generationRequest);

    logger.info(`üéÆ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞: ${gameId} - "${prompt.title}"`);

    res.status(201).json({
      success: true,
      game: {
        id: gameId,
        title: prompt.title,
        description: prompt.description,
        status: 'queued',
        progress: 0,
        createdAt: generationRequest.createdAt,
      },
      message: '–ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
    });
  })
);

// GET /api/games - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
router.get(
  '/',
  [
    query('page')
      .optional()
      .isInt({ min: 1 })
      .withMessage('–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'),
    
    query('limit')
      .optional()
      .isInt({ min: 1, max: 100 })
      .withMessage('–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100'),
    
    query('status')
      .optional()
      .isIn(['queued', 'processing', 'completed', 'failed', 'cancelled'])
      .withMessage('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å'),
  ],
  validateRequest,
  asyncHandler(async (req: Request, res: Response) => {
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 20;
    const status = req.query.status as any;
    const offset = (page - 1) * limit;

    const { games, total } = await gameDAO.getGames(limit, offset, status);

    res.json({
      success: true,
      games: games.map(game => ({
        id: game.id,
        title: game.title,
        description: game.description,
        status: game.status,
        progress: game.progress,
        size: game.size,
        createdAt: game.createdAt,
        updatedAt: game.updatedAt,
        error: game.error,
      })),
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit),
      },
    });
  })
);

// GET /api/games/:id - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
router.get(
  '/:id',
  [
    param('id')
      .isUUID()
      .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–≥—Ä—ã'),
  ],
  validateRequest,
  asyncHandler(async (req: Request, res: Response) => {
    const gameId = req.params.id;
    
    try {
      const game = await gameDAO.getGameById(gameId);
      const logs = await gameDAO.getGameLogs(gameId);

      res.json({
        success: true,
        game: {
          id: game.id,
          title: game.title,
          description: game.description,
          prompt: JSON.parse(game.prompt),
          gameDesign: game.gameDesign ? JSON.parse(game.gameDesign) : null,
          status: game.status,
          progress: game.progress,
          size: game.size,
          filePath: game.filePath,
          error: game.error,
          createdAt: game.createdAt,
          updatedAt: game.updatedAt,
          logs: logs.slice(-50), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ª–æ–≥–æ–≤
        },
      });
    } catch (error) {
      res.status(404).json({
        success: false,
        error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      });
    }
  })
);

// GET /api/games/:id/status - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
router.get(
  '/:id/status',
  [
    param('id')
      .isUUID()
      .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–≥—Ä—ã'),
  ],
  validateRequest,
  asyncHandler(async (req: Request, res: Response) => {
    const gameId = req.params.id;
    
    try {
      const game = await gameDAO.getGameById(gameId);
      const queueStatus = await queueService.getJobStatus(gameId);

      res.json({
        success: true,
        status: {
          id: gameId,
          status: game.status,
          progress: game.progress,
          currentStep: queueStatus?.logs?.slice(-1)[0] || '–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
          estimatedTime: queueStatus ? Math.max(0, Date.now() - queueStatus.createdAt.getTime()) : null,
          logs: queueStatus?.logs || [],
          error: game.error,
        },
      });
    } catch (error) {
      res.status(404).json({
        success: false,
        error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      });
    }
  })
);

// GET /api/games/:id/download - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–π –∏–≥—Ä—ã
router.get(
  '/:id/download',
  [
    param('id')
      .isUUID()
      .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–≥—Ä—ã'),
  ],
  validateRequest,
  asyncHandler(async (req: Request, res: Response) => {
    const gameId = req.params.id;
    
    try {
      const game = await gameDAO.getGameById(gameId);
      
      if (game.status !== 'completed') {
        return res.status(400).json({
          success: false,
          error: '–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è',
        });
      }
      
      if (!game.filePath) {
        return res.status(404).json({
          success: false,
          error: '–§–∞–π–ª –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω',
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      try {
        await fs.access(game.filePath);
      } catch {
        return res.status(404).json({
          success: false,
          error: '–§–∞–π–ª –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ',
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      const fileName = `${game.title.replace(/[^a-zA-Z0-9–∞-—è—ë\s]/gi, '')}_${gameId.slice(0, 8)}.zip`;
      
      res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
      res.setHeader('Content-Type', 'application/zip');
      
      res.download(game.filePath, fileName);
      
      logger.info(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: ${gameId} - "${game.title}"`);
      
    } catch (error) {
      res.status(404).json({
        success: false,
        error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      });
    }
  })
);

// DELETE /api/games/:id - –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
router.delete(
  '/:id',
  [
    param('id')
      .isUUID()
      .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–≥—Ä—ã'),
  ],
  validateRequest,
  asyncHandler(async (req: Request, res: Response) => {
    const gameId = req.params.id;
    
    try {
      const game = await gameDAO.getGameById(gameId);
      
      // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
      if (game.status === 'queued' || game.status === 'processing') {
        await queueService.cancelJob(gameId);
      }
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–≥—Ä—ã –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (game.filePath) {
        try {
          await fs.unlink(game.filePath);
        } catch (error) {
          logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–≥—Ä—ã ${game.filePath}:`, error);
        }
      }
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await gameDAO.deleteGame(gameId);
      
      logger.info(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∏–≥—Ä–∞: ${gameId} - "${game.title}"`);
      
      res.json({
        success: true,
        message: '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
      });
      
    } catch (error) {
      res.status(404).json({
        success: false,
        error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      });
    }
  })
);

// POST /api/games/:id/cancel - –û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã
router.post(
  '/:id/cancel',
  [
    param('id')
      .isUUID()
      .withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–≥—Ä—ã'),
  ],
  validateRequest,
  asyncHandler(async (req: Request, res: Response) => {
    const gameId = req.params.id;
    
    try {
      const game = await gameDAO.getGameById(gameId);
      
      if (game.status !== 'queued' && game.status !== 'processing') {
        return res.status(400).json({
          success: false,
          error: '–ò–≥—Ä—É –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
        });
      }
      
      // –û—Ç–º–µ–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏
      const cancelled = await queueService.cancelJob(gameId);
      
      if (cancelled) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await gameDAO.updateGame(gameId, {
          status: 'cancelled',
          error: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
        });
        
        logger.info(`‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä—ã: ${gameId} - "${game.title}"`);
        
        res.json({
          success: true,
          message: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–∞',
        });
      } else {
        res.status(400).json({
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–≥—Ä—ã',
        });
      }
      
    } catch (error) {
      res.status(404).json({
        success: false,
        error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      });
    }
  })
);

export default router; 
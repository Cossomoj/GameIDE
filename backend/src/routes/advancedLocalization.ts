import express from 'express';
import { AdvancedLocalizationService } from '@/services/advancedLocalization';
import { LoggerService } from '@/services/logger';
import { rateLimit } from '@/middleware/validation';

const router = express.Router();
const logger = new LoggerService();
const localizationService = new AdvancedLocalizationService();

/**
 * POST /api/advanced-localization/auto-detect
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post('/auto-detect', rateLimit(20, 60 * 1000), async (req, res) => {
  try {
    const { region, browserLanguage, yandexLanguage, userAgent } = req.body;

    logger.info('üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞:', { region, browserLanguage, yandexLanguage });

    const detectedLanguage = await localizationService.autoDetectLanguage({
      region,
      browserLanguage,
      yandexLanguage
    });

    const languageData = localizationService.getSupportedLanguages()
      .find(lang => lang.code === detectedLanguage);

    res.json({
      success: true,
      detectedLanguage,
      languageData: languageData ? {
        code: languageData.code,
        name: languageData.name,
        nativeName: languageData.nativeName,
        flag: languageData.flag,
        region: languageData.region
      } : null,
      timestamp: new Date().toISOString()
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * POST /api/advanced-localization/set-language
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
 */
router.post('/set-language', rateLimit(30, 60 * 1000), async (req, res) => {
  try {
    const { languageCode } = req.body;

    if (!languageCode) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è languageCode'
      });
    }

    const success = await localizationService.setLanguage(languageCode);

    if (!success) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫'
      });
    }

    const currentLanguage = localizationService.getCurrentLanguage();
    const supportedLanguages = localizationService.getSupportedLanguages();
    const languageData = supportedLanguages.find(lang => lang.code === currentLanguage);

    res.json({
      success: true,
      currentLanguage,
      languageData: languageData ? {
        code: languageData.code,
        name: languageData.name,
        nativeName: languageData.nativeName,
        flag: languageData.flag,
        loadStatus: languageData.loadStatus
      } : null,
      message: `–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${currentLanguage}`
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * POST /api/advanced-localization/translate
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
 */
router.post('/translate', rateLimit(100, 60 * 1000), async (req, res) => {
  try {
    const { 
      key, 
      context, 
      count, 
      gender, 
      interpolation, 
      namespace, 
      fallback 
    } = req.body;

    if (!key) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è key –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞'
      });
    }

    const translation = localizationService.translate(key, {
      context,
      count,
      gender,
      interpolation,
      namespace,
      fallback
    });

    res.json({
      success: true,
      key,
      translation,
      options: {
        context,
        count,
        gender,
        namespace
      },
      languageCode: localizationService.getCurrentLanguage()
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞'
    });
  }
});

/**
 * POST /api/advanced-localization/translate-batch
 * –ü–∞–∫–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π
 */
router.post('/translate-batch', rateLimit(50, 60 * 1000), async (req, res) => {
  try {
    const { keys, globalOptions } = req.body;

    if (!Array.isArray(keys) || keys.length === 0) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ keys'
      });
    }

    if (keys.length > 100) {
      return res.status(400).json({
        success: false,
        error: '–ú–∞–∫—Å–∏–º—É–º 100 –∫–ª—é—á–µ–π –∑–∞ –∑–∞–ø—Ä–æ—Å'
      });
    }

    const translations: { [key: string]: string } = {};

    for (const keyData of keys) {
      const keyStr = typeof keyData === 'string' ? keyData : keyData.key;
      const options = typeof keyData === 'object' ? { ...globalOptions, ...keyData } : globalOptions;
      
      translations[keyStr] = localizationService.translate(keyStr, options);
    }

    res.json({
      success: true,
      translations,
      count: Object.keys(translations).length,
      languageCode: localizationService.getCurrentLanguage()
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞'
    });
  }
});

/**
 * POST /api/advanced-localization/format-number
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–∫–∞–ª–∏
 */
router.post('/format-number', rateLimit(100, 60 * 1000), async (req, res) => {
  try {
    const { number, style, minimumFractionDigits, maximumFractionDigits } = req.body;

    if (typeof number !== 'number') {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —á–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      });
    }

    const formattedNumber = localizationService.formatNumber(number, {
      style,
      minimumFractionDigits,
      maximumFractionDigits
    });

    res.json({
      success: true,
      original: number,
      formatted: formattedNumber,
      options: { style, minimumFractionDigits, maximumFractionDigits },
      languageCode: localizationService.getCurrentLanguage()
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞'
    });
  }
});

/**
 * POST /api/advanced-localization/format-date
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ª–æ–∫–∞–ª–∏
 */
router.post('/format-date', rateLimit(100, 60 * 1000), async (req, res) => {
  try {
    const { date, format } = req.body;

    if (!date) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      });
    }

    const dateObj = new Date(date);
    if (isNaN(dateObj.getTime())) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞'
      });
    }

    const formattedDate = localizationService.formatDate(dateObj, format);

    res.json({
      success: true,
      original: date,
      formatted: formattedDate,
      format,
      languageCode: localizationService.getCurrentLanguage()
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã'
    });
  }
});

/**
 * GET /api/advanced-localization/languages
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
 */
router.get('/languages', async (req, res) => {
  try {
    const languages = localizationService.getSupportedLanguages().map(lang => ({
      code: lang.code,
      name: lang.name,
      nativeName: lang.nativeName,
      flag: lang.flag,
      region: lang.region,
      rtl: lang.rtl,
      loadStatus: lang.loadStatus,
      lastUpdated: lang.lastUpdated
    }));

    const currentLanguage = localizationService.getCurrentLanguage();

    res.json({
      success: true,
      languages,
      currentLanguage,
      total: languages.length,
      loaded: languages.filter(l => l.loadStatus === 'loaded').length
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤'
    });
  }
});

/**
 * GET /api/advanced-localization/regions
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ Yandex
 */
router.get('/regions', async (req, res) => {
  try {
    const regions = localizationService.getYandexRegions();

    res.json({
      success: true,
      regions,
      total: regions.length,
      description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–≥–∏–æ–Ω—ã Yandex Games'
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤'
    });
  }
});

/**
 * GET /api/advanced-localization/stats
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 */
router.get('/stats', async (req, res) => {
  try {
    const stats = localizationService.getLocalizationStats();

    res.json({
      success: true,
      stats,
      timestamp: new Date().toISOString()
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

/**
 * GET /api/advanced-localization/export/:languageCode
 * –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
 */
router.get('/export/:languageCode', rateLimit(5, 60 * 1000), async (req, res) => {
  try {
    const { languageCode } = req.params;
    const { format = 'json' } = req.query as { format?: 'json' | 'csv' | 'xlsx' };

    if (!languageCode) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è languageCode'
      });
    }

    const exportedData = await localizationService.exportTranslations(languageCode, format);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const contentTypes = {
      json: 'application/json',
      csv: 'text/csv',
      xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    };

    const extensions = {
      json: 'json',
      csv: 'csv', 
      xlsx: 'xlsx'
    };

    res.setHeader('Content-Type', contentTypes[format]);
    res.setHeader(
      'Content-Disposition', 
      `attachment; filename="translations_${languageCode}.${extensions[format]}"`
    );

    res.send(exportedData);

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤'
    });
  }
});

/**
 * PUT /api/advanced-localization/settings
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 */
router.put('/settings', rateLimit(10, 60 * 1000), async (req, res) => {
  try {
    const settings = req.body;

    if (!settings || typeof settings !== 'object') {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
      });
    }

    localizationService.updateSettings(settings);
    const updatedSettings = localizationService.getSettings();

    res.json({
      success: true,
      settings: updatedSettings,
      message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫'
    });
  }
});

/**
 * GET /api/advanced-localization/settings
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 */
router.get('/settings', async (req, res) => {
  try {
    const settings = localizationService.getSettings();

    res.json({
      success: true,
      settings,
      description: {
        autoDetectLanguage: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        fallbackChain: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —è–∑—ã–∫–æ–≤',
        enableContextualTranslations: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
        enableDynamicLoading: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
        cacheTranslations: '–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
        translateNumbers: '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª',
        translateDates: '–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç'
      }
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫'
    });
  }
});

/**
 * WebSocket —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 */
localizationService.on('language:detected', (data) => {
  logger.info('üéØ –Ø–∑—ã–∫ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω:', data);
});

localizationService.on('language:changed', (data) => {
  logger.info('üîÑ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω:', data);
});

localizationService.on('language:loaded', (data) => {
  logger.info('üì• –ü–µ—Ä–µ–≤–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
});

localizationService.on('language:error', (data) => {
  logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–∞:', data);
});

localizationService.on('settings:updated', (settings) => {
  logger.info('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', settings);
});

export default router; 
import express from 'express';
import path from 'path';
import { GameSizeController } from '@/services/gameSizeController';
import { LoggerService } from '@/services/logger';
import { rateLimit } from '@/middleware/validation';

const router = express.Router();
const logger = new LoggerService();
const sizeController = new GameSizeController();

/**
 * POST /api/game-size/analyze
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–≥—Ä—ã
 */
router.post('/analyze', rateLimit(10, 60 * 1000), async (req, res) => {
  try {
    const { gameDir, gameId } = req.body;

    if (!gameDir || !gameId) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è gameDir –∏ gameId'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –±–µ–∑–æ–ø–∞—Å–µ–Ω (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞)
    const safePath = path.resolve(gameDir);
    const projectRoot = path.resolve(process.cwd());
    
    if (!safePath.startsWith(projectRoot)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å –∫ –∏–≥—Ä–µ'
      });
    }

    logger.info(`üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä—ã ${gameId}: ${gameDir}`);

    const report = await sizeController.analyzeGameSize(gameDir, gameId);

    res.json({
      success: true,
      report,
      timestamp: new Date().toISOString()
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä—ã:', error);
    
    if (error.code === 'ENOENT') {
      res.status(404).json({
        success: false,
        error: '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    } else {
      res.status(500).json({
        success: false,
        error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      });
    }
  }
});

/**
 * POST /api/game-size/optimize
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
 */
router.post('/optimize', rateLimit(3, 60 * 60 * 1000), async (req, res) => {
  try {
    const { gameDir, options } = req.body;

    if (!gameDir) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è gameDir'
      });
    }

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const optimizationOptions = {
      compressImages: true,
      minifyCode: true,
      optimizeAudio: true,
      removeUnused: false,
      ...options
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
    const safePath = path.resolve(gameDir);
    const projectRoot = path.resolve(process.cwd());
    
    if (!safePath.startsWith(projectRoot)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å –∫ –∏–≥—Ä–µ'
      });
    }

    logger.info(`üîß –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã: ${gameDir}`, optimizationOptions);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSE –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    res.writeHead(200, {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
      'Access-Control-Allow-Origin': '*'
    });

    const sendProgress = (step: string, progress: number) => {
      res.write(`data: ${JSON.stringify({
        type: 'progress',
        step,
        progress,
        timestamp: new Date().toISOString()
      })}\n\n`);
    };

    const sendComplete = (result: any) => {
      res.write(`data: ${JSON.stringify({
        type: 'complete',
        result,
        timestamp: new Date().toISOString()
      })}\n\n`);
      res.end();
    };

    const sendError = (error: string) => {
      res.write(`data: ${JSON.stringify({
        type: 'error',
        error,
        timestamp: new Date().toISOString()
      })}\n\n`);
      res.end();
    };

    try {
      sendProgress('–ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏', 0);
      
      const result = await sizeController.autoOptimize(gameDir, optimizationOptions);
      
      sendProgress('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 100);
      sendComplete(result);
      
    } catch (error: any) {
      logger.error('–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
      sendError(error.message);
    }

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –≤ /api/game-size/optimize:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * GET /api/game-size/limits
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã —Ä–∞–∑–º–µ—Ä–∞
 */
router.get('/limits', async (req, res) => {
  try {
    const limits = sizeController.getLimits();
    
    res.json({
      success: true,
      limits,
      platform: 'Yandex Games',
      description: {
        max: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–≥—Ä—ã',
        target: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä',
        warning: '–†–∞–∑–º–µ—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è'
      }
    });
  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * PUT /api/game-size/limits
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç—ã —Ä–∞–∑–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
 */
router.put('/limits', rateLimit(5, 60 * 60 * 1000), async (req, res) => {
  try {
    const { max, target, warning } = req.body;
    
    const newLimits: any = {};
    
    if (max !== undefined) {
      if (typeof max !== 'number' || max <= 0) {
        return res.status(400).json({
          success: false,
          error: 'max –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'
        });
      }
      newLimits.max = max;
    }
    
    if (target !== undefined) {
      if (typeof target !== 'number' || target <= 0) {
        return res.status(400).json({
          success: false,
          error: 'target –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'
        });
      }
      newLimits.target = target;
    }
    
    if (warning !== undefined) {
      if (typeof warning !== 'number' || warning <= 0) {
        return res.status(400).json({
          success: false,
          error: 'warning –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'
        });
      }
      newLimits.warning = warning;
    }

    if (Object.keys(newLimits).length === 0) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
      });
    }

    sizeController.updateLimits(newLimits);
    const updatedLimits = sizeController.getLimits();
    
    logger.info('üìè –õ–∏–º–∏—Ç—ã —Ä–∞–∑–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', updatedLimits);
    
    res.json({
      success: true,
      limits: updatedLimits,
      message: '–õ–∏–º–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * GET /api/game-size/recommendations/:genre
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
 */
router.get('/recommendations/:genre', async (req, res) => {
  try {
    const { genre } = req.params;
    
    if (!genre) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è genre'
      });
    }

    const recommendations = sizeController.getGenreSpecificRecommendations(genre);
    
    res.json({
      success: true,
      genre,
      recommendations,
      count: recommendations.length
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * POST /api/game-size/monitor/start
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä—ã
 */
router.post('/monitor/start', rateLimit(5, 60 * 1000), async (req, res) => {
  try {
    const { gameDir, intervalMs } = req.body;

    if (!gameDir) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è gameDir'
      });
    }

    const interval = intervalMs || 30000; // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (interval < 10000) {
      return res.status(400).json({
        success: false,
        error: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: 10 —Å–µ–∫—É–Ω–¥'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
    const safePath = path.resolve(gameDir);
    const projectRoot = path.resolve(process.cwd());
    
    if (!safePath.startsWith(projectRoot)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å –∫ –∏–≥—Ä–µ'
      });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
    sizeController.startSizeMonitoring(gameDir, interval);
    
    logger.info(`üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω –¥–ª—è ${gameDir} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${interval}ms`);
    
    res.json({
      success: true,
      message: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω',
      gameDir,
      intervalMs: interval
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * POST /api/game-size/export-report
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–º–µ—Ä–µ –≤ —Ñ–∞–π–ª
 */
router.post('/export-report', rateLimit(10, 60 * 1000), async (req, res) => {
  try {
    const { report, outputPath } = req.body;

    if (!report || !outputPath) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É—é—Ç—Å—è report –∏ outputPath'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø—É—Ç–∏
    const safePath = path.resolve(outputPath);
    const projectRoot = path.resolve(process.cwd());
    
    if (!safePath.startsWith(projectRoot)) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
      });
    }

    await sizeController.exportReport(report, outputPath);
    
    res.json({
      success: true,
      message: '–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω',
      outputPath
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * GET /api/game-size/compliance-check/:size
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ª–∏–º–∏—Ç–∞–º
 */
router.get('/compliance-check/:size', async (req, res) => {
  try {
    const sizeBytes = parseInt(req.params.size);
    
    if (isNaN(sizeBytes) || sizeBytes < 0) {
      return res.status(400).json({
        success: false,
        error: '–†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'
      });
    }

    const limits = sizeController.getLimits();
    
    const compliance = {
      withinLimit: sizeBytes <= limits.max,
      exceedsBy: Math.max(0, sizeBytes - limits.max),
      status: sizeBytes <= limits.target ? 'optimal' : 
              sizeBytes <= limits.warning ? 'acceptable' :
              sizeBytes <= limits.max ? 'warning' : 'exceeded',
      percentage: (sizeBytes / limits.max) * 100
    };

    res.json({
      success: true,
      sizeBytes,
      sizeMB: (sizeBytes / (1024 * 1024)).toFixed(2),
      compliance,
      limits
    });

  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

/**
 * WebSocket —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ä–∞
 */
sizeController.on('size:analyzed', (report) => {
  logger.info(`üìä –†–∞–∑–º–µ—Ä –∏–≥—Ä—ã ${report.gameId}: ${(report.totalSize / (1024 * 1024)).toFixed(2)}MB`);
});

sizeController.on('size:warning', (report) => {
  logger.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—Ä–µ –∏–≥—Ä—ã ${report.gameId}: ${(report.totalSize / (1024 * 1024)).toFixed(2)}MB`);
});

sizeController.on('size:limit_exceeded', (report) => {
  logger.error(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä—ã ${report.gameId}: ${(report.totalSize / (1024 * 1024)).toFixed(2)}MB`);
});

sizeController.on('optimization:completed', (result) => {
  const savingsPercent = ((result.savings / result.originalSize) * 100).toFixed(1);
  logger.info(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ ${savingsPercent}%`);
});

export default router; 
# GameIDE Development Makefile
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ make help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥

.PHONY: help start stop restart build clean logs status test install deps backup restore

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
COMPOSE_FILE := docker-compose.yml
COMPOSE_PROD_FILE := docker-compose.prod.yml
PROJECT_NAME := gameide

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "${GREEN}GameIDE Development Commands:${NC}"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  ${YELLOW}%-20s${NC} %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "${GREEN}–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:${NC}"
	@echo "  make start     # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
	@echo "  make logs      # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
	@echo "  make test      # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
	@echo "  make clean     # –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"

start: ## üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞)
	@echo "${GREEN}–ó–∞–ø—É—Å–∫ GameIDE...${NC}"
	@if [ ! -f .env ]; then \
		echo "${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ .env.example...${NC}"; \
		cp .env.example .env; \
	fi
	@echo "${GREEN}–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
	docker-compose -f $(COMPOSE_FILE) up --build -d
	@echo "${GREEN}–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
	@sleep 10
	@make status
	@echo ""
	@echo "${GREEN}‚úÖ GameIDE –∑–∞–ø—É—â–µ–Ω!${NC}"
	@echo "${YELLOW}Frontend:${NC} http://localhost:3000"
	@echo "${YELLOW}Backend API:${NC} http://localhost:3001"
	@echo "${YELLOW}Nginx:${NC} http://localhost:80"
	@echo ""
	@echo "${YELLOW}–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:${NC} make logs"
	@echo "${YELLOW}–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:${NC} make stop"

stop: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "${RED}–û—Å—Ç–∞–Ω–æ–≤–∫–∞ GameIDE...${NC}"
	docker-compose -f $(COMPOSE_FILE) down
	@echo "${GREEN}‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"

restart: ## üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "${YELLOW}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ GameIDE...${NC}"
	@make stop
	@make start

build: ## üî® –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã
	@echo "${GREEN}–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤...${NC}"
	docker-compose -f $(COMPOSE_FILE) build --no-cache
	@echo "${GREEN}‚úÖ –û–±—Ä–∞–∑—ã –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã${NC}"

rebuild: ## üî® –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å
	@make stop
	@make build
	@make start

logs: ## üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	docker-compose -f $(COMPOSE_FILE) logs -f --tail=100

logs-backend: ## üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ backend
	docker-compose -f $(COMPOSE_FILE) logs -f --tail=100 backend

logs-frontend: ## üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ frontend
	docker-compose -f $(COMPOSE_FILE) logs -f --tail=100 frontend

logs-db: ## üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
	docker-compose -f $(COMPOSE_FILE) logs -f --tail=100 postgres redis mongodb

status: ## üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "${GREEN}–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
	@docker-compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "${GREEN}Health checks:${NC}"
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep gameide || echo "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

health: ## üè• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "${GREEN}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
	@echo -n "${YELLOW}PostgreSQL:${NC} "
	@curl -s -o /dev/null -w "%{http_code}" http://localhost:5432 > /dev/null && echo "${GREEN}OK${NC}" || echo "${RED}ERROR${NC}"
	@echo -n "${YELLOW}Redis:${NC} "
	@docker exec gameide-redis redis-cli ping > /dev/null 2>&1 && echo "${GREEN}OK${NC}" || echo "${RED}ERROR${NC}"
	@echo -n "${YELLOW}Backend API:${NC} "
	@curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/health | grep -q "200" && echo "${GREEN}OK${NC}" || echo "${RED}ERROR${NC}"
	@echo -n "${YELLOW}Frontend:${NC} "
	@curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200" && echo "${GREEN}OK${NC}" || echo "${RED}ERROR${NC}"

install: ## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "${GREEN}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
	@if [ -d "backend" ]; then \
		echo "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"; \
		cd backend && npm install; \
	fi
	@if [ -d "frontend" ]; then \
		echo "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"; \
		cd frontend && npm install; \
	fi
	@echo "${GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"

deps: install ## –ê–ª–∏–∞—Å –¥–ª—è install

test: ## üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	@echo "${GREEN}–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...${NC}"
	@if [ -d "backend" ]; then \
		echo "${YELLOW}Backend —Ç–µ—Å—Ç—ã:${NC}"; \
		cd backend && npm test; \
	fi
	@if [ -d "frontend" ]; then \
		echo "${YELLOW}Frontend —Ç–µ—Å—Ç—ã:${NC}"; \
		cd frontend && npm test -- --watchAll=false; \
	fi

test-backend: ## üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ backend —Ç–µ—Å—Ç—ã
	@if [ -d "backend" ]; then \
		echo "${GREEN}–ó–∞–ø—É—Å–∫ backend —Ç–µ—Å—Ç–æ–≤...${NC}"; \
		cd backend && npm test; \
	fi

test-frontend: ## üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ frontend —Ç–µ—Å—Ç—ã
	@if [ -d "frontend" ]; then \
		echo "${GREEN}–ó–∞–ø—É—Å–∫ frontend —Ç–µ—Å—Ç–æ–≤...${NC}"; \
		cd frontend && npm test -- --watchAll=false; \
	fi

lint: ## üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º
	@echo "${GREEN}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...${NC}"
	@if [ -d "backend" ]; then \
		echo "${YELLOW}Backend lint:${NC}"; \
		cd backend && npm run lint; \
	fi
	@if [ -d "frontend" ]; then \
		echo "${YELLOW}Frontend lint:${NC}"; \
		cd frontend && npm run lint; \
	fi

format: ## ‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	@echo "${GREEN}–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...${NC}"
	@if [ -d "backend" ]; then \
		echo "${YELLOW}Backend format:${NC}"; \
		cd backend && npm run format; \
	fi
	@if [ -d "frontend" ]; then \
		echo "${YELLOW}Frontend format:${NC}"; \
		cd frontend && npm run format; \
	fi

clean: ## üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "${RED}–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...${NC}"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ! (y/N): " confirm && [ "$$confirm" = "y" ]
	docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans
	docker system prune -f
	docker volume prune -f
	@echo "${GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"

clean-soft: ## üßπ –ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
	@echo "${YELLOW}–ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞...${NC}"
	docker-compose -f $(COMPOSE_FILE) down --remove-orphans
	docker system prune -f
	@echo "${GREEN}‚úÖ –ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"

backup: ## üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
	@echo "${GREEN}–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...${NC}"
	@mkdir -p backups
	@timestamp=$$(date +%Y%m%d_%H%M%S); \
	echo "${YELLOW}Backup PostgreSQL...${NC}"; \
	docker exec gameide-postgres pg_dump -U gameide_user gameide_dev > backups/postgres_$$timestamp.sql; \
	echo "${YELLOW}Backup Redis...${NC}"; \
	docker exec gameide-redis redis-cli SAVE; \
	docker cp gameide-redis:/data/dump.rdb backups/redis_$$timestamp.rdb; \
	echo "${YELLOW}Backup MongoDB...${NC}"; \
	docker exec gameide-mongodb mongodump --db gameide_analytics --archive > backups/mongodb_$$timestamp.archive; \
	echo "${GREEN}‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ backups/$$timestamp${NC}"

restore: ## üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
	@echo "${RED}–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...${NC}"
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ backup —Ñ–∞–π–ª—ã:"
	@ls -la backups/ 2>/dev/null || echo "–ù–µ—Ç backup —Ñ–∞–π–ª–æ–≤"
	@read -p "–í–≤–µ–¥–∏—Ç–µ timestamp –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (YYYYMMDD_HHMMSS): " timestamp; \
	if [ -f "backups/postgres_$$timestamp.sql" ]; then \
		echo "${YELLOW}–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ PostgreSQL...${NC}"; \
		docker exec -i gameide-postgres psql -U gameide_user -d gameide_dev < backups/postgres_$$timestamp.sql; \
	fi; \
	if [ -f "backups/redis_$$timestamp.rdb" ]; then \
		echo "${YELLOW}–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Redis...${NC}"; \
		docker cp backups/redis_$$timestamp.rdb gameide-redis:/data/dump.rdb; \
		docker restart gameide-redis; \
	fi; \
	if [ -f "backups/mongodb_$$timestamp.archive" ]; then \
		echo "${YELLOW}–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ MongoDB...${NC}"; \
		docker exec -i gameide-mongodb mongorestore --db gameide_analytics --archive < backups/mongodb_$$timestamp.archive; \
	fi; \
	echo "${GREEN}‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ${NC}"

shell-backend: ## üêö –û—Ç–∫—Ä—ã—Ç—å shell –≤ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	docker exec -it gameide-backend /bin/sh

shell-frontend: ## üêö –û—Ç–∫—Ä—ã—Ç—å shell –≤ frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	docker exec -it gameide-frontend /bin/sh

shell-db: ## üêö –û—Ç–∫—Ä—ã—Ç—å PostgreSQL shell
	docker exec -it gameide-postgres psql -U gameide_user -d gameide_dev

shell-redis: ## üêö –û—Ç–∫—Ä—ã—Ç—å Redis CLI
	docker exec -it gameide-redis redis-cli

shell-mongo: ## üêö –û—Ç–∫—Ä—ã—Ç—å MongoDB shell
	docker exec -it gameide-mongodb mongosh gameide_analytics

# Production –∫–æ–º–∞–Ω–¥—ã
prod-start: ## üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å production –≤–µ—Ä—Å–∏—é
	@echo "${GREEN}–ó–∞–ø—É—Å–∫ production –≤–µ—Ä—Å–∏–∏...${NC}"
	@if [ ! -f .env.prod ]; then \
		echo "${RED}–§–∞–π–ª .env.prod –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.prod.example${NC}"; \
		exit 1; \
	fi
	chmod +x scripts/deploy.sh
	./scripts/deploy.sh deploy

prod-stop: ## üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production –≤–µ—Ä—Å–∏—é
	docker-compose -f $(COMPOSE_PROD_FILE) down

prod-logs: ## üìã –õ–æ–≥–∏ production –≤–µ—Ä—Å–∏–∏
	docker-compose -f $(COMPOSE_PROD_FILE) logs -f

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
monitor: ## üìä –û—Ç–∫—Ä—ã—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Grafana)
	@echo "${GREEN}–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å–∞–º:${NC}"
	@echo "${YELLOW}Grafana:${NC} http://localhost:3000"
	@echo "${YELLOW}Prometheus:${NC} http://localhost:9090"
	@echo "${YELLOW}Application:${NC} http://localhost"

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
deploy: ## üöÄ –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
	@echo "${GREEN}–ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ GameIDE...${NC}"
	@make install
	@make start
	@echo "${GREEN}‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
info: ## ‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
	@echo "${GREEN}GameIDE System Information:${NC}"
	@echo "${YELLOW}Docker Version:${NC}"
	@docker --version
	@echo "${YELLOW}Docker Compose Version:${NC}"
	@docker-compose --version
	@echo "${YELLOW}–î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ:${NC}"
	@df -h . | tail -1
	@echo "${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:${NC}"
	@free -h 2>/dev/null || echo "N/A (not Linux)"
	@echo "${YELLOW}–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ GameIDE –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
	@docker ps --filter "name=gameide" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
up: start ## –ê–ª–∏–∞—Å –¥–ª—è start
down: stop ## –ê–ª–∏–∞—Å –¥–ª—è stop
ps: status ## –ê–ª–∏–∞—Å –¥–ª—è status

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check: ## ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
	@echo "${GREEN}–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
	@command -v docker >/dev/null 2>&1 || { echo "${RED}Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${NC}"; exit 1; }
	@command -v docker-compose >/dev/null 2>&1 || docker compose version >/dev/null 2>&1 || { echo "${RED}Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${NC}"; exit 1; }
	@docker info >/dev/null 2>&1 || { echo "${RED}Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!${NC}"; exit 1; }
	@echo "${GREEN}‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ${NC}"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
install-deps: ## üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∏ Docker Compose –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	@echo "${GREEN}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
	@OS="$$(uname -s)"; \
	case $$OS in \
		Darwin*) \
			echo "${YELLOW}macOS –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞${NC}"; \
			if command -v brew >/dev/null 2>&1; then \
				echo "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Homebrew...${NC}"; \
				if ! command -v docker >/dev/null 2>&1; then \
					echo "${YELLOW}–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker...${NC}"; \
					brew install --cask docker; \
				fi; \
				if ! command -v docker-compose >/dev/null 2>&1; then \
					echo "${YELLOW}–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose...${NC}"; \
					brew install docker-compose; \
				fi; \
			else \
				echo "${RED}Homebrew –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ Homebrew:${NC}"; \
				echo "/bin/bash -c \"$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""; \
				exit 1; \
			fi; \
			;; \
		Linux*) \
			echo "${YELLOW}Linux –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞${NC}"; \
			if ! command -v docker >/dev/null 2>&1; then \
				echo "${YELLOW}–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker...${NC}"; \
				curl -fsSL https://get.docker.com -o get-docker.sh; \
				sudo sh get-docker.sh; \
				rm get-docker.sh; \
				sudo usermod -aG docker $$USER; \
				sudo systemctl enable docker; \
				sudo systemctl start docker; \
			fi; \
			if ! command -v docker-compose >/dev/null 2>&1 && ! docker compose version >/dev/null 2>&1; then \
				echo "${YELLOW}–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose...${NC}"; \
				COMPOSE_VERSION=$$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4); \
				ARCH=$$(uname -m); \
				case $$ARCH in \
					x86_64) COMPOSE_ARCH="x86_64" ;; \
					aarch64|arm64) COMPOSE_ARCH="aarch64" ;; \
					*) echo "${RED}–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $$ARCH${NC}"; exit 1 ;; \
				esac; \
				curl -L "https://github.com/docker/compose/releases/download/$$COMPOSE_VERSION/docker-compose-linux-$$COMPOSE_ARCH" -o /tmp/docker-compose; \
				sudo mv /tmp/docker-compose /usr/local/bin/docker-compose; \
				sudo chmod +x /usr/local/bin/docker-compose; \
			fi; \
			;; \
		*) \
			echo "${RED}–ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è $$OS${NC}"; \
			echo "${BLUE}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é: https://docs.docker.com/get-docker/${NC}"; \
			exit 1; \
			;; \
	esac
	@echo "${GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
	@echo "${YELLOW}‚ö†Ô∏è  –ù–∞ Linux –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: newgrp docker${NC}"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫
setup: ## üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ (–≤—Å–µ –≤ –æ–¥–Ω–æ–º)
	@echo "${GREEN}üéØ GameIDE Auto Setup${NC}"
	@make check || make install-deps
	@make install
	@make start
	@echo ""
	@echo "${GREEN}üéâ GameIDE —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!${NC}"
	@echo ""
	@echo "${YELLOW}–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
	@echo "  make logs      - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
	@echo "  make status    - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"  
	@echo "  make health    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"
	@echo "  make stop      - –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
	@echo "  make help      - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"

# –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –Ω—É–ª—è (–≤–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
auto-install: ## üöÄ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –Ω—É–ª—è (–≤–∫–ª—é—á–∞—è Docker)
	@echo "${GREEN}üöÄ GameIDE Full Auto Install${NC}"
	@echo "${YELLOW}–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏${NC}"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm && [ "$$confirm" = "y" ]
	@make install-deps
	@make setup
	@echo ""
	@echo "${GREEN}üéâ –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ GameIDE –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
	@echo "${YELLOW}–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞:${NC}"
	@echo "  Frontend: http://localhost:3000"
	@echo "  Backend:  http://localhost:3001"

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
default: help 
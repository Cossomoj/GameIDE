apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: gameide-prod
type: Opaque
data:
  # echo -n "your_jwt_secret_here" | base64 - ЗАМЕНИТЕ НА СВОЙ СЕКРЕТ
  JWT_SECRET: eW91cl9qd3Rfc2VjcmV0X2hlcmU=
  # echo -n "sk-your_openai_key" | base64
  OPENAI_API_KEY: c2steW91cl9vcGVuYWlfa2V5
  # echo -n "your_deepseek_key" | base64
  DEEPSEEK_API_KEY: eW91cl9kZWVwc2Vla19rZXk=
  # echo -n "your_claude_key" | base64
  CLAUDE_API_KEY: eW91cl9jbGF1ZGVfa2V5
  # echo -n "your_yandex_app_id" | base64
  YANDEX_SDK_APP_ID: eW91cl95YW5kZXhfYXBwX2lk
  # echo -n "your_sentry_dsn" | base64
  SENTRY_DSN: eW91cl9zZW50cnlfZHNu
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: gameide-prod
data:
  NODE_ENV: "production"
  PORT: "3001"
  LOG_LEVEL: "info"
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  MAX_FILE_SIZE: "100MB"
  MAX_GENERATION_TIME: "300"
  MAX_CONCURRENT_GENERATIONS: "10"
  ENABLE_CORS: "true"
  CORS_ORIGIN: "https://gameide.com,https://www.gameide.com"
  DATABASE_URL: "postgresql://gameide_user:your_secure_password@postgres-service:5432/gameide_prod"
  REDIS_URL: "redis://redis-service:6379"
  MONGODB_URL: "mongodb://mongodb-service:27017/gameide_prod"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: gameide-prod
  labels:
    app: backend
    tier: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        tier: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: gameide-service-account
      containers:
      - name: backend
        image: gameide/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        env:
        - name: INSTANCE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - configMapRef:
            name: backend-config
        - secretRef:
            name: backend-secret
        - secretRef:
            name: postgres-secret
        volumeMounts:
        - name: games-output
          mountPath: /app/games-output
        - name: uploads
          mountPath: /app/uploads
        - name: temp
          mountPath: /app/temp
        - name: logs
          mountPath: /app/logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c']
        args:
        - |
          until pg_isready -h postgres-service -p 5432 -U gameide_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
      - name: wait-for-redis
        image: redis:7-alpine
        command: ['sh', '-c']
        args:
        - |
          until redis-cli -h redis-service -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
      volumes:
      - name: games-output
        persistentVolumeClaim:
          claimName: games-output-pvc
      - name: uploads
        persistentVolumeClaim:
          claimName: uploads-pvc
      - name: temp
        emptyDir:
          sizeLimit: 1Gi
      - name: logs
        persistentVolumeClaim:
          claimName: logs-pvc
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: gameide-prod
  labels:
    app: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3001"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 3001
    targetPort: 3001
    protocol: TCP
    name: http
  selector:
    app: backend
  sessionAffinity: None
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: gameide-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: games-output-pvc
  namespace: gameide-prod
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-pvc
  namespace: gameide-prod
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-pvc
  namespace: gameide-prod
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: gameide-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: backend
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-network-policy
  namespace: gameide-prod
spec:
  podSelector:
    matchLabels:
      app: backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 3001
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: mongodb
    ports:
    - protocol: TCP
      port: 27017
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80 
version: '3.8'

services:
  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gameide-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - frontend_build:/usr/share/nginx/html:ro
    depends_on:
      - backend-1
      - backend-2
      - frontend
    networks:
      - gameide-network
    restart: unless-stopped
    environment:
      - NGINX_HOST=${DOMAIN_NAME:-localhost}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gameide.rule=Host(`${DOMAIN_NAME:-localhost}`)"
      - "traefik.http.routers.gameide.tls=true"
      - "traefik.http.routers.gameide.tls.certresolver=letsencrypt"

  # Frontend (Build stage)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=${API_URL:-http://localhost:3001}
        - REACT_APP_WS_URL=${WS_URL:-ws://localhost:3001}
        - REACT_APP_ENVIRONMENT=production
    container_name: gameide-frontend
    volumes:
      - frontend_build:/app/dist
    networks:
      - gameide-network
    environment:
      - NODE_ENV=production
    labels:
      - "traefik.enable=false"

  # Backend Service - Instance 1
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: gameide-backend-1
    expose:
      - "3001"
    volumes:
      - ./games-output:/app/games-output
      - ./logs/backend-1:/app/logs
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - gameide-network
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/${MONGO_DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - API_KEYS_OPENAI=${OPENAI_API_KEY}
      - API_KEYS_DEEPSEEK=${DEEPSEEK_API_KEY}
      - API_KEYS_CLAUDE=${CLAUDE_API_KEY}
      - YANDEX_SDK_APP_ID=${YANDEX_SDK_APP_ID}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=info
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - INSTANCE_ID=backend-1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'
        reservations:
          memory: 512m
          cpus: '0.25'

  # Backend Service - Instance 2
  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: gameide-backend-2
    expose:
      - "3001"
    volumes:
      - ./games-output:/app/games-output
      - ./logs/backend-2:/app/logs
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - gameide-network
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/${MONGO_DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - API_KEYS_OPENAI=${OPENAI_API_KEY}
      - API_KEYS_DEEPSEEK=${DEEPSEEK_API_KEY}
      - API_KEYS_CLAUDE=${CLAUDE_API_KEY}
      - YANDEX_SDK_APP_ID=${YANDEX_SDK_APP_ID}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=info
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - INSTANCE_ID=backend-2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'
        reservations:
          memory: 512m
          cpus: '0.25'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gameide-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./logs/postgres:/var/log/postgresql
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - gameide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'
        reservations:
          memory: 256m
          cpus: '0.25'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gameide-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
      - ./logs/redis:/var/log/redis
    command: redis-server /etc/redis/redis.conf
    networks:
      - gameide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.25'
        reservations:
          memory: 128m
          cpus: '0.1'

  # MongoDB
  mongodb:
    image: mongo:6.0
    container_name: gameide-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./logs/mongodb:/var/log/mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
    networks:
      - gameide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'
        reservations:
          memory: 256m
          cpus: '0.25'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: gameide-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - gameide-network
    restart: unless-stopped
    depends_on:
      - node-exporter
      - cadvisor

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: gameide-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - gameide-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: gameide-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - gameide-network
    restart: unless-stopped

  # cAdvisor (Container monitoring)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: gameide-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - gameide-network
    restart: unless-stopped

  # Elasticsearch (для логов)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: gameide-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - gameide-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'

  # Kibana (для визуализации логов)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: gameide-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - gameide-network
    restart: unless-stopped

  # Logstash (для обработки логов)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: gameide-logstash
    volumes:
      - ./monitoring/logstash/config:/usr/share/logstash/pipeline
      - ./logs:/usr/share/logstash/logs:ro
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
    depends_on:
      - elasticsearch
    networks:
      - gameide-network
    restart: unless-stopped

  # Backup Service
  backup:
    image: alpine:latest
    container_name: gameide-backup
    volumes:
      - postgres_data:/backup/postgres:ro
      - mongodb_data:/backup/mongodb:ro
      - redis_data:/backup/redis:ro
      - ./backups:/backups
      - ./scripts:/scripts:ro
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    command: |
      sh -c "
        apk add --no-cache postgresql-client mongodb-tools redis dcron &&
        echo '${BACKUP_SCHEDULE:-0 2 * * *} /scripts/backup.sh' | crontab - &&
        crond -f
      "
    networks:
      - gameide-network
    restart: unless-stopped
    depends_on:
      - postgres
      - mongodb
      - redis

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  frontend_build:
    driver: local

networks:
  gameide-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 
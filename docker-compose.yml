version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gameide-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-gameide_dev}
      - POSTGRES_USER=${POSTGRES_USER:-gameide_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-gameide_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gameide_user} -d ${POSTGRES_DB:-gameide_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - gameide-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gameide-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    networks:
      - gameide-network

  # MongoDB for Analytics
  mongodb:
    image: mongo:6.0
    container_name: gameide-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER:-root}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-mongopassword}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME:-gameide_analytics}
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - gameide-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
    container_name: gameide-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://${POSTGRES_USER:-gameide_user}:${POSTGRES_PASSWORD:-gameide_password}@postgres:5432/${POSTGRES_DB:-gameide_dev}
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://${MONGO_ROOT_USER:-root}:${MONGO_ROOT_PASSWORD:-mongopassword}@mongodb:27017/${MONGO_DB_NAME:-gameide_analytics}?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_key_change_in_production}
      - API_KEYS_OPENAI=${OPENAI_API_KEY:-}
      - API_KEYS_DEEPSEEK=${DEEPSEEK_API_KEY:-}
      - API_KEYS_CLAUDE=${CLAUDE_API_KEY:-}
      - YANDEX_SDK_APP_ID=${YANDEX_SDK_APP_ID:-}
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=debug
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/templates:/app/templates:ro
      - ./games-output:/app/games-output
      - ./logs/backend:/app/logs
      - ./temp:/app/temp
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "wget", "-q", "--spider", "http://127.0.0.1:3001/api/health"]
    #   interval: 10s
    #   timeout: 3s
    #   retries: 3
    #   start_period: 20s
    restart: unless-stopped
    networks:
      - gameide-network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
        - REACT_APP_API_URL=http://localhost:3001
        - REACT_APP_WS_URL=ws://localhost:3001
        - REACT_APP_ENVIRONMENT=development
    container_name: gameide-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=/api
      - REACT_APP_WS_URL=ws://localhost:3001
      - REACT_APP_ENVIRONMENT=development
      - WDS_SOCKET_HOST=localhost
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - node_modules:/app/node_modules
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - gameide-network

  # Nginx Reverse Proxy (optional for development)
  nginx:
    image: nginx:alpine
    container_name: gameide-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - gameide-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  node_modules:
    driver: local

networks:
  gameide-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16 